                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.2 #9293 (MINGW32)
                              4 ; This file was generated Sun Nov 04 13:35:13 2018
                              5 ;--------------------------------------------------------
                              6 	.module PSGlib
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _PSGSFXStatus
                             13 	.globl _PSGChannel3SFX
                             14 	.globl _PSGChannel2SFX
                             15 	.globl _PSGMusicStatus
                             16 	.globl _PSGSFXSubstringRetAddr
                             17 	.globl _PSGSFXSubstringLen
                             18 	.globl _PSGSFXLoopFlag
                             19 	.globl _PSGSFXSkipFrames
                             20 	.globl _PSGSFXLoopPoint
                             21 	.globl _PSGSFXPointer
                             22 	.globl _PSGSFXStart
                             23 	.globl _PSGChan2HighTone
                             24 	.globl _PSGChan3LowTone
                             25 	.globl _PSGChan2LowTone
                             26 	.globl _PSGChan3Volume
                             27 	.globl _PSGChan2Volume
                             28 	.globl _PSGMusicSubstringRetAddr
                             29 	.globl _PSGMusicSubstringLen
                             30 	.globl _PSGMusicLastLatch
                             31 	.globl _PSGLoopFlag
                             32 	.globl _PSGMusicSkipFrames
                             33 	.globl _PSGMusicLoopPoint
                             34 	.globl _PSGMusicPointer
                             35 	.globl _PSGMusicStart
                             36 	.globl _PSGStop
                             37 	.globl _PSGPlay
                             38 	.globl _PSGCancelLoop
                             39 	.globl _PSGPlayNoRepeat
                             40 	.globl _PSGGetStatus
                             41 	.globl _PSGSFXStop
                             42 	.globl _PSGSFXPlay
                             43 	.globl _PSGSFXCancelLoop
                             44 	.globl _PSGSFXGetStatus
                             45 	.globl _PSGSFXPlayLoop
                             46 	.globl _PSGFrame
                             47 	.globl _PSGSFXFrame
                             48 ;--------------------------------------------------------
                             49 ; special function registers
                             50 ;--------------------------------------------------------
                     007F    51 _PSGPort	=	0x007f
                             52 ;--------------------------------------------------------
                             53 ; ram data
                             54 ;--------------------------------------------------------
                             55 	.area _DATA
   0000                      56 _PSGMusicStart::
   0000                      57 	.ds 2
   0002                      58 _PSGMusicPointer::
   0002                      59 	.ds 2
   0004                      60 _PSGMusicLoopPoint::
   0004                      61 	.ds 2
   0006                      62 _PSGMusicSkipFrames::
   0006                      63 	.ds 1
   0007                      64 _PSGLoopFlag::
   0007                      65 	.ds 1
   0008                      66 _PSGMusicLastLatch::
   0008                      67 	.ds 1
   0009                      68 _PSGMusicSubstringLen::
   0009                      69 	.ds 1
   000A                      70 _PSGMusicSubstringRetAddr::
   000A                      71 	.ds 2
   000C                      72 _PSGChan2Volume::
   000C                      73 	.ds 1
   000D                      74 _PSGChan3Volume::
   000D                      75 	.ds 1
   000E                      76 _PSGChan2LowTone::
   000E                      77 	.ds 1
   000F                      78 _PSGChan3LowTone::
   000F                      79 	.ds 1
   0010                      80 _PSGChan2HighTone::
   0010                      81 	.ds 1
   0011                      82 _PSGSFXStart::
   0011                      83 	.ds 2
   0013                      84 _PSGSFXPointer::
   0013                      85 	.ds 2
   0015                      86 _PSGSFXLoopPoint::
   0015                      87 	.ds 2
   0017                      88 _PSGSFXSkipFrames::
   0017                      89 	.ds 1
   0018                      90 _PSGSFXLoopFlag::
   0018                      91 	.ds 1
   0019                      92 _PSGSFXSubstringLen::
   0019                      93 	.ds 1
   001A                      94 _PSGSFXSubstringRetAddr::
   001A                      95 	.ds 2
                             96 ;--------------------------------------------------------
                             97 ; ram data
                             98 ;--------------------------------------------------------
                             99 	.area _INITIALIZED
   0000                     100 _PSGMusicStatus::
   0000                     101 	.ds 1
   0001                     102 _PSGChannel2SFX::
   0001                     103 	.ds 1
   0002                     104 _PSGChannel3SFX::
   0002                     105 	.ds 1
   0003                     106 _PSGSFXStatus::
   0003                     107 	.ds 1
                            108 ;--------------------------------------------------------
                            109 ; absolute external ram data
                            110 ;--------------------------------------------------------
                            111 	.area _DABS (ABS)
                            112 ;--------------------------------------------------------
                            113 ; global & static initialisations
                            114 ;--------------------------------------------------------
                            115 	.area _HOME
                            116 	.area _GSINIT
                            117 	.area _GSFINAL
                            118 	.area _GSINIT
                            119 ;--------------------------------------------------------
                            120 ; Home
                            121 ;--------------------------------------------------------
                            122 	.area _HOME
                            123 	.area _HOME
                            124 ;--------------------------------------------------------
                            125 ; code
                            126 ;--------------------------------------------------------
                            127 	.area _CODE
                            128 ;lib/PSGlib.c:64: void PSGStop (void) {
                            129 ;	---------------------------------
                            130 ; Function PSGStop
                            131 ; ---------------------------------
   0000                     132 _PSGStop::
                            133 ;lib/PSGlib.c:68: if (PSGMusicStatus) {
   0000 3Ar00r00      [13]  134 	ld	a,(#_PSGMusicStatus + 0)
   0003 B7            [ 4]  135 	or	a, a
   0004 C8            [11]  136 	ret	Z
                            137 ;lib/PSGlib.c:69: PSGPort=PSGLatch|PSGChannel0|PSGVolumeData|0x0F;   // latch channel 0, volume=0xF (silent)
   0005 3E 9F         [ 7]  138 	ld	a,#0x9F
   0007 D3 7F         [11]  139 	out	(_PSGPort),a
                            140 ;lib/PSGlib.c:70: PSGPort=PSGLatch|PSGChannel1|PSGVolumeData|0x0F;   // latch channel 1, volume=0xF (silent)
   0009 3E BF         [ 7]  141 	ld	a,#0xBF
   000B D3 7F         [11]  142 	out	(_PSGPort),a
                            143 ;lib/PSGlib.c:71: if (!(PSGChannel2SFX))
   000D 3Ar01r00      [13]  144 	ld	a,(#_PSGChannel2SFX + 0)
   0010 B7            [ 4]  145 	or	a, a
   0011 20 04         [12]  146 	jr	NZ,00102$
                            147 ;lib/PSGlib.c:72: PSGPort=PSGLatch|PSGChannel2|PSGVolumeData|0x0F;   // latch channel 2, volume=0xF (silent)
   0013 3E DF         [ 7]  148 	ld	a,#0xDF
   0015 D3 7F         [11]  149 	out	(_PSGPort),a
   0017                     150 00102$:
                            151 ;lib/PSGlib.c:73: if (!(PSGChannel3SFX))
   0017 3Ar02r00      [13]  152 	ld	a,(#_PSGChannel3SFX + 0)
   001A B7            [ 4]  153 	or	a, a
   001B 20 04         [12]  154 	jr	NZ,00104$
                            155 ;lib/PSGlib.c:74: PSGPort=PSGLatch|PSGChannel3|PSGVolumeData|0x0F;   // latch channel 3, volume=0xF (silent)
   001D 3E FF         [ 7]  156 	ld	a,#0xFF
   001F D3 7F         [11]  157 	out	(_PSGPort),a
   0021                     158 00104$:
                            159 ;lib/PSGlib.c:75: PSGMusicStatus=PSG_STOPPED;
   0021 21r00r00      [10]  160 	ld	hl,#_PSGMusicStatus + 0
   0024 36 00         [10]  161 	ld	(hl), #0x00
   0026 C9            [10]  162 	ret
                            163 ;lib/PSGlib.c:79: void PSGPlay (void *song) {
                            164 ;	---------------------------------
                            165 ; Function PSGPlay
                            166 ; ---------------------------------
   0027                     167 _PSGPlay::
                            168 ;lib/PSGlib.c:83: PSGStop();
   0027 CDr00r00      [17]  169 	call	_PSGStop
                            170 ;lib/PSGlib.c:84: PSGLoopFlag=1;
   002A 21r07r00      [10]  171 	ld	hl,#_PSGLoopFlag + 0
   002D 36 01         [10]  172 	ld	(hl), #0x01
                            173 ;lib/PSGlib.c:85: PSGMusicStart=song;           // store the begin point of music
   002F C1            [10]  174 	pop	bc
   0030 D1            [10]  175 	pop	de
   0031 D5            [11]  176 	push	de
   0032 C5            [11]  177 	push	bc
   0033 ED 53r00r00   [20]  178 	ld	(_PSGMusicStart),de
                            179 ;lib/PSGlib.c:86: PSGMusicPointer=song;         // set music pointer to begin of music
   0037 ED 53r02r00   [20]  180 	ld	(_PSGMusicPointer),de
                            181 ;lib/PSGlib.c:87: PSGMusicLoopPoint=song;       // looppointer points to begin too
   003B ED 53r04r00   [20]  182 	ld	(_PSGMusicLoopPoint),de
                            183 ;lib/PSGlib.c:89: PSGMusicSkipFrames=0;         // reset the skip frames
   003F 21r06r00      [10]  184 	ld	hl,#_PSGMusicSkipFrames + 0
   0042 36 00         [10]  185 	ld	(hl), #0x00
                            186 ;lib/PSGlib.c:90: PSGMusicSubstringLen=0;       // reset the substring len (for compression)
   0044 21r09r00      [10]  187 	ld	hl,#_PSGMusicSubstringLen + 0
   0047 36 00         [10]  188 	ld	(hl), #0x00
                            189 ;lib/PSGlib.c:91: PSGMusicLastLatch=PSGLatch|PSGChannel0|PSGVolumeData|0x0F;   // latch channel 0, volume=0xF (silent)
   0049 21r08r00      [10]  190 	ld	hl,#_PSGMusicLastLatch + 0
   004C 36 9F         [10]  191 	ld	(hl), #0x9F
                            192 ;lib/PSGlib.c:92: PSGMusicStatus=PSG_PLAYING;
   004E 21r00r00      [10]  193 	ld	hl,#_PSGMusicStatus + 0
   0051 36 01         [10]  194 	ld	(hl), #0x01
   0053 C9            [10]  195 	ret
                            196 ;lib/PSGlib.c:95: void PSGCancelLoop (void) {
                            197 ;	---------------------------------
                            198 ; Function PSGCancelLoop
                            199 ; ---------------------------------
   0054                     200 _PSGCancelLoop::
                            201 ;lib/PSGlib.c:99: PSGLoopFlag=0;
   0054 21r07r00      [10]  202 	ld	hl,#_PSGLoopFlag + 0
   0057 36 00         [10]  203 	ld	(hl), #0x00
   0059 C9            [10]  204 	ret
                            205 ;lib/PSGlib.c:102: void PSGPlayNoRepeat (void *song) {
                            206 ;	---------------------------------
                            207 ; Function PSGPlayNoRepeat
                            208 ; ---------------------------------
   005A                     209 _PSGPlayNoRepeat::
                            210 ;lib/PSGlib.c:106: PSGPlay(song);
   005A C1            [10]  211 	pop	bc
   005B E1            [10]  212 	pop	hl
   005C E5            [11]  213 	push	hl
   005D C5            [11]  214 	push	bc
   005E E5            [11]  215 	push	hl
   005F CDr27r00      [17]  216 	call	_PSGPlay
   0062 F1            [10]  217 	pop	af
                            218 ;lib/PSGlib.c:107: PSGLoopFlag=0;
   0063 21r07r00      [10]  219 	ld	hl,#_PSGLoopFlag + 0
   0066 36 00         [10]  220 	ld	(hl), #0x00
   0068 C9            [10]  221 	ret
                            222 ;lib/PSGlib.c:110: unsigned char PSGGetStatus (void) {
                            223 ;	---------------------------------
                            224 ; Function PSGGetStatus
                            225 ; ---------------------------------
   0069                     226 _PSGGetStatus::
                            227 ;lib/PSGlib.c:114: return(PSGMusicStatus);
   0069 FD 21r00r00   [14]  228 	ld	iy,#_PSGMusicStatus
   006D FD 6E 00      [19]  229 	ld	l,0 (iy)
   0070 C9            [10]  230 	ret
                            231 ;lib/PSGlib.c:117: void PSGSFXStop (void) {
                            232 ;	---------------------------------
                            233 ; Function PSGSFXStop
                            234 ; ---------------------------------
   0071                     235 _PSGSFXStop::
                            236 ;lib/PSGlib.c:121: if (PSGSFXStatus) {
   0071 3Ar03r00      [13]  237 	ld	a,(#_PSGSFXStatus + 0)
   0074 B7            [ 4]  238 	or	a, a
   0075 C8            [11]  239 	ret	Z
                            240 ;lib/PSGlib.c:122: if (PSGChannel2SFX) {
   0076 3Ar01r00      [13]  241 	ld	a,(#_PSGChannel2SFX + 0)
   0079 B7            [ 4]  242 	or	a, a
   007A 28 2A         [12]  243 	jr	Z,00105$
                            244 ;lib/PSGlib.c:123: if (PSGMusicStatus) {
   007C 3Ar00r00      [13]  245 	ld	a,(#_PSGMusicStatus + 0)
   007F B7            [ 4]  246 	or	a, a
   0080 28 1B         [12]  247 	jr	Z,00102$
                            248 ;lib/PSGlib.c:124: PSGPort=PSGLatch|PSGChannel2|(PSGChan2LowTone&0x0F);
   0082 3Ar0Er00      [13]  249 	ld	a,(#_PSGChan2LowTone + 0)
   0085 E6 0F         [ 7]  250 	and	a, #0x0F
   0087 F6 C0         [ 7]  251 	or	a, #0xC0
   0089 D3 7F         [11]  252 	out	(_PSGPort),a
                            253 ;lib/PSGlib.c:125: PSGPort=PSGChan2HighTone&0x3F;
   008B 3Ar10r00      [13]  254 	ld	a,(#_PSGChan2HighTone + 0)
   008E E6 3F         [ 7]  255 	and	a, #0x3F
   0090 D3 7F         [11]  256 	out	(_PSGPort),a
                            257 ;lib/PSGlib.c:126: PSGPort=PSGLatch|PSGChannel2|PSGVolumeData|(PSGChan2Volume&0x0F);
   0092 3Ar0Cr00      [13]  258 	ld	a,(#_PSGChan2Volume + 0)
   0095 E6 0F         [ 7]  259 	and	a, #0x0F
   0097 F6 D0         [ 7]  260 	or	a, #0xD0
   0099 D3 7F         [11]  261 	out	(_PSGPort),a
   009B 18 04         [12]  262 	jr	00103$
   009D                     263 00102$:
                            264 ;lib/PSGlib.c:128: PSGPort=PSGLatch|PSGChannel2|PSGVolumeData|0x0F;
   009D 3E DF         [ 7]  265 	ld	a,#0xDF
   009F D3 7F         [11]  266 	out	(_PSGPort),a
   00A1                     267 00103$:
                            268 ;lib/PSGlib.c:130: PSGChannel2SFX=PSG_STOPPED;
   00A1 21r01r00      [10]  269 	ld	hl,#_PSGChannel2SFX + 0
   00A4 36 00         [10]  270 	ld	(hl), #0x00
   00A6                     271 00105$:
                            272 ;lib/PSGlib.c:133: if (PSGChannel3SFX) {
   00A6 3Ar02r00      [13]  273 	ld	a,(#_PSGChannel3SFX + 0)
   00A9 B7            [ 4]  274 	or	a, a
   00AA 28 23         [12]  275 	jr	Z,00110$
                            276 ;lib/PSGlib.c:134: if (PSGMusicStatus) {
   00AC 3Ar00r00      [13]  277 	ld	a,(#_PSGMusicStatus + 0)
   00AF B7            [ 4]  278 	or	a, a
   00B0 28 14         [12]  279 	jr	Z,00107$
                            280 ;lib/PSGlib.c:135: PSGPort=PSGLatch|PSGChannel3|(PSGChan3LowTone&0x0F);
   00B2 3Ar0Fr00      [13]  281 	ld	a,(#_PSGChan3LowTone + 0)
   00B5 E6 0F         [ 7]  282 	and	a, #0x0F
   00B7 F6 E0         [ 7]  283 	or	a, #0xE0
   00B9 D3 7F         [11]  284 	out	(_PSGPort),a
                            285 ;lib/PSGlib.c:136: PSGPort=PSGLatch|PSGChannel3|PSGVolumeData|(PSGChan3Volume&0x0F);
   00BB 3Ar0Dr00      [13]  286 	ld	a,(#_PSGChan3Volume + 0)
   00BE E6 0F         [ 7]  287 	and	a, #0x0F
   00C0 F6 F0         [ 7]  288 	or	a, #0xF0
   00C2 D3 7F         [11]  289 	out	(_PSGPort),a
   00C4 18 04         [12]  290 	jr	00108$
   00C6                     291 00107$:
                            292 ;lib/PSGlib.c:138: PSGPort=PSGLatch|PSGChannel3|PSGVolumeData|0x0F;
   00C6 3E FF         [ 7]  293 	ld	a,#0xFF
   00C8 D3 7F         [11]  294 	out	(_PSGPort),a
   00CA                     295 00108$:
                            296 ;lib/PSGlib.c:140: PSGChannel3SFX=PSG_STOPPED;
   00CA 21r02r00      [10]  297 	ld	hl,#_PSGChannel3SFX + 0
   00CD 36 00         [10]  298 	ld	(hl), #0x00
   00CF                     299 00110$:
                            300 ;lib/PSGlib.c:142: PSGSFXStatus=PSG_STOPPED;
   00CF 21r03r00      [10]  301 	ld	hl,#_PSGSFXStatus + 0
   00D2 36 00         [10]  302 	ld	(hl), #0x00
   00D4 C9            [10]  303 	ret
                            304 ;lib/PSGlib.c:146: void PSGSFXPlay (void *sfx, unsigned char channels) {
                            305 ;	---------------------------------
                            306 ; Function PSGSFXPlay
                            307 ; ---------------------------------
   00D5                     308 _PSGSFXPlay::
                            309 ;lib/PSGlib.c:151: PSGSFXStop();
   00D5 CDr71r00      [17]  310 	call	_PSGSFXStop
                            311 ;lib/PSGlib.c:152: PSGSFXLoopFlag=0;
   00D8 21r18r00      [10]  312 	ld	hl,#_PSGSFXLoopFlag + 0
   00DB 36 00         [10]  313 	ld	(hl), #0x00
                            314 ;lib/PSGlib.c:153: PSGSFXStart=sfx;              // store begin of SFX
   00DD C1            [10]  315 	pop	bc
   00DE D1            [10]  316 	pop	de
   00DF D5            [11]  317 	push	de
   00E0 C5            [11]  318 	push	bc
   00E1 ED 53r11r00   [20]  319 	ld	(_PSGSFXStart),de
                            320 ;lib/PSGlib.c:154: PSGSFXPointer=sfx;            // set the pointer to begin of SFX
   00E5 ED 53r13r00   [20]  321 	ld	(_PSGSFXPointer),de
                            322 ;lib/PSGlib.c:155: PSGSFXLoopPoint=sfx;          // looppointer points to begin too
   00E9 ED 53r15r00   [20]  323 	ld	(_PSGSFXLoopPoint),de
                            324 ;lib/PSGlib.c:156: PSGSFXSkipFrames=0;           // reset the skip frames
   00ED 21r17r00      [10]  325 	ld	hl,#_PSGSFXSkipFrames + 0
   00F0 36 00         [10]  326 	ld	(hl), #0x00
                            327 ;lib/PSGlib.c:157: PSGSFXSubstringLen=0;         // reset the substring len
   00F2 21r19r00      [10]  328 	ld	hl,#_PSGSFXSubstringLen + 0
   00F5 36 00         [10]  329 	ld	(hl), #0x00
                            330 ;lib/PSGlib.c:158: PSGChannel2SFX=(channels&SFX_CHANNEL2)?PSG_PLAYING:PSG_STOPPED;
   00F7 21 04 00      [10]  331 	ld	hl, #4+0
   00FA 39            [11]  332 	add	hl, sp
   00FB 7E            [ 7]  333 	ld	a, (hl)
   00FC 0F            [ 4]  334 	rrca
   00FD 30 04         [12]  335 	jr	NC,00103$
   00FF 3E 01         [ 7]  336 	ld	a,#0x01
   0101 18 02         [12]  337 	jr	00104$
   0103                     338 00103$:
   0103 3E 00         [ 7]  339 	ld	a,#0x00
   0105                     340 00104$:
   0105 32r01r00      [13]  341 	ld	(#_PSGChannel2SFX + 0),a
                            342 ;lib/PSGlib.c:159: PSGChannel3SFX=(channels&SFX_CHANNEL3)?PSG_PLAYING:PSG_STOPPED;
   0108 21 04 00      [10]  343 	ld	hl, #4+0
   010B 39            [11]  344 	add	hl, sp
   010C 7E            [ 7]  345 	ld	a, (hl)
   010D E6 02         [ 7]  346 	and	a, #0x02
   010F 28 04         [12]  347 	jr	Z,00105$
   0111 3E 01         [ 7]  348 	ld	a,#0x01
   0113 18 02         [12]  349 	jr	00106$
   0115                     350 00105$:
   0115 3E 00         [ 7]  351 	ld	a,#0x00
   0117                     352 00106$:
   0117 32r02r00      [13]  353 	ld	(#_PSGChannel3SFX + 0),a
                            354 ;lib/PSGlib.c:160: PSGSFXStatus=PSG_PLAYING;
   011A 21r03r00      [10]  355 	ld	hl,#_PSGSFXStatus + 0
   011D 36 01         [10]  356 	ld	(hl), #0x01
   011F C9            [10]  357 	ret
                            358 ;lib/PSGlib.c:163: void PSGSFXCancelLoop (void) {
                            359 ;	---------------------------------
                            360 ; Function PSGSFXCancelLoop
                            361 ; ---------------------------------
   0120                     362 _PSGSFXCancelLoop::
                            363 ;lib/PSGlib.c:167: PSGSFXLoopFlag=0;
   0120 21r18r00      [10]  364 	ld	hl,#_PSGSFXLoopFlag + 0
   0123 36 00         [10]  365 	ld	(hl), #0x00
   0125 C9            [10]  366 	ret
                            367 ;lib/PSGlib.c:170: unsigned char PSGSFXGetStatus (void) {
                            368 ;	---------------------------------
                            369 ; Function PSGSFXGetStatus
                            370 ; ---------------------------------
   0126                     371 _PSGSFXGetStatus::
                            372 ;lib/PSGlib.c:174: return(PSGSFXStatus);
   0126 FD 21r03r00   [14]  373 	ld	iy,#_PSGSFXStatus
   012A FD 6E 00      [19]  374 	ld	l,0 (iy)
   012D C9            [10]  375 	ret
                            376 ;lib/PSGlib.c:177: void PSGSFXPlayLoop (void *sfx, unsigned char channels) {
                            377 ;	---------------------------------
                            378 ; Function PSGSFXPlayLoop
                            379 ; ---------------------------------
   012E                     380 _PSGSFXPlayLoop::
                            381 ;lib/PSGlib.c:182: PSGSFXPlay(sfx, channels);
   012E 21 04 00      [10]  382 	ld	hl, #4+0
   0131 39            [11]  383 	add	hl, sp
   0132 7E            [ 7]  384 	ld	a, (hl)
   0133 F5            [11]  385 	push	af
   0134 33            [ 6]  386 	inc	sp
   0135 21 03 00      [10]  387 	ld	hl, #3
   0138 39            [11]  388 	add	hl, sp
   0139 4E            [ 7]  389 	ld	c, (hl)
   013A 23            [ 6]  390 	inc	hl
   013B 46            [ 7]  391 	ld	b, (hl)
   013C C5            [11]  392 	push	bc
   013D CDrD5r00      [17]  393 	call	_PSGSFXPlay
   0140 F1            [10]  394 	pop	af
   0141 33            [ 6]  395 	inc	sp
                            396 ;lib/PSGlib.c:183: PSGSFXLoopFlag=1;
   0142 21r18r00      [10]  397 	ld	hl,#_PSGSFXLoopFlag + 0
   0145 36 01         [10]  398 	ld	(hl), #0x01
   0147 C9            [10]  399 	ret
                            400 ;lib/PSGlib.c:186: void PSGFrame (void) {
                            401 ;	---------------------------------
                            402 ; Function PSGFrame
                            403 ; ---------------------------------
   0148                     404 _PSGFrame::
                            405 ;lib/PSGlib.c:365: __endasm;
   0148 3Ar00r00      [13]  406 	ld a,(_PSGMusicStatus) ; check if we have got to play a tune
   014B B7            [ 4]  407 	or a
   014C C8            [11]  408 	ret z
   014D 3Ar06r00      [13]  409 	ld a,(_PSGMusicSkipFrames) ; check if we have got to skip frames
   0150 B7            [ 4]  410 	or a
   0151 20 5C         [12]  411 	jr nz,_skipFrame
   0153 2Ar02r00      [16]  412 	ld hl,(_PSGMusicPointer) ; read current address
   0156                     413 	_intLoop:
   0156 46            [ 7]  414 	ld b,(hl) ; load PSG byte (in B)
   0157 23            [ 6]  415 	inc hl ; point to next byte
   0158 3Ar09r00      [13]  416 	ld a,(_PSGMusicSubstringLen) ; read substring len
   015B B7            [ 4]  417 	or a
   015C 28 09         [12]  418 	jr z,_continue ; check if it is 0 (we are not in a substring)
   015E 3D            [ 4]  419 	dec a ; decrease len
   015F 32r09r00      [13]  420 	ld (_PSGMusicSubstringLen),a ; save len
   0162 20 03         [12]  421 	jr nz,_continue
   0164 2Ar0Ar00      [16]  422 	ld hl,(_PSGMusicSubstringRetAddr) ; substring is over, retrieve return address
   0167                     423 	_continue:
   0167 78            [ 4]  424 	ld a,b ; copy PSG byte into A
   0168 FE 80         [ 7]  425 	cp #0x80 ; is it a latch?
   016A 38 48         [12]  426 	jr c,_noLatch ; if < $80 then it is NOT a latch
   016C 32r08r00      [13]  427 	ld (_PSGMusicLastLatch),a ; it is a latch - save it
                            428 ; we have got the latch PSG byte both in A and in B
                            429 ; and we have to check if the value should pass to PSG or not
   016F CB 77         [ 8]  430 	bit 6,a ; test if the latch it is for channels 0-1 or for 2-3
   0171 28 68         [12]  431 	jr z,_send2PSG_A ; jump if it is for channels 0-1
   0173 CB 67         [ 8]  432 	bit 4,a ; test if it is a volume
   0175 28 1C         [12]  433 	jr z,_low_part_Tone ; jump if tone data (it is the low part)
   0177 CB 6F         [ 8]  434 	bit 5,a ; test if volume it is for channel 2 or 3
   0179 28 0C         [12]  435 	jr z,_a1 ; jump for channel 2
   017B 32r0Dr00      [13]  436 	ld (_PSGChan3Volume),a ; save volume data
   017E 3Ar02r00      [13]  437 	ld a,(_PSGChannel3SFX) ; channel 3 free?
   0181 B7            [ 4]  438 	or a
   0182 28 56         [12]  439 	jr z,_send2PSG
   0184 C3r56r01      [10]  440 	jp _intLoop
   0187                     441 	_a1:
   0187 32r0Cr00      [13]  442 	ld (_PSGChan2Volume),a ; save volume data
   018A 3Ar01r00      [13]  443 	ld a,(_PSGChannel2SFX) ; channel 2 free?
   018D B7            [ 4]  444 	or a
   018E 28 4A         [12]  445 	jr z,_send2PSG
   0190 C3r56r01      [10]  446 	jp _intLoop
   0193                     447 	_low_part_Tone:
                            448 ; we have got the latch PSG byte both in A and in B
                            449 ; and we have to check if the value should pass to PSG or not
   0193 CB 6F         [ 8]  450 	bit 5,a ; test if tone it is for channel 2 or 3
   0195 28 0C         [12]  451 	jr z,_a2 ; jump if channel 2
   0197 32r0Fr00      [13]  452 	ld (_PSGChan3LowTone),a ; save tone LOW data
   019A 3Ar02r00      [13]  453 	ld a,(_PSGChannel3SFX) ; channel 3 free?
   019D B7            [ 4]  454 	or a
   019E 28 3A         [12]  455 	jr z,_send2PSG
   01A0 C3r56r01      [10]  456 	jp _intLoop
   01A3                     457 	_a2:
   01A3 32r0Er00      [13]  458 	ld (_PSGChan2LowTone),a ; save tone LOW data
   01A6 3Ar01r00      [13]  459 	ld a,(_PSGChannel2SFX) ; channel 2 free?
   01A9 B7            [ 4]  460 	or a
   01AA 28 2E         [12]  461 	jr z,_send2PSG
   01AC C3r56r01      [10]  462 	jp _intLoop
   01AF                     463 	_skipFrame:
   01AF 3D            [ 4]  464 	dec a
   01B0 32r06r00      [13]  465 	ld (_PSGMusicSkipFrames),a
   01B3 C9            [10]  466 	ret
   01B4                     467 	_noLatch:
   01B4 FE 40         [ 7]  468 	cp #0x40
   01B6 38 06         [12]  469 	jr c,_command ; if < $40 then it is a command
                            470 ; it is a data
   01B8 3Ar08r00      [13]  471 	ld a,(_PSGMusicLastLatch) ; retrieve last latch
   01BB C3rE0r01      [10]  472 	jp _output_NoLatch
   01BE                     473 	_command:
   01BE FE 38         [ 7]  474 	cp #0x38
   01C0 28 07         [12]  475 	jr z,_done ; no additional frames
   01C2 38 09         [12]  476 	jr c,_otherCommands ; other commands?
   01C4 E6 07         [ 7]  477 	and #0x07 ; take only the last 3 bits for skip frames
   01C6 32r06r00      [13]  478 	ld (_PSGMusicSkipFrames),a ; we got additional frames
   01C9                     479 	_done:
   01C9 22r02r00      [16]  480 	ld (_PSGMusicPointer),hl ; save current address
   01CC C9            [10]  481 	ret ; frame done
   01CD                     482 	_otherCommands:
   01CD FE 08         [ 7]  483 	cp #0x08
   01CF 30 48         [12]  484 	jr nc,_substring
   01D1 FE 00         [ 7]  485 	cp #0x00
   01D3 28 37         [12]  486 	jr z,_musicLoop
   01D5 FE 01         [ 7]  487 	cp #0x01
   01D7 28 2D         [12]  488 	jr z,_setLoopPoint
                            489 ; ***************************************************************************
                            490 ; we should never get here!
                            491 ; if we do, it means the PSG file is probably corrupted, so we just RET
                            492 ; ***************************************************************************
   01D9 C9            [10]  493 	ret
   01DA                     494 	_send2PSG:
   01DA 78            [ 4]  495 	ld a,b
   01DB                     496 	_send2PSG_A:
   01DB D3 7F         [11]  497 	out (#0x7f),a ; output the byte
   01DD C3r56r01      [10]  498 	jp _intLoop
   01E0                     499 	_output_NoLatch:
                            500 ; we got the last latch in A and the PSG data in B
                            501 ; and we have to check if the value should pass to PSG or not
   01E0 CB 77         [ 8]  502 	bit 6,a ; test if the latch it is for channels 0-1 or for 2-3
   01E2 28 F6         [12]  503 	jr z,_send2PSG ; if it is for chn 0 or 1 then we have done!
   01E4 CB 67         [ 8]  504 	bit 4,a ; test if it is a volume
   01E6 28 44         [12]  505 	jr z,_high_part_Tone ; jump if tone data (it is the high part)
   01E8 CB 6F         [ 8]  506 	bit 5,a ; test if volume it is for channel 2 or 3
   01EA 28 0D         [12]  507 	jr z,_a3
   01EC 78            [ 4]  508 	ld a,b ; restore data in A
   01ED 32r0Dr00      [13]  509 	ld (_PSGChan3Volume),a ; save volume data
   01F0 3Ar02r00      [13]  510 	ld a,(_PSGChannel3SFX) ; channel 3 free?
   01F3 B7            [ 4]  511 	or a
   01F4 28 E4         [12]  512 	jr z,_send2PSG
   01F6 C3r56r01      [10]  513 	jp _intLoop
   01F9                     514 	_a3:
   01F9 78            [ 4]  515 	ld a,b ; restore data in A
   01FA 32r0Cr00      [13]  516 	ld (_PSGChan2Volume),a ; save volume data
   01FD 3Ar01r00      [13]  517 	ld a,(_PSGChannel2SFX) ; channel 2 free?
   0200 B7            [ 4]  518 	or a
   0201 28 D7         [12]  519 	jr z,_send2PSG
   0203 C3r56r01      [10]  520 	jp _intLoop
   0206                     521 	_setLoopPoint:
   0206 22r04r00      [16]  522 	ld (_PSGMusicLoopPoint),hl
   0209 C3r56r01      [10]  523 	jp _intLoop
   020C                     524 	_musicLoop:
   020C 3Ar07r00      [13]  525 	ld a,(_PSGLoopFlag) ; looping requested?
   020F B7            [ 4]  526 	or a
   0210 CAr00r00      [10]  527 	jp z,_PSGStop ; No:stop it!
   0213 2Ar04r00      [16]  528 	ld hl,(_PSGMusicLoopPoint)
   0216 C3r56r01      [10]  529 	jp _intLoop
   0219                     530 	_substring:
   0219 D6 04         [ 7]  531 	sub #0x08 -4 ; len is value - $08 + 4
   021B 32r09r00      [13]  532 	ld (_PSGMusicSubstringLen),a ; save len
   021E 4E            [ 7]  533 	ld c,(hl) ; load substring address (offset)
   021F 23            [ 6]  534 	inc hl
   0220 46            [ 7]  535 	ld b,(hl)
   0221 23            [ 6]  536 	inc hl
   0222 22r0Ar00      [16]  537 	ld (_PSGMusicSubstringRetAddr),hl ; save return address
   0225 2Ar00r00      [16]  538 	ld hl,(_PSGMusicStart)
   0228 09            [11]  539 	add hl,bc ; make substring current
   0229 C3r56r01      [10]  540 	jp _intLoop
   022C                     541 	_high_part_Tone:
                            542 ; we got the last latch in A and the PSG data in B
                            543 ; and we have to check if the value should pass to PSG or not
   022C CB 6F         [ 8]  544 	bit 5,a ; test if tone it is for channel 2 or 3
   022E 28 11         [12]  545 	jr z,_a4 ; jump if channel 2
   0230 78            [ 4]  546 	ld a,b ; PSG data in A
   0231 E6 07         [ 7]  547 	and #0x07 ; keep last 3 bits of PSG data only
   0233 F6 E0         [ 7]  548 	or #0x80|#0b01100000 ; set it to latch for channel 3
   0235 32r0Fr00      [13]  549 	ld (_PSGChan3LowTone),a ; save channel 3 tone LOW data (latched)
   0238 3Ar02r00      [13]  550 	ld a,(_PSGChannel3SFX) ; channel 3 free?
   023B B7            [ 4]  551 	or a
   023C 28 9C         [12]  552 	jr z,_send2PSG
   023E C3r56r01      [10]  553 	jp _intLoop
   0241                     554 	_a4:
   0241 78            [ 4]  555 	ld a,b ; PSG data in A
   0242 32r10r00      [13]  556 	ld (_PSGChan2HighTone),a ; save channel 2 tone HIGH data
   0245 3Ar01r00      [13]  557 	ld a,(_PSGChannel2SFX) ; channel 2 free?
   0248 B7            [ 4]  558 	or a
   0249 28 8F         [12]  559 	jr z,_send2PSG
   024B C3r56r01      [10]  560 	jp _intLoop
   024E C9            [10]  561 	ret
                            562 ;lib/PSGlib.c:368: void PSGSFXFrame (void) {
                            563 ;	---------------------------------
                            564 ; Function PSGSFXFrame
                            565 ; ---------------------------------
   024F                     566 _PSGSFXFrame::
                            567 ;lib/PSGlib.c:454: __endasm;
   024F 3Ar03r00      [13]  568 	ld a,(_PSGSFXStatus) ; check if we have got to play SFX
   0252 B7            [ 4]  569 	or a
   0253 C8            [11]  570 	ret z
   0254 3Ar17r00      [13]  571 	ld a,(_PSGSFXSkipFrames) ; check if we have got to skip frames
   0257 B7            [ 4]  572 	or a
   0258 C2r7Ar02      [10]  573 	jp nz,_skipFrame_SFX
   025B 2Ar13r00      [16]  574 	ld hl,(_PSGSFXPointer) ; read current SFX address
   025E                     575 	_intLoop_SFX:
   025E 46            [ 7]  576 	ld b,(hl) ; load a byte in B, temporary
   025F 23            [ 6]  577 	inc hl ; point to next byte
   0260 3Ar19r00      [13]  578 	ld a,(_PSGSFXSubstringLen) ; read substring len
   0263 B7            [ 4]  579 	or a ; check if it is 0 (we are not in a substring)
   0264 28 09         [12]  580 	jr z,_continue_SFX
   0266 3D            [ 4]  581 	dec a ; decrease len
   0267 32r19r00      [13]  582 	ld (_PSGSFXSubstringLen),a ; save len
   026A 20 03         [12]  583 	jr nz,_continue_SFX
   026C 2Ar1Ar00      [16]  584 	ld hl,(_PSGSFXSubstringRetAddr) ; substring over, retrieve return address
   026F                     585 	_continue_SFX:
   026F 78            [ 4]  586 	ld a,b ; restore byte
   0270 FE 40         [ 7]  587 	cp #0x40
   0272 DAr7Fr02      [10]  588 	jp c,_command_SFX ; if less than $40 then it is a command
   0275 D3 7F         [11]  589 	out (#0x7f),a ; output the byte
   0277 C3r5Er02      [10]  590 	jp _intLoop_SFX
   027A                     591 	_skipFrame_SFX:
   027A 3D            [ 4]  592 	dec a
   027B 32r17r00      [13]  593 	ld (_PSGSFXSkipFrames),a
   027E C9            [10]  594 	ret
   027F                     595 	_command_SFX:
   027F FE 38         [ 7]  596 	cp #0x38
   0281 28 07         [12]  597 	jr z,_done_SFX ; no additional frames
   0283 38 09         [12]  598 	jr c,_otherCommands_SFX ; other commands?
   0285 E6 07         [ 7]  599 	and #0x07 ; take only the last 3 bits for skip frames
   0287 32r17r00      [13]  600 	ld (_PSGSFXSkipFrames),a ; we got additional frames to skip
   028A                     601 	_done_SFX:
   028A 22r13r00      [16]  602 	ld (_PSGSFXPointer),hl ; save current address
   028D C9            [10]  603 	ret ; frame done
   028E                     604 	_otherCommands_SFX:
   028E FE 08         [ 7]  605 	cp #0x08
   0290 30 1F         [12]  606 	jr nc,_substring_SFX
   0292 FE 00         [ 7]  607 	cp #0x00
   0294 28 0B         [12]  608 	jr z,_sfxLoop_SFX
   0296 FE 01         [ 7]  609 	cp #0x01
   0298 28 01         [12]  610 	jr z,_setLoopPoint_SFX
                            611 ; ***************************************************************************
                            612 ; we should never get here!
                            613 ; if we do, it means the PSG SFX file is probably corrupted, so we just RET
                            614 ; ***************************************************************************
   029A C9            [10]  615 	ret
   029B                     616 	_setLoopPoint_SFX:
   029B 22r15r00      [16]  617 	ld (_PSGSFXLoopPoint),hl
   029E C3r5Er02      [10]  618 	jp _intLoop_SFX
   02A1                     619 	_sfxLoop_SFX:
   02A1 3Ar18r00      [13]  620 	ld a,(_PSGSFXLoopFlag) ; is it a looping SFX?
   02A4 B7            [ 4]  621 	or a
   02A5 CAr71r00      [10]  622 	jp z, _PSGSFXStop ; No:stop it!
   02A8 2Ar15r00      [16]  623 	ld hl,(_PSGSFXLoopPoint)
   02AB 22r13r00      [16]  624 	ld (_PSGSFXPointer),hl
   02AE C3r5Er02      [10]  625 	jp _intLoop_SFX
   02B1                     626 	_substring_SFX:
   02B1 D6 04         [ 7]  627 	sub #0x08 -4 ; len is value - $08 + 4
   02B3 32r19r00      [13]  628 	ld (_PSGSFXSubstringLen),a ; save len
   02B6 4E            [ 7]  629 	ld c,(hl) ; load substring address (offset)
   02B7 23            [ 6]  630 	inc hl
   02B8 46            [ 7]  631 	ld b,(hl)
   02B9 23            [ 6]  632 	inc hl
   02BA 22r1Ar00      [16]  633 	ld (_PSGSFXSubstringRetAddr),hl ; save return address
   02BD 2Ar11r00      [16]  634 	ld hl,(_PSGSFXStart)
   02C0 09            [11]  635 	add hl,bc ; make substring current
   02C1 C3r5Er02      [10]  636 	jp _intLoop_SFX
   02C4 C9            [10]  637 	ret
                            638 	.area _CODE
                            639 	.area _INITIALIZER
   0000                     640 __xinit__PSGMusicStatus:
   0000 00                  641 	.db #0x00	; 0
   0001                     642 __xinit__PSGChannel2SFX:
   0001 00                  643 	.db #0x00	; 0
   0002                     644 __xinit__PSGChannel3SFX:
   0002 00                  645 	.db #0x00	; 0
   0003                     646 __xinit__PSGSFXStatus:
   0003 00                  647 	.db #0x00	; 0
                            648 	.area _CABS (ABS)
