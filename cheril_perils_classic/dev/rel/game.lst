                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.2 #9293 (MINGW32)
                              4 ; This file was generated Sun Nov 04 13:34:49 2018
                              5 ;--------------------------------------------------------
                              6 	.module game
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _game_loop
                             14 	.globl _prepare_scr
                             15 	.globl _game_init
                             16 	.globl _flickscreen_do_vertical
                             17 	.globl _flickscreen_do_horizontal
                             18 	.globl _credits
                             19 	.globl _scr_level
                             20 	.globl _scr_the_end
                             21 	.globl _scr_game_over
                             22 	.globl _title
                             23 	.globl _pres
                             24 	.globl _bat_out
                             25 	.globl _bat_in
                             26 	.globl _hud_update
                             27 	.globl _draw_game_frame
                             28 	.globl _enems_move
                             29 	.globl _enems_load
                             30 	.globl _enems_persistent_deaths_load
                             31 	.globl _enems_persistent_update
                             32 	.globl _enems_persistent_load
                             33 	.globl _player_move
                             34 	.globl _player_kill
                             35 	.globl _player_to_pixels
                             36 	.globl _player_render
                             37 	.globl _player_init
                             38 	.globl _chac_chacs_do
                             39 	.globl _hotspots_create
                             40 	.globl _hotspots_paint
                             41 	.globl _hotspots_load
                             42 	.globl _update_cycle
                             43 	.globl _jump_start
                             44 	.globl _pad_read
                             45 	.globl _collide_in
                             46 	.globl _pr_str
                             47 	.globl _draw_scr
                             48 	.globl _p_t
                             49 	.globl _ul_putc
                             50 	.globl _cls
                             51 	.globl _clear_update_list
                             52 	.globl _unrle
                             53 	.globl _unpack_bg_patterns
                             54 	.globl _memfill
                             55 	.globl _delay
                             56 	.globl _aPLib_depack_VRAM
                             57 	.globl _PSGSFXStop
                             58 	.globl _PSGSFXPlay
                             59 	.globl _PSGStop
                             60 	.globl _PSGPlay
                             61 	.globl _SG_doUpdateList
                             62 	.globl _SG_setUpdateList
                             63 	.globl _SG_copySpritestoSAT
                             64 	.globl _SG_resetPauseRequest
                             65 	.globl _SG_queryPauseRequested
                             66 	.globl _SG_getKeysStatus
                             67 	.globl _SG_getStp
                             68 	.globl _SG_addMetaSprite1x1
                             69 	.globl _SG_initSprites
                             70 	.globl _SG_setTile
                             71 	.globl _SG_waitForVBlank
                             72 	.globl _SG_setSpriteMode
                             73 	.globl _SG_VDPturnOffFeature
                             74 	.globl _SG_VDPturnOnFeature
                             75 	.globl _game_mode
                             76 	.globl _mode_no_resonators
                             77 	.globl _shaker_ct
                             78 	.globl _springs_on
                             79 	.globl _cfx
                             80 	.globl _res_subct
                             81 	.globl _res_ct
                             82 	.globl _res_on
                             83 	.globl _res_disable
                             84 	.globl _chac_chacs_queue_write
                             85 	.globl _chac_chacs_queue_read
                             86 	.globl _chac_chacs_queue
                             87 	.globl _chac_chacs_ct
                             88 	.globl _chac_chacs_idlewait
                             89 	.globl _chac_chacs_state
                             90 	.globl _chac_chacs_yx
                             91 	.globl _max_chac_chacs
                             92 	.globl _ep_dead
                             93 	.globl _en_spr_id
                             94 	.globl _enf_vy
                             95 	.globl _enf_y
                             96 	.globl _enf_vx
                             97 	.globl _enf_x
                             98 	.globl _en_spr_x_mod
                             99 	.globl _en_ct
                            100 	.globl _en_status
                            101 	.globl _en_life
                            102 	.globl _en_cttouched
                            103 	.globl _en_flags
                            104 	.globl _en_state
                            105 	.globl _en_facing
                            106 	.globl _en_s
                            107 	.globl _en_my
                            108 	.globl _en_mx
                            109 	.globl _en_y2
                            110 	.globl _en_x2
                            111 	.globl _en_y1
                            112 	.globl _en_x1
                            113 	.globl _en_y
                            114 	.globl _en_x
                            115 	.globl _en_t
                            116 	.globl _flags
                            117 	.globl _lkact
                            118 	.globl _hact
                            119 	.globl _pctfr
                            120 	.globl _no_ct
                            121 	.globl _oam_index_player
                            122 	.globl _okilled
                            123 	.globl _oammo
                            124 	.globl _oobjs
                            125 	.globl _okeys
                            126 	.globl _olife
                            127 	.globl _flick_override
                            128 	.globl _level_reset
                            129 	.globl _warp_to_level
                            130 	.globl _game_over
                            131 	.globl _win_level
                            132 	.globl _paused
                            133 	.globl _frame_counter
                            134 	.globl _half_life
                            135 	.globl _on_pant
                            136 	.globl _n_pant
                            137 	.globl _c_max_enems
                            138 	.globl _level
                            139 	.globl _first_game
                            140 	.globl _map_buff
                            141 	.globl _fade_delay
                            142 	.globl _fader
                            143 	.globl _update_list
                            144 	.globl _update_index
                            145 	.globl _ntsc_frame
                            146 	.globl _ntsc
                            147 	.globl _c_max_bolts
                            148 	.globl _c_hotspots
                            149 	.globl _c_enems
                            150 	.globl _c_locks
                            151 	.globl _c_decos
                            152 	.globl _c_map
                            153 	.globl _spr_enems
                            154 	.globl _c_behs
                            155 	.globl _c_ts_tmaps
                            156 	.globl _c_map_size
                            157 	.globl _c_map_h
                            158 	.globl _c_map_w
                            159 	.globl _ft
                            160 	.globl _do_process_breakable
                            161 	.globl _hrt
                            162 	.globl _hry
                            163 	.globl _hrx
                            164 	.globl _py_safe
                            165 	.globl _px_safe
                            166 	.globl _n_pant_safe
                            167 	.globl _pfiring
                            168 	.globl _pkilled
                            169 	.globl _pammo
                            170 	.globl _pobjs
                            171 	.globl _pkeys
                            172 	.globl _plife
                            173 	.globl _pcontinues
                            174 	.globl _pnotsafe
                            175 	.globl _pice
                            176 	.globl _pkill
                            177 	.globl _pry_old
                            178 	.globl _prx_old
                            179 	.globl _hith
                            180 	.globl _hitv
                            181 	.globl _pgtmy
                            182 	.globl _pgtmx
                            183 	.globl _phit
                            184 	.globl _pbouncing
                            185 	.globl _pflickering
                            186 	.globl _oppossee
                            187 	.globl _ppossee
                            188 	.globl _pgotten
                            189 	.globl _pctj
                            190 	.globl _pj
                            191 	.globl _b_button
                            192 	.globl _a_button
                            193 	.globl _psprid
                            194 	.globl _pfr
                            195 	.globl _pfacing
                            196 	.globl _pcy
                            197 	.globl _pcx
                            198 	.globl _pry
                            199 	.globl _prx
                            200 	.globl _pvy
                            201 	.globl _pvx
                            202 	.globl _py
                            203 	.globl _px
                            204 	.globl _vertical_engine_type
                            205 	.globl _en_sg_2
                            206 	.globl _en_sg_1
                            207 	.globl __enf_vy
                            208 	.globl __enf_vx
                            209 	.globl __enf_y
                            210 	.globl __enf_x
                            211 	.globl __en_state
                            212 	.globl __en_facing
                            213 	.globl __en_ct
                            214 	.globl __en_my
                            215 	.globl __en_mx
                            216 	.globl __en_y2
                            217 	.globl __en_x2
                            218 	.globl __en_y1
                            219 	.globl __en_x1
                            220 	.globl __en_y
                            221 	.globl __en_x
                            222 	.globl __en_s
                            223 	.globl __en_t
                            224 	.globl _pregotten
                            225 	.globl _en_is_alive
                            226 	.globl _touched
                            227 	.globl _en_spr
                            228 	.globl _en_colly
                            229 	.globl _en_collx
                            230 	.globl _en_fr
                            231 	.globl _en_offs
                            232 	.globl _en_initial
                            233 	.globl _cur_stp
                            234 	.globl _caux
                            235 	.globl _cy2
                            236 	.globl _cy1
                            237 	.globl _cx2
                            238 	.globl _cx1
                            239 	.globl _at2
                            240 	.globl _at1
                            241 	.globl _ticker
                            242 	.globl _rdct
                            243 	.globl _rds
                            244 	.globl _rdm
                            245 	.globl _rdd
                            246 	.globl _rdc
                            247 	.globl _rdb
                            248 	.globl _rda
                            249 	.globl _rdit
                            250 	.globl _rdt
                            251 	.globl _rdy
                            252 	.globl _rdx
                            253 	.globl _gp_addr
                            254 	.globl _gp_ram
                            255 	.globl _gp_tmap
                            256 	.globl _gp_gen
                            257 	.globl _rds16
                            258 	.globl _gpjt
                            259 	.globl _gpit
                            260 	.globl _pad_this_frame
                            261 	.globl _pad0
                            262 	.globl __t
                            263 	.globl __n
                            264 	.globl __y
                            265 	.globl __x
                            266 	.globl _levelnames
                            267 	.globl _level2name
                            268 	.globl _level1name
                            269 	.globl _level0name
                            270 	.globl _l_music
                            271 	.globl _l_hotspots
                            272 	.globl _l_enems
                            273 	.globl _l_n_bolts
                            274 	.globl _l_locks
                            275 	.globl _l_decos
                            276 	.globl _l_map
                            277 	.globl _l_spr_enems
                            278 	.globl _l_spr_patterns
                            279 	.globl _l_behs
                            280 	.globl _l_ts_tmaps
                            281 	.globl _l_ts_colours
                            282 	.globl _l_ts_patterns
                            283 	.globl _l_player_max_enems
                            284 	.globl _l_player_max_objects
                            285 	.globl _l_map_h
                            286 	.globl _l_map_w
                            287 	.globl _l_ini_y
                            288 	.globl _l_ini_x
                            289 	.globl _l_scr_ini
                            290 	.globl _spr_hs
                            291 	.globl _spr_enems2
                            292 	.globl _spr_enems1
                            293 	.globl _spr_enems0
                            294 	.globl _spr_player
                            295 	.globl _behs2
                            296 	.globl _behs1
                            297 	.globl _behs0
                            298 	.globl _jitter
                            299 	.globl _bits
                            300 	.globl _chac_chacs_t3
                            301 	.globl _chac_chacs_t2
                            302 	.globl _chac_chacs_t1
                            303 	.globl _chac_chacs_times
                            304 ;--------------------------------------------------------
                            305 ; special function registers
                            306 ;--------------------------------------------------------
                     00BF   307 _VDPControlPort	=	0x00bf
                     00BF   308 _VDPStatusPort	=	0x00bf
                     00BE   309 _VDPDataPort	=	0x00be
                     007E   310 _VDPVCounterPort	=	0x007e
                     007F   311 _VDPHCounterPort	=	0x007f
                     00DC   312 _IOPortL	=	0x00dc
                     00DD   313 _IOPortH	=	0x00dd
                            314 ;--------------------------------------------------------
                            315 ; ram data
                            316 ;--------------------------------------------------------
                            317 	.area _DATA
   0000                     318 __x::
   0000                     319 	.ds 1
   0001                     320 __y::
   0001                     321 	.ds 1
   0002                     322 __n::
   0002                     323 	.ds 1
   0003                     324 __t::
   0003                     325 	.ds 1
   0004                     326 _pad0::
   0004                     327 	.ds 1
   0005                     328 _pad_this_frame::
   0005                     329 	.ds 1
   0006                     330 _gpit::
   0006                     331 	.ds 1
   0007                     332 _gpjt::
   0007                     333 	.ds 1
   0008                     334 _rds16::
   0008                     335 	.ds 2
   000A                     336 _gp_gen::
   000A                     337 	.ds 2
   000C                     338 _gp_tmap::
   000C                     339 	.ds 2
   000E                     340 _gp_ram::
   000E                     341 	.ds 2
   0010                     342 _gp_addr::
   0010                     343 	.ds 2
   0012                     344 _rdx::
   0012                     345 	.ds 1
   0013                     346 _rdy::
   0013                     347 	.ds 1
   0014                     348 _rdt::
   0014                     349 	.ds 1
   0015                     350 _rdit::
   0015                     351 	.ds 1
   0016                     352 _rda::
   0016                     353 	.ds 1
   0017                     354 _rdb::
   0017                     355 	.ds 1
   0018                     356 _rdc::
   0018                     357 	.ds 1
   0019                     358 _rdd::
   0019                     359 	.ds 1
   001A                     360 _rdm::
   001A                     361 	.ds 1
   001B                     362 _rds::
   001B                     363 	.ds 1
   001C                     364 _rdct::
   001C                     365 	.ds 1
   001D                     366 _ticker::
   001D                     367 	.ds 1
   001E                     368 _at1::
   001E                     369 	.ds 1
   001F                     370 _at2::
   001F                     371 	.ds 1
   0020                     372 _cx1::
   0020                     373 	.ds 1
   0021                     374 _cx2::
   0021                     375 	.ds 1
   0022                     376 _cy1::
   0022                     377 	.ds 1
   0023                     378 _cy2::
   0023                     379 	.ds 1
   0024                     380 _caux::
   0024                     381 	.ds 1
   0025                     382 _cur_stp::
   0025                     383 	.ds 2
   0027                     384 _en_initial::
   0027                     385 	.ds 1
   0028                     386 _en_offs::
   0028                     387 	.ds 1
   0029                     388 _en_fr::
   0029                     389 	.ds 1
   002A                     390 _en_collx::
   002A                     391 	.ds 1
   002B                     392 _en_colly::
   002B                     393 	.ds 1
   002C                     394 _en_spr::
   002C                     395 	.ds 1
   002D                     396 _touched::
   002D                     397 	.ds 1
   002E                     398 _en_is_alive::
   002E                     399 	.ds 1
   002F                     400 _pregotten::
   002F                     401 	.ds 1
   0030                     402 __en_t::
   0030                     403 	.ds 1
   0031                     404 __en_s::
   0031                     405 	.ds 1
   0032                     406 __en_x::
   0032                     407 	.ds 1
   0033                     408 __en_y::
   0033                     409 	.ds 1
   0034                     410 __en_x1::
   0034                     411 	.ds 1
   0035                     412 __en_y1::
   0035                     413 	.ds 1
   0036                     414 __en_x2::
   0036                     415 	.ds 1
   0037                     416 __en_y2::
   0037                     417 	.ds 1
   0038                     418 __en_mx::
   0038                     419 	.ds 1
   0039                     420 __en_my::
   0039                     421 	.ds 1
   003A                     422 __en_ct::
   003A                     423 	.ds 1
   003B                     424 __en_facing::
   003B                     425 	.ds 1
   003C                     426 __en_state::
   003C                     427 	.ds 1
   003D                     428 __enf_x::
   003D                     429 	.ds 2
   003F                     430 __enf_y::
   003F                     431 	.ds 2
   0041                     432 __enf_vx::
   0041                     433 	.ds 2
   0043                     434 __enf_vy::
   0043                     435 	.ds 2
   0045                     436 _en_sg_1::
   0045                     437 	.ds 1
   0046                     438 _en_sg_2::
   0046                     439 	.ds 1
   0047                     440 _vertical_engine_type::
   0047                     441 	.ds 1
   0048                     442 _px::
   0048                     443 	.ds 2
   004A                     444 _py::
   004A                     445 	.ds 2
   004C                     446 _pvx::
   004C                     447 	.ds 2
   004E                     448 _pvy::
   004E                     449 	.ds 2
   0050                     450 _prx::
   0050                     451 	.ds 1
   0051                     452 _pry::
   0051                     453 	.ds 1
   0052                     454 _pcx::
   0052                     455 	.ds 1
   0053                     456 _pcy::
   0053                     457 	.ds 1
   0054                     458 _pfacing::
   0054                     459 	.ds 1
   0055                     460 _pfr::
   0055                     461 	.ds 1
   0056                     462 _psprid::
   0056                     463 	.ds 1
   0057                     464 _a_button::
   0057                     465 	.ds 1
   0058                     466 _b_button::
   0058                     467 	.ds 1
   0059                     468 _pj::
   0059                     469 	.ds 1
   005A                     470 _pctj::
   005A                     471 	.ds 1
   005B                     472 _pgotten::
   005B                     473 	.ds 1
   005C                     474 _ppossee::
   005C                     475 	.ds 1
   005D                     476 _oppossee::
   005D                     477 	.ds 1
   005E                     478 _pflickering::
   005E                     479 	.ds 1
   005F                     480 _pbouncing::
   005F                     481 	.ds 1
   0060                     482 _phit::
   0060                     483 	.ds 1
   0061                     484 _pgtmx::
   0061                     485 	.ds 2
   0063                     486 _pgtmy::
   0063                     487 	.ds 2
   0065                     488 _hitv::
   0065                     489 	.ds 1
   0066                     490 _hith::
   0066                     491 	.ds 1
   0067                     492 _prx_old::
   0067                     493 	.ds 1
   0068                     494 _pry_old::
   0068                     495 	.ds 1
   0069                     496 _pkill::
   0069                     497 	.ds 1
   006A                     498 _pice::
   006A                     499 	.ds 1
   006B                     500 _pnotsafe::
   006B                     501 	.ds 1
   006C                     502 _pcontinues::
   006C                     503 	.ds 1
   006D                     504 _plife::
   006D                     505 	.ds 1
   006E                     506 _pkeys::
   006E                     507 	.ds 1
   006F                     508 _pobjs::
   006F                     509 	.ds 1
   0070                     510 _pammo::
   0070                     511 	.ds 1
   0071                     512 _pkilled::
   0071                     513 	.ds 1
   0072                     514 _pfiring::
   0072                     515 	.ds 1
   0073                     516 _n_pant_safe::
   0073                     517 	.ds 1
   0074                     518 _px_safe::
   0074                     519 	.ds 2
   0076                     520 _py_safe::
   0076                     521 	.ds 2
   0078                     522 _hrx::
   0078                     523 	.ds 1
   0079                     524 _hry::
   0079                     525 	.ds 1
   007A                     526 _hrt::
   007A                     527 	.ds 1
   007B                     528 _do_process_breakable::
   007B                     529 	.ds 1
   007C                     530 _ft::
   007C                     531 	.ds 1
   007D                     532 _c_map_w::
   007D                     533 	.ds 1
   007E                     534 _c_map_h::
   007E                     535 	.ds 1
   007F                     536 _c_map_size::
   007F                     537 	.ds 1
   0080                     538 _c_ts_tmaps::
   0080                     539 	.ds 2
   0082                     540 _c_behs::
   0082                     541 	.ds 2
   0084                     542 _spr_enems::
   0084                     543 	.ds 2
   0086                     544 _c_map::
   0086                     545 	.ds 2
   0088                     546 _c_decos::
   0088                     547 	.ds 1
   0089                     548 _c_locks::
   0089                     549 	.ds 2
   008B                     550 _c_enems::
   008B                     551 	.ds 2
   008D                     552 _c_hotspots::
   008D                     553 	.ds 2
   008F                     554 _c_max_bolts::
   008F                     555 	.ds 1
   0090                     556 _ntsc::
   0090                     557 	.ds 1
   0091                     558 _ntsc_frame::
   0091                     559 	.ds 1
   0092                     560 _update_index::
   0092                     561 	.ds 1
   0093                     562 _update_list::
   0093                     563 	.ds 96
   00F3                     564 _fader::
   00F3                     565 	.ds 1
   00F4                     566 _fade_delay::
   00F4                     567 	.ds 1
   00F5                     568 _map_buff::
   00F5                     569 	.ds 192
   01B5                     570 _first_game::
   01B5                     571 	.ds 1
   01B6                     572 _level::
   01B6                     573 	.ds 1
   01B7                     574 _c_max_enems::
   01B7                     575 	.ds 1
   01B8                     576 _n_pant::
   01B8                     577 	.ds 1
   01B9                     578 _on_pant::
   01B9                     579 	.ds 1
   01BA                     580 _half_life::
   01BA                     581 	.ds 1
   01BB                     582 _frame_counter::
   01BB                     583 	.ds 1
   01BC                     584 _paused::
   01BC                     585 	.ds 1
   01BD                     586 _win_level::
   01BD                     587 	.ds 1
   01BE                     588 _game_over::
   01BE                     589 	.ds 1
   01BF                     590 _warp_to_level::
   01BF                     591 	.ds 1
   01C0                     592 _level_reset::
   01C0                     593 	.ds 1
   01C1                     594 _flick_override::
   01C1                     595 	.ds 1
   01C2                     596 _olife::
   01C2                     597 	.ds 1
   01C3                     598 _okeys::
   01C3                     599 	.ds 1
   01C4                     600 _oobjs::
   01C4                     601 	.ds 1
   01C5                     602 _oammo::
   01C5                     603 	.ds 1
   01C6                     604 _okilled::
   01C6                     605 	.ds 1
   01C7                     606 _oam_index_player::
   01C7                     607 	.ds 1
   01C8                     608 _no_ct::
   01C8                     609 	.ds 1
   01C9                     610 _pctfr::
   01C9                     611 	.ds 1
   01CA                     612 _hact::
   01CA                     613 	.ds 24
   01E2                     614 _lkact::
   01E2                     615 	.ds 16
   01F2                     616 _flags::
   01F2                     617 	.ds 2
   01F4                     618 _en_t::
   01F4                     619 	.ds 3
   01F7                     620 _en_x::
   01F7                     621 	.ds 3
   01FA                     622 _en_y::
   01FA                     623 	.ds 3
   01FD                     624 _en_x1::
   01FD                     625 	.ds 3
   0200                     626 _en_y1::
   0200                     627 	.ds 3
   0203                     628 _en_x2::
   0203                     629 	.ds 3
   0206                     630 _en_y2::
   0206                     631 	.ds 3
   0209                     632 _en_mx::
   0209                     633 	.ds 3
   020C                     634 _en_my::
   020C                     635 	.ds 3
   020F                     636 _en_s::
   020F                     637 	.ds 3
   0212                     638 _en_facing::
   0212                     639 	.ds 3
   0215                     640 _en_state::
   0215                     641 	.ds 3
   0218                     642 _en_flags::
   0218                     643 	.ds 3
   021B                     644 _en_cttouched::
   021B                     645 	.ds 3
   021E                     646 _en_life::
   021E                     647 	.ds 3
   0221                     648 _en_status::
   0221                     649 	.ds 3
   0224                     650 _en_ct::
   0224                     651 	.ds 3
   0227                     652 _en_spr_x_mod::
   0227                     653 	.ds 1
   0228                     654 _enf_x::
   0228                     655 	.ds 6
   022E                     656 _enf_vx::
   022E                     657 	.ds 6
   0234                     658 _enf_y::
   0234                     659 	.ds 6
   023A                     660 _enf_vy::
   023A                     661 	.ds 6
   0240                     662 _en_spr_id::
   0240                     663 	.ds 3
   0243                     664 _ep_dead::
   0243                     665 	.ds 72
   028B                     666 _max_chac_chacs::
   028B                     667 	.ds 1
   028C                     668 _chac_chacs_yx::
   028C                     669 	.ds 4
   0290                     670 _chac_chacs_state::
   0290                     671 	.ds 4
   0294                     672 _chac_chacs_idlewait::
   0294                     673 	.ds 4
   0298                     674 _chac_chacs_ct::
   0298                     675 	.ds 4
   029C                     676 _chac_chacs_queue::
   029C                     677 	.ds 16
   02AC                     678 _chac_chacs_queue_read::
   02AC                     679 	.ds 1
   02AD                     680 _chac_chacs_queue_write::
   02AD                     681 	.ds 1
   02AE                     682 _res_disable::
   02AE                     683 	.ds 1
   02AF                     684 _res_on::
   02AF                     685 	.ds 1
   02B0                     686 _res_ct::
   02B0                     687 	.ds 1
   02B1                     688 _res_subct::
   02B1                     689 	.ds 1
   02B2                     690 _cfx::
   02B2                     691 	.ds 1
   02B3                     692 _springs_on::
   02B3                     693 	.ds 1
   02B4                     694 _shaker_ct::
   02B4                     695 	.ds 1
   02B5                     696 _mode_no_resonators::
   02B5                     697 	.ds 1
   02B6                     698 _game_mode::
   02B6                     699 	.ds 1
                            700 ;--------------------------------------------------------
                            701 ; ram data
                            702 ;--------------------------------------------------------
                            703 	.area _INITIALIZED
                            704 ;--------------------------------------------------------
                            705 ; absolute external ram data
                            706 ;--------------------------------------------------------
                            707 	.area _DABS (ABS)
                            708 ;--------------------------------------------------------
                            709 ; global & static initialisations
                            710 ;--------------------------------------------------------
                            711 	.area _HOME
                            712 	.area _GSINIT
                            713 	.area _GSFINAL
                            714 	.area _GSINIT
                            715 ;--------------------------------------------------------
                            716 ; Home
                            717 ;--------------------------------------------------------
                            718 	.area _HOME
                            719 	.area _HOME
                            720 ;--------------------------------------------------------
                            721 ; code
                            722 ;--------------------------------------------------------
                            723 	.area _CODE
                            724 ;engine/hotspots.h:7: void hotspots_load (void) {
                            725 ;	---------------------------------
                            726 ; Function hotspots_load
                            727 ; ---------------------------------
   0000                     728 _hotspots_load::
                            729 ;engine/hotspots.h:9: gp_gen = (unsigned char *) c_hotspots;
   0000 2Ar8Dr00      [16]  730 	ld	hl,(_c_hotspots)
   0003 22r0Ar00      [16]  731 	ld	(_gp_gen),hl
                            732 ;engine/hotspots.h:11: for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
   0006 21r06r00      [10]  733 	ld	hl,#_gpit + 0
   0009 36 00         [10]  734 	ld	(hl), #0x00
   000B 11rCAr01      [10]  735 	ld	de,#_hact+0
   000E                     736 00102$:
                            737 ;engine/hotspots.h:16: hact [gpit] = 1;
   000E 2Ar06r00      [16]  738 	ld	hl,(_gpit)
   0011 26 00         [ 7]  739 	ld	h,#0x00
   0013 19            [11]  740 	add	hl,de
   0014 36 01         [10]  741 	ld	(hl),#0x01
                            742 ;engine/hotspots.h:11: for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
   0016 21r06r00      [10]  743 	ld	hl, #_gpit+0
   0019 34            [11]  744 	inc	(hl)
   001A 3Ar06r00      [13]  745 	ld	a,(#_gpit + 0)
   001D D6 18         [ 7]  746 	sub	a, #0x18
   001F 38 ED         [12]  747 	jr	C,00102$
   0021 C9            [10]  748 	ret
   0022                     749 _chac_chacs_times:
   0022 00                  750 	.db #0x00	; 0
   0023 10                  751 	.db #0x10	; 16
   0024 01                  752 	.db #0x01	; 1
   0025 32                  753 	.db #0x32	; 50	'2'
   0026 01                  754 	.db #0x01	; 1
   0027 01                  755 	.db #0x01	; 1
   0028                     756 _chac_chacs_t1:
   0028 26                  757 	.db #0x26	; 38
   0029 20                  758 	.db #0x20	; 32
   002A 22                  759 	.db #0x22	; 34
   002B 25                  760 	.db #0x25	; 37
   002C 22                  761 	.db #0x22	; 34
   002D 20                  762 	.db #0x20	; 32
   002E                     763 _chac_chacs_t2:
   002E 26                  764 	.db #0x26	; 38
   002F 26                  765 	.db #0x26	; 38
   0030 26                  766 	.db #0x26	; 38
   0031 24                  767 	.db #0x24	; 36
   0032 26                  768 	.db #0x26	; 38
   0033 26                  769 	.db #0x26	; 38
   0034                     770 _chac_chacs_t3:
   0034 26                  771 	.db #0x26	; 38
   0035 21                  772 	.db #0x21	; 33
   0036 23                  773 	.db #0x23	; 35
   0037 25                  774 	.db #0x25	; 37
   0038 23                  775 	.db #0x23	; 35
   0039 21                  776 	.db #0x21	; 33
   003A                     777 _bits:
   003A 01                  778 	.db #0x01	; 1
   003B 02                  779 	.db #0x02	; 2
   003C 04                  780 	.db #0x04	; 4
   003D 08                  781 	.db #0x08	; 8
   003E 10                  782 	.db #0x10	; 16
   003F 20                  783 	.db #0x20	; 32
   0040 40                  784 	.db #0x40	; 64
   0041 80                  785 	.db #0x80	; 128
   0042                     786 _jitter:
   0042 00                  787 	.db #0x00	; 0
   0043 01                  788 	.db #0x01	; 1
   0044 01                  789 	.db #0x01	; 1
   0045 00                  790 	.db #0x00	; 0
   0046 00                  791 	.db #0x00	; 0
   0047 01                  792 	.db #0x01	; 1
   0048 00                  793 	.db #0x00	; 0
   0049 01                  794 	.db #0x01	; 1
   004A 01                  795 	.db #0x01	; 1
   004B 00                  796 	.db #0x00	; 0
   004C 00                  797 	.db #0x00	; 0
   004D 00                  798 	.db #0x00	; 0
   004E 01                  799 	.db #0x01	; 1
   004F 00                  800 	.db #0x00	; 0
   0050 01                  801 	.db #0x01	; 1
   0051 01                  802 	.db #0x01	; 1
   0052                     803 _behs0:
   0052 00                  804 	.db #0x00	; 0
   0053 00                  805 	.db #0x00	; 0
   0054 00                  806 	.db #0x00	; 0
   0055 00                  807 	.db #0x00	; 0
   0056 08                  808 	.db #0x08	; 8
   0057 08                  809 	.db #0x08	; 8
   0058 08                  810 	.db #0x08	; 8
   0059 08                  811 	.db #0x08	; 8
   005A 00                  812 	.db #0x00	; 0
   005B 08                  813 	.db #0x08	; 8
   005C 00                  814 	.db #0x00	; 0
   005D 00                  815 	.db #0x00	; 0
   005E 01                  816 	.db #0x01	; 1
   005F 08                  817 	.db #0x08	; 8
   0060 04                  818 	.db #0x04	; 4
   0061 0A                  819 	.db #0x0A	; 10
   0062 00                  820 	.db #0x00	; 0
   0063 00                  821 	.db #0x00	; 0
   0064 00                  822 	.db #0x00	; 0
   0065 00                  823 	.db #0x00	; 0
   0066 08                  824 	.db #0x08	; 8
   0067 08                  825 	.db #0x08	; 8
   0068 08                  826 	.db #0x08	; 8
   0069 08                  827 	.db #0x08	; 8
   006A 00                  828 	.db #0x00	; 0
   006B 08                  829 	.db #0x08	; 8
   006C 00                  830 	.db #0x00	; 0
   006D 00                  831 	.db #0x00	; 0
   006E 01                  832 	.db #0x01	; 1
   006F 08                  833 	.db #0x08	; 8
   0070 04                  834 	.db #0x04	; 4
   0071 0A                  835 	.db #0x0A	; 10
   0072                     836 _behs1:
   0072 00                  837 	.db #0x00	; 0
   0073 00                  838 	.db #0x00	; 0
   0074 00                  839 	.db #0x00	; 0
   0075 00                  840 	.db #0x00	; 0
   0076 08                  841 	.db #0x08	; 8
   0077 04                  842 	.db #0x04	; 4
   0078 08                  843 	.db #0x08	; 8
   0079 04                  844 	.db #0x04	; 4
   007A 28                  845 	.db #0x28	; 40
   007B 29                  846 	.db #0x29	; 41
   007C 01                  847 	.db #0x01	; 1
   007D 01                  848 	.db #0x01	; 1
   007E 01                  849 	.db #0x01	; 1
   007F 08                  850 	.db #0x08	; 8
   0080 08                  851 	.db #0x08	; 8
   0081 0A                  852 	.db #0x0A	; 10
   0082 00                  853 	.db #0x00	; 0
   0083 00                  854 	.db #0x00	; 0
   0084 00                  855 	.db #0x00	; 0
   0085 00                  856 	.db #0x00	; 0
   0086 08                  857 	.db #0x08	; 8
   0087 04                  858 	.db #0x04	; 4
   0088 08                  859 	.db #0x08	; 8
   0089 04                  860 	.db #0x04	; 4
   008A 28                  861 	.db #0x28	; 40
   008B 29                  862 	.db #0x29	; 41
   008C 01                  863 	.db #0x01	; 1
   008D 01                  864 	.db #0x01	; 1
   008E 01                  865 	.db #0x01	; 1
   008F 08                  866 	.db #0x08	; 8
   0090 08                  867 	.db #0x08	; 8
   0091 08                  868 	.db #0x08	; 8
   0092                     869 _behs2:
   0092 00                  870 	.db #0x00	; 0
   0093 08                  871 	.db #0x08	; 8
   0094 00                  872 	.db #0x00	; 0
   0095 00                  873 	.db #0x00	; 0
   0096 08                  874 	.db #0x08	; 8
   0097 08                  875 	.db #0x08	; 8
   0098 08                  876 	.db #0x08	; 8
   0099 08                  877 	.db #0x08	; 8
   009A 00                  878 	.db #0x00	; 0
   009B 08                  879 	.db #0x08	; 8
   009C 04                  880 	.db #0x04	; 4
   009D 08                  881 	.db #0x08	; 8
   009E 01                  882 	.db #0x01	; 1
   009F 01                  883 	.db #0x01	; 1
   00A0 08                  884 	.db #0x08	; 8
   00A1 0A                  885 	.db #0x0A	; 10
   00A2 00                  886 	.db #0x00	; 0
   00A3 08                  887 	.db #0x08	; 8
   00A4 00                  888 	.db #0x00	; 0
   00A5 00                  889 	.db #0x00	; 0
   00A6 08                  890 	.db #0x08	; 8
   00A7 08                  891 	.db #0x08	; 8
   00A8 08                  892 	.db #0x08	; 8
   00A9 08                  893 	.db #0x08	; 8
   00AA 00                  894 	.db #0x00	; 0
   00AB 08                  895 	.db #0x08	; 8
   00AC 04                  896 	.db #0x04	; 4
   00AD 08                  897 	.db #0x08	; 8
   00AE 01                  898 	.db #0x01	; 1
   00AF 01                  899 	.db #0x01	; 1
   00B0 08                  900 	.db #0x08	; 8
   00B1 0A                  901 	.db #0x0A	; 10
   00B2 00                  902 	.db #0x00	; 0
   00B3 00                  903 	.db #0x00	; 0
   00B4 01                  904 	.db #0x01	; 1
   00B5 01                  905 	.db #0x01	; 1
   00B6 01                  906 	.db #0x01	; 1
   00B7 01                  907 	.db #0x01	; 1
   00B8 00                  908 	.db #0x00	; 0
   00B9                     909 _spr_player:
   00B9r00r00               910 	.dw _ss_pl_00
   00BBr00r00               911 	.dw _ss_pl_00
   00BDr00r00               912 	.dw _ss_pl_01
   00BFr00r00               913 	.dw _ss_pl_00
   00C1r00r00               914 	.dw _ss_pl_02
   00C3r00r00               915 	.dw _ss_pl_03
   00C5 00 00               916 	.dw #0x0000
   00C7 00 00               917 	.dw #0x0000
   00C9r00r00               918 	.dw _ss_pl_04
   00CBr00r00               919 	.dw _ss_pl_04
   00CDr00r00               920 	.dw _ss_pl_06
   00CFr00r00               921 	.dw _ss_pl_04
   00D1r00r00               922 	.dw _ss_pl_05
   00D3r00r00               923 	.dw _ss_pl_07
   00D5 00 00               924 	.dw #0x0000
   00D7 00 00               925 	.dw #0x0000
   00D9                     926 _spr_enems0:
   00D9r00r00               927 	.dw _ss_en_0_00
   00DBr00r00               928 	.dw _ss_en_0_01
   00DD 00 00               929 	.dw #0x0000
   00DF 00 00               930 	.dw #0x0000
   00E1r00r00               931 	.dw _ss_en_0_02
   00E3r00r00               932 	.dw _ss_en_0_03
   00E5 00 00               933 	.dw #0x0000
   00E7 00 00               934 	.dw #0x0000
   00E9r00r00               935 	.dw _ss_en_0_04
   00EBr00r00               936 	.dw _ss_en_0_05
   00ED 00 00               937 	.dw #0x0000
   00EF 00 00               938 	.dw #0x0000
   00F1r00r00               939 	.dw _ss_en_0_06
   00F3r00r00               940 	.dw _ss_en_0_07
   00F5 00 00               941 	.dw #0x0000
   00F7 00 00               942 	.dw #0x0000
   00F9r00r00               943 	.dw _ss_en_0_08
   00FBr00r00               944 	.dw _ss_en_0_09
   00FD 00 00               945 	.dw #0x0000
   00FF 00 00               946 	.dw #0x0000
   0101r00r00               947 	.dw _ss_en_0_0a
   0103r00r00               948 	.dw _ss_en_0_0b
   0105 00 00               949 	.dw #0x0000
   0107 00 00               950 	.dw #0x0000
   0109r00r00               951 	.dw _ss_plat_00
   010Br00r00               952 	.dw _ss_plat_01
   010D 00 00               953 	.dw #0x0000
   010F 00 00               954 	.dw #0x0000
   0111r00r00               955 	.dw _ss_plat_00
   0113r00r00               956 	.dw _ss_plat_01
   0115 00 00               957 	.dw #0x0000
   0117 00 00               958 	.dw #0x0000
   0119r00r00               959 	.dw _ss_fanty_00
   011Br00r00               960 	.dw _ss_fanty_01
   011D 00 00               961 	.dw #0x0000
   011F 00 00               962 	.dw #0x0000
   0121r00r00               963 	.dw _ss_fanty_02
   0123r00r00               964 	.dw _ss_fanty_03
   0125 00 00               965 	.dw #0x0000
   0127 00 00               966 	.dw #0x0000
   0129r00r00               967 	.dw _ss_it_04
   012B                     968 _spr_enems1:
   012Br00r00               969 	.dw _ss_en_1_00
   012Dr00r00               970 	.dw _ss_en_1_01
   012F 00 00               971 	.dw #0x0000
   0131 00 00               972 	.dw #0x0000
   0133r00r00               973 	.dw _ss_en_1_02
   0135r00r00               974 	.dw _ss_en_1_03
   0137 00 00               975 	.dw #0x0000
   0139 00 00               976 	.dw #0x0000
   013Br00r00               977 	.dw _ss_en_1_04
   013Dr00r00               978 	.dw _ss_en_1_05
   013F 00 00               979 	.dw #0x0000
   0141 00 00               980 	.dw #0x0000
   0143r00r00               981 	.dw _ss_en_1_06
   0145r00r00               982 	.dw _ss_en_1_07
   0147 00 00               983 	.dw #0x0000
   0149 00 00               984 	.dw #0x0000
   014Br00r00               985 	.dw _ss_en_1_08
   014Dr00r00               986 	.dw _ss_en_1_09
   014F 00 00               987 	.dw #0x0000
   0151 00 00               988 	.dw #0x0000
   0153r00r00               989 	.dw _ss_en_1_0a
   0155r00r00               990 	.dw _ss_en_1_0b
   0157 00 00               991 	.dw #0x0000
   0159 00 00               992 	.dw #0x0000
   015Br00r00               993 	.dw _ss_plat_00
   015Dr00r00               994 	.dw _ss_plat_01
   015F 00 00               995 	.dw #0x0000
   0161 00 00               996 	.dw #0x0000
   0163r00r00               997 	.dw _ss_plat_00
   0165r00r00               998 	.dw _ss_plat_01
   0167 00 00               999 	.dw #0x0000
   0169 00 00              1000 	.dw #0x0000
   016Br00r00              1001 	.dw _ss_fanty_00
   016Dr00r00              1002 	.dw _ss_fanty_01
   016F 00 00              1003 	.dw #0x0000
   0171 00 00              1004 	.dw #0x0000
   0173r00r00              1005 	.dw _ss_fanty_02
   0175r00r00              1006 	.dw _ss_fanty_03
   0177 00 00              1007 	.dw #0x0000
   0179 00 00              1008 	.dw #0x0000
   017Br00r00              1009 	.dw _ss_it_04
   017D                    1010 _spr_enems2:
   017Dr00r00              1011 	.dw _ss_en_2_00
   017Fr00r00              1012 	.dw _ss_en_2_01
   0181 00 00              1013 	.dw #0x0000
   0183 00 00              1014 	.dw #0x0000
   0185r00r00              1015 	.dw _ss_en_2_02
   0187r00r00              1016 	.dw _ss_en_2_03
   0189 00 00              1017 	.dw #0x0000
   018B 00 00              1018 	.dw #0x0000
   018Dr00r00              1019 	.dw _ss_en_2_04
   018Fr00r00              1020 	.dw _ss_en_2_05
   0191 00 00              1021 	.dw #0x0000
   0193 00 00              1022 	.dw #0x0000
   0195r00r00              1023 	.dw _ss_en_2_06
   0197r00r00              1024 	.dw _ss_en_2_07
   0199 00 00              1025 	.dw #0x0000
   019B 00 00              1026 	.dw #0x0000
   019Dr00r00              1027 	.dw _ss_en_2_08
   019Fr00r00              1028 	.dw _ss_en_2_09
   01A1 00 00              1029 	.dw #0x0000
   01A3 00 00              1030 	.dw #0x0000
   01A5r00r00              1031 	.dw _ss_en_2_08
   01A7r00r00              1032 	.dw _ss_en_2_09
   01A9 00 00              1033 	.dw #0x0000
   01AB 00 00              1034 	.dw #0x0000
   01ADr00r00              1035 	.dw _ss_plat_00
   01AFr00r00              1036 	.dw _ss_plat_01
   01B1 00 00              1037 	.dw #0x0000
   01B3 00 00              1038 	.dw #0x0000
   01B5r00r00              1039 	.dw _ss_plat_00
   01B7r00r00              1040 	.dw _ss_plat_01
   01B9 00 00              1041 	.dw #0x0000
   01BB 00 00              1042 	.dw #0x0000
   01BDr00r00              1043 	.dw _ss_fanty_00
   01BFr00r00              1044 	.dw _ss_fanty_01
   01C1 00 00              1045 	.dw #0x0000
   01C3 00 00              1046 	.dw #0x0000
   01C5r00r00              1047 	.dw _ss_fanty_02
   01C7r00r00              1048 	.dw _ss_fanty_03
   01C9 00 00              1049 	.dw #0x0000
   01CB 00 00              1050 	.dw #0x0000
   01CDr00r00              1051 	.dw _ss_it_04
   01CF                    1052 _spr_hs:
   01CF 00 00              1053 	.dw #0x0000
   01D1 00 00              1054 	.dw #0x0000
   01D3r00r00              1055 	.dw _ss_it_01
   01D5r00r00              1056 	.dw _ss_it_00
   01D7r00r00              1057 	.dw _ss_it_02
   01D9r00r00              1058 	.dw _ss_it_03
   01DB                    1059 _l_scr_ini:
   01DB 14                 1060 	.db #0x14	; 20
   01DC 14                 1061 	.db #0x14	; 20
   01DD 08                 1062 	.db #0x08	; 8
   01DE                    1063 _l_ini_x:
   01DE 02                 1064 	.db #0x02	; 2
   01DF 02                 1065 	.db #0x02	; 2
   01E0 02                 1066 	.db #0x02	; 2
   01E1                    1067 _l_ini_y:
   01E1 07                 1068 	.db #0x07	; 7
   01E2 0A                 1069 	.db #0x0A	; 10
   01E3 03                 1070 	.db #0x03	; 3
   01E4                    1071 _l_map_w:
   01E4 04                 1072 	.db #0x04	; 4
   01E5 04                 1073 	.db #0x04	; 4
   01E6 08                 1074 	.db #0x08	; 8
   01E7                    1075 _l_map_h:
   01E7 06                 1076 	.db #0x06	; 6
   01E8 06                 1077 	.db #0x06	; 6
   01E9 03                 1078 	.db #0x03	; 3
   01EA                    1079 _l_player_max_objects:
   01EA 00                 1080 	.db #0x00	; 0
   01EB 00                 1081 	.db #0x00	; 0
   01EC 00                 1082 	.db #0x00	; 0
   01ED                    1083 _l_player_max_enems:
   01ED 36                 1084 	.db #0x36	; 54	'6'
   01EE 31                 1085 	.db #0x31	; 49	'1'
   01EF 2E                 1086 	.db #0x2E	; 46
   01F0                    1087 _l_ts_patterns:
   01F0r00r00              1088 	.dw _ts0_patterns_c
   01F2r00r00              1089 	.dw _ts1_patterns_c
   01F4r00r00              1090 	.dw _ts2_patterns_c
   01F6                    1091 _l_ts_colours:
   01F6r00r00              1092 	.dw _ts0_colours_c
   01F8r00r00              1093 	.dw _ts1_colours_c
   01FAr00r00              1094 	.dw _ts2_colours_c
   01FC                    1095 _l_ts_tmaps:
   01FCr00r00              1096 	.dw _ts0_tmaps
   01FEr00r00              1097 	.dw _ts1_tmaps
   0200r00r00              1098 	.dw _ts2_tmaps
   0202                    1099 _l_behs:
   0202r52r00              1100 	.dw _behs0
   0204r72r00              1101 	.dw _behs1
   0206r92r00              1102 	.dw _behs2
   0208                    1103 _l_spr_patterns:
   0208r00r00              1104 	.dw _ss_en_0_patterns_c
   020Ar00r00              1105 	.dw _ss_en_1_patterns_c
   020Cr00r00              1106 	.dw _ss_en_2_patterns_c
   020E                    1107 _l_spr_enems:
   020ErD9r00              1108 	.dw _spr_enems0
   0210r2Br01              1109 	.dw _spr_enems1
   0212r7Dr01              1110 	.dw _spr_enems2
   0214                    1111 _l_map:
   0214r00r00              1112 	.dw _map_0
   0216r00r00              1113 	.dw _map_1
   0218r00r00              1114 	.dw _map_2
   021A                    1115 _l_decos:
   021A 00                 1116 	.db #0x00	; 0
   021B 01                 1117 	.db #0x01	; 1
   021C 01                 1118 	.db #0x01	; 1
   021D                    1119 _l_locks:
   021Dr00r00              1120 	.dw _map_0_locks
   021Fr00r00              1121 	.dw _map_1_locks
   0221r00r00              1122 	.dw _map_2_locks
   0223                    1123 _l_n_bolts:
   0223 02                 1124 	.db #0x02	; 2
   0224 01                 1125 	.db #0x01	; 1
   0225 02                 1126 	.db #0x02	; 2
   0226                    1127 _l_enems:
   0226r00r00              1128 	.dw _enems_0
   0228r00r00              1129 	.dw _enems_1
   022Ar00r00              1130 	.dw _enems_2
   022C                    1131 _l_hotspots:
   022Cr00r00              1132 	.dw _hotspots_0
   022Er00r00              1133 	.dw _hotspots_1
   0230r00r00              1134 	.dw _hotspots_2
   0232                    1135 _l_music:
   0232r00r00              1136 	.dw _m_yun_psg
   0234r00r00              1137 	.dw _m_yun_psg
   0236r00r00              1138 	.dw _m_yun_psg
                           1139 ;engine/hotspots.h:20: void hotspots_paint (void) {
                           1140 ;	---------------------------------
                           1141 ; Function hotspots_paint
                           1142 ; ---------------------------------
   0238                    1143 _hotspots_paint::
                           1144 ;engine/hotspots.h:30: rda = hrt;
   0238 3Ar7Ar00      [13] 1145 	ld	a,(#_hrt + 0)
   023B 32r16r00      [13] 1146 	ld	(#_rda + 0),a
                           1147 ;engine/hotspots.h:33: if (hrt == HOTSPOT_TYPE_RESONATOR && res_on) rda = HOTSPOT_TYPE_RESONATOR_ON;
   023E 3Ar7Ar00      [13] 1148 	ld	a,(#_hrt + 0)
   0241 D6 04         [ 7] 1149 	sub	a, #0x04
   0243 20 0B         [12] 1150 	jr	NZ,00102$
   0245 3ArAFr02      [13] 1151 	ld	a,(#_res_on + 0)
   0248 B7            [ 4] 1152 	or	a, a
   0249 28 05         [12] 1153 	jr	Z,00102$
   024B 21r16r00      [10] 1154 	ld	hl,#_rda + 0
   024E 36 05         [10] 1155 	ld	(hl), #0x05
   0250                    1156 00102$:
                           1157 ;engine/hotspots.h:38: spr_hs [rda]
   0250 11rCFr01      [10] 1158 	ld	de,#_spr_hs+0
   0253 FD 21r16r00   [14] 1159 	ld	iy,#_rda
   0257 FD 6E 00      [19] 1160 	ld	l,0 (iy)
   025A 26 00         [ 7] 1161 	ld	h,#0x00
   025C 29            [11] 1162 	add	hl, hl
   025D 19            [11] 1163 	add	hl,de
   025E 5E            [ 7] 1164 	ld	e,(hl)
   025F 23            [ 6] 1165 	inc	hl
   0260 56            [ 7] 1166 	ld	d,(hl)
                           1167 ;engine/hotspots.h:37: hrx, hry + SPRITE_ADJUST, 
   0261 3Ar79r00      [13] 1168 	ld	a,(#_hry + 0)
   0264 C6 F7         [ 7] 1169 	add	a, #0xF7
   0266 67            [ 4] 1170 	ld	h,a
   0267 D5            [11] 1171 	push	de
   0268 E5            [11] 1172 	push	hl
   0269 33            [ 6] 1173 	inc	sp
   026A 3Ar78r00      [13] 1174 	ld	a,(_hrx)
   026D F5            [11] 1175 	push	af
   026E 33            [ 6] 1176 	inc	sp
   026F CDr00r00      [17] 1177 	call	_SG_addMetaSprite1x1
   0272 F1            [10] 1178 	pop	af
   0273 F1            [10] 1179 	pop	af
   0274 C9            [10] 1180 	ret
                           1181 ;engine/hotspots.h:42: void hotspots_create (void) {
                           1182 ;	---------------------------------
                           1183 ; Function hotspots_create
                           1184 ; ---------------------------------
   0275                    1185 _hotspots_create::
                           1186 ;engine/hotspots.h:54: gp_gen = (unsigned char *) (c_hotspots + (n_pant << 1));
   0275 FD 21rB8r01   [14] 1187 	ld	iy,#_n_pant
   0279 FD 6E 00      [19] 1188 	ld	l,0 (iy)
   027C 26 00         [ 7] 1189 	ld	h,#0x00
   027E 29            [11] 1190 	add	hl, hl
   027F 55            [ 4] 1191 	ld	d,l
   0280 5C            [ 4] 1192 	ld	e,h
   0281 21r0Ar00      [10] 1193 	ld	hl,#_gp_gen
   0284 3Ar8Dr00      [13] 1194 	ld	a,(#_c_hotspots + 0)
   0287 82            [ 4] 1195 	add	a, d
   0288 77            [ 7] 1196 	ld	(hl),a
   0289 3Ar8Er00      [13] 1197 	ld	a,(#_c_hotspots + 1)
   028C 8B            [ 4] 1198 	adc	a, e
   028D 23            [ 6] 1199 	inc	hl
   028E 77            [ 7] 1200 	ld	(hl),a
                           1201 ;engine/hotspots.h:55: hrt = *gp_gen ++; rda = *gp_gen; 
   028F 2Ar0Ar00      [16] 1202 	ld	hl,(_gp_gen)
   0292 7E            [ 7] 1203 	ld	a,(hl)
   0293 32r7Ar00      [13] 1204 	ld	(#_hrt + 0),a
   0296 21r0Ar00      [10] 1205 	ld	hl, #_gp_gen+0
   0299 34            [11] 1206 	inc	(hl)
   029A 20 04         [12] 1207 	jr	NZ,00115$
   029C 21r0Br00      [10] 1208 	ld	hl, #_gp_gen+1
   029F 34            [11] 1209 	inc	(hl)
   02A0                    1210 00115$:
   02A0 2Ar0Ar00      [16] 1211 	ld	hl,(_gp_gen)
   02A3 7E            [ 7] 1212 	ld	a,(hl)
   02A4 32r16r00      [13] 1213 	ld	(#_rda + 0),a
                           1214 ;engine/hotspots.h:56: if (hrt && hact [n_pant]) {
   02A7 3Ar7Ar00      [13] 1215 	ld	a,(#_hrt + 0)
   02AA B7            [ 4] 1216 	or	a, a
   02AB 28 22         [12] 1217 	jr	Z,00102$
   02AD 11rCAr01      [10] 1218 	ld	de,#_hact+0
   02B0 2ArB8r01      [16] 1219 	ld	hl,(_n_pant)
   02B3 26 00         [ 7] 1220 	ld	h,#0x00
   02B5 19            [11] 1221 	add	hl,de
   02B6 7E            [ 7] 1222 	ld	a,(hl)
   02B7 B7            [ 4] 1223 	or	a, a
   02B8 28 15         [12] 1224 	jr	Z,00102$
                           1225 ;engine/hotspots.h:57: hry = rda & 0xf0; hrx = rda << 4;
   02BA 3Ar16r00      [13] 1226 	ld	a,(#_rda + 0)
   02BD E6 F0         [ 7] 1227 	and	a, #0xF0
   02BF 32r79r00      [13] 1228 	ld	(#_hry + 0),a
   02C2 3Ar16r00      [13] 1229 	ld	a,(#_rda + 0)
   02C5 07            [ 4] 1230 	rlca
   02C6 07            [ 4] 1231 	rlca
   02C7 07            [ 4] 1232 	rlca
   02C8 07            [ 4] 1233 	rlca
   02C9 E6 F0         [ 7] 1234 	and	a,#0xF0
   02CB 32r78r00      [13] 1235 	ld	(#_hrx + 0),a
   02CE C9            [10] 1236 	ret
   02CF                    1237 00102$:
                           1238 ;engine/hotspots.h:58: } else hrt = 0;
   02CF 21r7Ar00      [10] 1239 	ld	hl,#_hrt + 0
   02D2 36 00         [10] 1240 	ld	(hl), #0x00
   02D4 C9            [10] 1241 	ret
                           1242 ;engine/../my/game_frame.h:7: void draw_game_frame (void) {
                           1243 ;	---------------------------------
                           1244 ; Function draw_game_frame
                           1245 ; ---------------------------------
   02D5                    1246 _draw_game_frame::
                           1247 ;engine/../my/game_frame.h:8: gp_gen = hud_rle; unrle ();
   02D5 21r00r00      [10] 1248 	ld	hl,#_hud_rle+0
   02D8 22r0Ar00      [16] 1249 	ld	(_gp_gen),hl
   02DB C3r00r00      [10] 1250 	jp  _unrle
                           1251 ;engine/frame.h:9: void hud_update (void) {
                           1252 ;	---------------------------------
                           1253 ; Function hud_update
                           1254 ; ---------------------------------
   02DE                    1255 _hud_update::
                           1256 ;engine/frame.h:12: if (okilled != pkilled) {
   02DE 3ArC6r01      [13] 1257 	ld	a,(#_okilled + 0)
   02E1 FD 21r71r00   [14] 1258 	ld	iy,#_pkilled
   02E5 FD 96 00      [19] 1259 	sub	a, 0 (iy)
   02E8 28 24         [12] 1260 	jr	Z,00102$
                           1261 ;engine/frame.h:13: okilled = pkilled;
   02EA 3Ar71r00      [13] 1262 	ld	a,(#_pkilled + 0)
   02ED 32rC6r01      [13] 1263 	ld	(#_okilled + 0),a
                           1264 ;engine/frame.h:14: _x = KILLED_X; _y = KILLED_Y; _n = c_max_enems - pkilled; p_t ();
   02F0 21r00r00      [10] 1265 	ld	hl,#__x + 0
   02F3 36 15         [10] 1266 	ld	(hl), #0x15
   02F5 21r01r00      [10] 1267 	ld	hl,#__y + 0
   02F8 36 01         [10] 1268 	ld	(hl), #0x01
   02FA 21r71r00      [10] 1269 	ld	hl,#_pkilled
   02FD D5            [11] 1270 	push	de
   02FE FD 21r02r00   [14] 1271 	ld	iy,#__n
   0302 FD E5         [15] 1272 	push	iy
   0304 D1            [10] 1273 	pop	de
   0305 3ArB7r01      [13] 1274 	ld	a,(#_c_max_enems + 0)
   0308 96            [ 7] 1275 	sub	a, (hl)
   0309 12            [ 7] 1276 	ld	(de),a
   030A D1            [10] 1277 	pop	de
   030B CDr00r00      [17] 1278 	call	_p_t
   030E                    1279 00102$:
                           1280 ;engine/frame.h:32: if (okeys != pkeys) {
   030E 3ArC3r01      [13] 1281 	ld	a,(#_okeys + 0)
   0311 FD 21r6Er00   [14] 1282 	ld	iy,#_pkeys
   0315 FD 96 00      [19] 1283 	sub	a, 0 (iy)
   0318 28 19         [12] 1284 	jr	Z,00104$
                           1285 ;engine/frame.h:33: okeys = pkeys;
   031A 21r6Er00      [10] 1286 	ld	hl,#_pkeys + 0
   031D 56            [ 7] 1287 	ld	d, (hl)
   031E 21rC3r01      [10] 1288 	ld	hl,#_okeys + 0
   0321 72            [ 7] 1289 	ld	(hl), d
                           1290 ;engine/frame.h:34: _x = KEYS_X; _y = KEYS_Y; _n = pkeys; p_t ();
   0322 21r00r00      [10] 1291 	ld	hl,#__x + 0
   0325 36 0C         [10] 1292 	ld	(hl), #0x0C
   0327 21r01r00      [10] 1293 	ld	hl,#__y + 0
   032A 36 01         [10] 1294 	ld	(hl), #0x01
   032C 21r02r00      [10] 1295 	ld	hl,#__n + 0
   032F 72            [ 7] 1296 	ld	(hl), d
   0330 CDr00r00      [17] 1297 	call	_p_t
   0333                    1298 00104$:
                           1299 ;engine/frame.h:39: if (olife != plife) {
   0333 3ArC2r01      [13] 1300 	ld	a,(#_olife + 0)
   0336 FD 21r6Dr00   [14] 1301 	ld	iy,#_plife
   033A FD 96 00      [19] 1302 	sub	a, 0 (iy)
   033D C8            [11] 1303 	ret	Z
                           1304 ;engine/frame.h:40: olife = plife;
   033E 21r6Dr00      [10] 1305 	ld	hl,#_plife + 0
   0341 56            [ 7] 1306 	ld	d, (hl)
   0342 21rC2r01      [10] 1307 	ld	hl,#_olife + 0
   0345 72            [ 7] 1308 	ld	(hl), d
                           1309 ;engine/frame.h:41: _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
   0346 21r00r00      [10] 1310 	ld	hl,#__x + 0
   0349 36 04         [10] 1311 	ld	(hl), #0x04
   034B 21r01r00      [10] 1312 	ld	hl,#__y + 0
   034E 36 01         [10] 1313 	ld	(hl), #0x01
   0350 21r02r00      [10] 1314 	ld	hl,#__n + 0
   0353 72            [ 7] 1315 	ld	(hl), d
   0354 C3r00r00      [10] 1316 	jp  _p_t
                           1317 ;my/pres.h:6: void bat_in (void) {
                           1318 ;	---------------------------------
                           1319 ; Function bat_in
                           1320 ; ---------------------------------
   0357                    1321 _bat_in::
                           1322 ;my/pres.h:7: SG_displayOn ();
   0357 21 40 01      [10] 1323 	ld	hl,#0x0140
   035A E5            [11] 1324 	push	hl
   035B CDr00r00      [17] 1325 	call	_SG_VDPturnOnFeature
   035E F1            [10] 1326 	pop	af
                           1327 ;my/pres.h:8: while (SG_getKeysStatus ());
   035F                    1328 00101$:
   035F CDr00r00      [17] 1329 	call	_SG_getKeysStatus
   0362 7D            [ 4] 1330 	ld	a,l
   0363 B7            [ 4] 1331 	or	a, a
   0364 20 F9         [12] 1332 	jr	NZ,00101$
   0366 C9            [10] 1333 	ret
                           1334 ;my/pres.h:11: void bat_out (void) {
                           1335 ;	---------------------------------
                           1336 ; Function bat_out
                           1337 ; ---------------------------------
   0367                    1338 _bat_out::
                           1339 ;my/pres.h:12: PSGStop ();
   0367 CDr00r00      [17] 1340 	call	_PSGStop
                           1341 ;my/pres.h:13: SG_displayOff ();
   036A 21 40 01      [10] 1342 	ld	hl,#0x0140
   036D E5            [11] 1343 	push	hl
   036E CDr00r00      [17] 1344 	call	_SG_VDPturnOffFeature
   0371 F1            [10] 1345 	pop	af
                           1346 ;my/pres.h:14: SG_initSprites ();
   0372 CDr00r00      [17] 1347 	call	_SG_initSprites
                           1348 ;my/pres.h:15: SG_copySpritestoSAT ();	
   0375 C3r00r00      [10] 1349 	jp  _SG_copySpritestoSAT
                           1350 ;my/pres.h:18: void pres (void (*func) (void), unsigned char *music) {
                           1351 ;	---------------------------------
                           1352 ; Function pres
                           1353 ; ---------------------------------
   0378                    1354 _pres::
                           1355 ;my/pres.h:19: cls ();
   0378 CDr00r00      [17] 1356 	call	_cls
                           1357 ;my/pres.h:20: (*func) ();
   037B C1            [10] 1358 	pop	bc
   037C E1            [10] 1359 	pop	hl
   037D E5            [11] 1360 	push	hl
   037E C5            [11] 1361 	push	bc
   037F CDr00r00      [17] 1362 	call	___sdcc_call_hl
                           1363 ;my/pres.h:21: bat_in ();
   0382 CDr57r03      [17] 1364 	call	_bat_in
                           1365 ;my/pres.h:22: if (music) PSGPlay (music);
   0385 FD 21 04 00   [14] 1366 	ld	iy,#4
   0389 FD 39         [15] 1367 	add	iy,sp
   038B FD 7E 01      [19] 1368 	ld	a,1 (iy)
   038E FD B6 00      [19] 1369 	or	a,0 (iy)
   0391 28 0B         [12] 1370 	jr	Z,00106$
   0393 FD 6E 00      [19] 1371 	ld	l,0 (iy)
   0396 FD 66 01      [19] 1372 	ld	h,1 (iy)
   0399 E5            [11] 1373 	push	hl
   039A CDr00r00      [17] 1374 	call	_PSGPlay
   039D F1            [10] 1375 	pop	af
                           1376 ;my/pres.h:23: while (1) {
   039E                    1377 00106$:
                           1378 ;my/pres.h:24: pad_read ();
   039E CDr00r00      [17] 1379 	call	_pad_read
                           1380 ;my/pres.h:25: if (pad_this_frame & (PAD_A|PAD_B|PAD_START)) break;
   03A1 3Ar05r00      [13] 1381 	ld	a,(#_pad_this_frame + 0)
   03A4 E6 30         [ 7] 1382 	and	a, #0x30
   03A6 28 F6         [12] 1383 	jr	Z,00106$
                           1384 ;my/pres.h:27: bat_out ();
   03A8 C3r67r03      [10] 1385 	jp  _bat_out
                           1386 ;my/pres.h:30: void title (void) {
                           1387 ;	---------------------------------
                           1388 ; Function title
                           1389 ; ---------------------------------
   03AB                    1390 _title::
                           1391 ;my/pres.h:31: unpack_bg_patterns (tstitle_patterns_c, tstitle_colours_c, 64*8, 7);
   03AB 11r00r00      [10] 1392 	ld	de,#_tstitle_patterns_c
   03AE 3E 07         [ 7] 1393 	ld	a,#0x07
   03B0 F5            [11] 1394 	push	af
   03B1 33            [ 6] 1395 	inc	sp
   03B2 21 00 02      [10] 1396 	ld	hl,#0x0200
   03B5 E5            [11] 1397 	push	hl
   03B6 21r00r00      [10] 1398 	ld	hl,#_tstitle_colours_c
   03B9 E5            [11] 1399 	push	hl
   03BA D5            [11] 1400 	push	de
   03BB CDr00r00      [17] 1401 	call	_unpack_bg_patterns
   03BE 21 07 00      [10] 1402 	ld	hl,#7
   03C1 39            [11] 1403 	add	hl,sp
   03C2 F9            [ 6] 1404 	ld	sp,hl
                           1405 ;my/pres.h:32: gp_gen = title_rle; unrle ();
   03C3 21r00r00      [10] 1406 	ld	hl,#_title_rle+0
   03C6 22r0Ar00      [16] 1407 	ld	(_gp_gen),hl
   03C9 CDr00r00      [17] 1408 	call	_unrle
                           1409 ;my/pres.h:34: _x = 7; _y = 12; pr_str ("SELECT AND PUSH 1!");
   03CC 21r00r00      [10] 1410 	ld	hl,#__x + 0
   03CF 36 07         [10] 1411 	ld	(hl), #0x07
   03D1 21r01r00      [10] 1412 	ld	hl,#__y + 0
   03D4 36 0C         [10] 1413 	ld	(hl), #0x0C
   03D6 21rB4r04      [10] 1414 	ld	hl,#___str_0
   03D9 E5            [11] 1415 	push	hl
   03DA CDr00r00      [17] 1416 	call	_pr_str
   03DD F1            [10] 1417 	pop	af
                           1418 ;my/pres.h:36: _x = 12; _y = 16; pr_str ("RESONATORS");
   03DE 21r00r00      [10] 1419 	ld	hl,#__x + 0
   03E1 36 0C         [10] 1420 	ld	(hl), #0x0C
   03E3 21r01r00      [10] 1421 	ld	hl,#__y + 0
   03E6 36 10         [10] 1422 	ld	(hl), #0x10
   03E8 21rC7r04      [10] 1423 	ld	hl,#___str_1
   03EB E5            [11] 1424 	push	hl
   03EC CDr00r00      [17] 1425 	call	_pr_str
   03EF F1            [10] 1426 	pop	af
                           1427 ;my/pres.h:37: _y = 18; pr_str ("EASY MODE");
   03F0 21r01r00      [10] 1428 	ld	hl,#__y + 0
   03F3 36 12         [10] 1429 	ld	(hl), #0x12
   03F5 21rD2r04      [10] 1430 	ld	hl,#___str_2
   03F8 E5            [11] 1431 	push	hl
   03F9 CDr00r00      [17] 1432 	call	_pr_str
   03FC F1            [10] 1433 	pop	af
                           1434 ;my/pres.h:39: _x = 5; _y = 23; pr_str ("@ 2018 THE MOJON TWINS");
   03FD 21r00r00      [10] 1435 	ld	hl,#__x + 0
   0400 36 05         [10] 1436 	ld	(hl), #0x05
   0402 21r01r00      [10] 1437 	ld	hl,#__y + 0
   0405 36 17         [10] 1438 	ld	(hl), #0x17
   0407 21rDCr04      [10] 1439 	ld	hl,#___str_3
   040A E5            [11] 1440 	push	hl
   040B CDr00r00      [17] 1441 	call	_pr_str
   040E F1            [10] 1442 	pop	af
                           1443 ;my/pres.h:41: bat_in ();
   040F CDr57r03      [17] 1444 	call	_bat_in
                           1445 ;my/pres.h:43: PSGPlay (MUSIC_TITLE);
   0412 21r00r00      [10] 1446 	ld	hl,#_m_title_psg
   0415 E5            [11] 1447 	push	hl
   0416 CDr00r00      [17] 1448 	call	_PSGPlay
   0419 F1            [10] 1449 	pop	af
                           1450 ;my/pres.h:44: while (1) {
   041A                    1451 00115$:
                           1452 ;my/pres.h:45: update_cycle ();
   041A CDr00r00      [17] 1453 	call	_update_cycle
                           1454 ;my/pres.h:46: SG_addMetaSprite1x1 (82, 122 + (mode_no_resonators << 4), ss_pl_00);
   041D 21r00r00      [10] 1455 	ld	hl,#_ss_pl_00
   0420 3ArB5r02      [13] 1456 	ld	a,(#_mode_no_resonators + 0)
   0423 07            [ 4] 1457 	rlca
   0424 07            [ 4] 1458 	rlca
   0425 07            [ 4] 1459 	rlca
   0426 07            [ 4] 1460 	rlca
   0427 E6 F0         [ 7] 1461 	and	a,#0xF0
   0429 C6 7A         [ 7] 1462 	add	a, #0x7A
   042B E5            [11] 1463 	push	hl
   042C 57            [ 4] 1464 	ld	d,a
   042D 1E 52         [ 7] 1465 	ld	e,#0x52
   042F D5            [11] 1466 	push	de
   0430 CDr00r00      [17] 1467 	call	_SG_addMetaSprite1x1
   0433 F1            [10] 1468 	pop	af
   0434 F1            [10] 1469 	pop	af
                           1470 ;my/pres.h:47: pad_read ();
   0435 CDr00r00      [17] 1471 	call	_pad_read
                           1472 ;my/pres.h:48: rda = mode_no_resonators;
   0438 3ArB5r02      [13] 1473 	ld	a,(#_mode_no_resonators + 0)
   043B 32r16r00      [13] 1474 	ld	(#_rda + 0),a
                           1475 ;my/pres.h:49: if (pad_this_frame & PAD_DOWN) {
   043E 21r05r00      [10] 1476 	ld	hl,#_pad_this_frame+0
   0441 CB 4E         [12] 1477 	bit	1, (hl)
   0443 28 10         [12] 1478 	jr	Z,00104$
                           1479 ;my/pres.h:50: ++ mode_no_resonators; if (mode_no_resonators == 2) mode_no_resonators = 0;
   0445 21rB5r02      [10] 1480 	ld	hl, #_mode_no_resonators+0
   0448 34            [11] 1481 	inc	(hl)
   0449 3ArB5r02      [13] 1482 	ld	a,(#_mode_no_resonators + 0)
   044C D6 02         [ 7] 1483 	sub	a, #0x02
   044E 20 05         [12] 1484 	jr	NZ,00104$
   0450 21rB5r02      [10] 1485 	ld	hl,#_mode_no_resonators + 0
   0453 36 00         [10] 1486 	ld	(hl), #0x00
   0455                    1487 00104$:
                           1488 ;my/pres.h:52: if (pad_this_frame & PAD_UP) {
   0455 21r05r00      [10] 1489 	ld	hl,#_pad_this_frame+0
   0458 CB 46         [12] 1490 	bit	0, (hl)
   045A 28 11         [12] 1491 	jr	Z,00109$
                           1492 ;my/pres.h:53: if (mode_no_resonators) -- mode_no_resonators; else mode_no_resonators = 1;
   045C 3ArB5r02      [13] 1493 	ld	a,(#_mode_no_resonators + 0)
   045F B7            [ 4] 1494 	or	a, a
   0460 28 06         [12] 1495 	jr	Z,00106$
   0462 21rB5r02      [10] 1496 	ld	hl, #_mode_no_resonators+0
   0465 35            [11] 1497 	dec	(hl)
   0466 18 05         [12] 1498 	jr	00109$
   0468                    1499 00106$:
   0468 21rB5r02      [10] 1500 	ld	hl,#_mode_no_resonators + 0
   046B 36 01         [10] 1501 	ld	(hl), #0x01
   046D                    1502 00109$:
                           1503 ;my/pres.h:55: if (mode_no_resonators != rda) PSGSFXPlay (SFX_USE, 1);
   046D 3ArB5r02      [13] 1504 	ld	a,(#_mode_no_resonators + 0)
   0470 FD 21r16r00   [14] 1505 	ld	iy,#_rda
   0474 FD 96 00      [19] 1506 	sub	a, 0 (iy)
   0477 28 0D         [12] 1507 	jr	Z,00111$
   0479 11r00r00      [10] 1508 	ld	de,#_s_03_use2_psg
   047C 3E 01         [ 7] 1509 	ld	a,#0x01
   047E F5            [11] 1510 	push	af
   047F 33            [ 6] 1511 	inc	sp
   0480 D5            [11] 1512 	push	de
   0481 CDr00r00      [17] 1513 	call	_PSGSFXPlay
   0484 F1            [10] 1514 	pop	af
   0485 33            [ 6] 1515 	inc	sp
   0486                    1516 00111$:
                           1517 ;my/pres.h:56: if (pad_this_frame & PAD_1) break;
   0486 21r05r00      [10] 1518 	ld	hl,#_pad_this_frame+0
   0489 CB 66         [12] 1519 	bit	4, (hl)
   048B 28 8D         [12] 1520 	jr	Z,00115$
                           1521 ;my/pres.h:59: PSGSFXPlay (SFX_START, 1); delay (20);
   048D 11r00r00      [10] 1522 	ld	de,#_s_00_start2_psg+0
   0490 3E 01         [ 7] 1523 	ld	a,#0x01
   0492 F5            [11] 1524 	push	af
   0493 33            [ 6] 1525 	inc	sp
   0494 D5            [11] 1526 	push	de
   0495 CDr00r00      [17] 1527 	call	_PSGSFXPlay
   0498 F1            [10] 1528 	pop	af
   0499 33            [ 6] 1529 	inc	sp
   049A 3E 14         [ 7] 1530 	ld	a,#0x14
   049C F5            [11] 1531 	push	af
   049D 33            [ 6] 1532 	inc	sp
   049E CDr00r00      [17] 1533 	call	_delay
   04A1 33            [ 6] 1534 	inc	sp
                           1535 ;my/pres.h:61: plife = mode_no_resonators ? 5 : 3;
   04A2 3ArB5r02      [13] 1536 	ld	a,(#_mode_no_resonators + 0)
   04A5 B7            [ 4] 1537 	or	a, a
   04A6 28 04         [12] 1538 	jr	Z,00119$
   04A8 3E 05         [ 7] 1539 	ld	a,#0x05
   04AA 18 02         [12] 1540 	jr	00120$
   04AC                    1541 00119$:
   04AC 3E 03         [ 7] 1542 	ld	a,#0x03
   04AE                    1543 00120$:
   04AE 32r6Dr00      [13] 1544 	ld	(#_plife + 0),a
                           1545 ;my/pres.h:63: bat_out ();
   04B1 C3r67r03      [10] 1546 	jp  _bat_out
   04B4                    1547 ___str_0:
   04B4 53 45 4C 45 43 54  1548 	.ascii "SELECT AND PUSH 1!"
        20 41 4E 44 20 50
        55 53 48 20 31 21
   04C6 00                 1549 	.db 0x00
   04C7                    1550 ___str_1:
   04C7 52 45 53 4F 4E 41  1551 	.ascii "RESONATORS"
        54 4F 52 53
   04D1 00                 1552 	.db 0x00
   04D2                    1553 ___str_2:
   04D2 45 41 53 59 20 4D  1554 	.ascii "EASY MODE"
        4F 44 45
   04DB 00                 1555 	.db 0x00
   04DC                    1556 ___str_3:
   04DC 40 20 32 30 31 38  1557 	.ascii "@ 2018 THE MOJON TWINS"
        20 54 48 45 20 4D
        4F 4A 4F 4E 20 54
        57 49 4E 53
   04F2 00                 1558 	.db 0x00
                           1559 ;my/pres.h:66: void scr_game_over (void) {
                           1560 ;	---------------------------------
                           1561 ; Function scr_game_over
                           1562 ; ---------------------------------
   04F3                    1563 _scr_game_over::
                           1564 ;my/pres.h:67: _x = 11; _y = 15; pr_str ("GAME OVER!");
   04F3 21r00r00      [10] 1565 	ld	hl,#__x + 0
   04F6 36 0B         [10] 1566 	ld	(hl), #0x0B
   04F8 21r01r00      [10] 1567 	ld	hl,#__y + 0
   04FB 36 0F         [10] 1568 	ld	(hl), #0x0F
   04FD 21r06r05      [10] 1569 	ld	hl,#___str_4
   0500 E5            [11] 1570 	push	hl
   0501 CDr00r00      [17] 1571 	call	_pr_str
   0504 F1            [10] 1572 	pop	af
   0505 C9            [10] 1573 	ret
   0506                    1574 ___str_4:
   0506 47 41 4D 45 20 4F  1575 	.ascii "GAME OVER!"
        56 45 52 21
   0510 00                 1576 	.db 0x00
                           1577 ;my/pres.h:70: void scr_the_end (void) {
                           1578 ;	---------------------------------
                           1579 ; Function scr_the_end
                           1580 ; ---------------------------------
   0511                    1581 _scr_the_end::
                           1582 ;my/pres.h:71: unpack_bg_patterns (tsending_patterns_c, tsending_colours_c, 64*8, 7);
   0511 11r00r00      [10] 1583 	ld	de,#_tsending_patterns_c
   0514 3E 07         [ 7] 1584 	ld	a,#0x07
   0516 F5            [11] 1585 	push	af
   0517 33            [ 6] 1586 	inc	sp
   0518 21 00 02      [10] 1587 	ld	hl,#0x0200
   051B E5            [11] 1588 	push	hl
   051C 21r00r00      [10] 1589 	ld	hl,#_tsending_colours_c
   051F E5            [11] 1590 	push	hl
   0520 D5            [11] 1591 	push	de
   0521 CDr00r00      [17] 1592 	call	_unpack_bg_patterns
   0524 21 07 00      [10] 1593 	ld	hl,#7
   0527 39            [11] 1594 	add	hl,sp
   0528 F9            [ 6] 1595 	ld	sp,hl
                           1596 ;my/pres.h:72: gp_gen = ending_rle; unrle ();
   0529 21r00r00      [10] 1597 	ld	hl,#_ending_rle+0
   052C 22r0Ar00      [16] 1598 	ld	(_gp_gen),hl
   052F CDr00r00      [17] 1599 	call	_unrle
                           1600 ;my/pres.h:73: _x = 4; _y = 13; pr_str ("'CONGRATS, CHERIL'- SAID%%THE MAJOR -'YOU HAVE WON%%LA COPA DEL MEAO!', AND%%THEN CHERIL RETURNED TO%%THE FOREST . . .");
   0532 21r00r00      [10] 1601 	ld	hl,#__x + 0
   0535 36 04         [10] 1602 	ld	(hl), #0x04
   0537 21r01r00      [10] 1603 	ld	hl,#__y + 0
   053A 36 0D         [10] 1604 	ld	(hl), #0x0D
   053C 21r45r05      [10] 1605 	ld	hl,#___str_5
   053F E5            [11] 1606 	push	hl
   0540 CDr00r00      [17] 1607 	call	_pr_str
   0543 F1            [10] 1608 	pop	af
   0544 C9            [10] 1609 	ret
   0545                    1610 ___str_5:
   0545 27 43 4F 4E 47 52  1611 	.ascii "'CONGRATS, CHERIL'- SAID%%THE MAJOR -'YOU HAVE WON%%LA COPA "
        41 54 53 2C 20 43
        48 45 52 49 4C 27
        2D 20 53 41 49 44
        25 25 54 48 45 20
        4D 41 4A 4F 52 20
        2D 27 59 4F 55 20
        48 41 56 45 20 57
        4F 4E 25 25 4C 41
        20 43 4F 50 41 20
   0581 44 45 4C 20 4D 45  1612 	.ascii "DEL MEAO!', AND%%THEN CHERIL RETURNED TO%%THE FOREST . . ."
        41 4F 21 27 2C 20
        41 4E 44 25 25 54
        48 45 4E 20 43 48
        45 52 49 4C 20 52
        45 54 55 52 4E 45
        44 20 54 4F 25 25
        54 48 45 20 46 4F
        52 45 53 54 20 2E
        20 2E 20 2E
   05BB 00                 1613 	.db 0x00
                           1614 ;my/pres.h:81: void scr_level (void) {
                           1615 ;	---------------------------------
                           1616 ; Function scr_level
                           1617 ; ---------------------------------
   05BC                    1618 _scr_level::
                           1619 ;my/pres.h:82: _x = 12; _y = 14; pr_str ("LEVEL 0"); SG_setTile (17+level);
   05BC 21r00r00      [10] 1620 	ld	hl,#__x + 0
   05BF 36 0C         [10] 1621 	ld	(hl), #0x0C
   05C1 21r01r00      [10] 1622 	ld	hl,#__y + 0
   05C4 36 0E         [10] 1623 	ld	(hl), #0x0E
   05C6 21r23r06      [10] 1624 	ld	hl,#___str_6
   05C9 E5            [11] 1625 	push	hl
   05CA CDr00r00      [17] 1626 	call	_pr_str
   05CD F1            [10] 1627 	pop	af
   05CE 3ArB6r01      [13] 1628 	ld	a,(#_level + 0)
   05D1 C6 11         [ 7] 1629 	add	a, #0x11
   05D3 F5            [11] 1630 	push	af
   05D4 33            [ 6] 1631 	inc	sp
   05D5 CDr00r00      [17] 1632 	call	_SG_setTile
   05D8 33            [ 6] 1633 	inc	sp
                           1634 ;my/pres.h:83: _x = 10; _y = 16; pr_str (levelnames [level]);
   05D9 21r00r00      [10] 1635 	ld	hl,#__x + 0
   05DC 36 0A         [10] 1636 	ld	(hl), #0x0A
   05DE 21r01r00      [10] 1637 	ld	hl,#__y + 0
   05E1 36 10         [10] 1638 	ld	(hl), #0x10
   05E3 FD 21rB6r01   [14] 1639 	ld	iy,#_level
   05E7 FD 6E 00      [19] 1640 	ld	l,0 (iy)
   05EA 26 00         [ 7] 1641 	ld	h,#0x00
   05EC 29            [11] 1642 	add	hl, hl
   05ED 11r1Dr06      [10] 1643 	ld	de,#_levelnames
   05F0 19            [11] 1644 	add	hl,de
   05F1 5E            [ 7] 1645 	ld	e,(hl)
   05F2 23            [ 6] 1646 	inc	hl
   05F3 56            [ 7] 1647 	ld	d,(hl)
   05F4 D5            [11] 1648 	push	de
   05F5 CDr00r00      [17] 1649 	call	_pr_str
   05F8 F1            [10] 1650 	pop	af
   05F9 C9            [10] 1651 	ret
   05FA                    1652 _level0name:
   05FA 20 20 54 48 45 20  1653 	.ascii "  THE CITY"
        43 49 54 59
   0604 00                 1654 	.db 0x00
   0605                    1655 _level1name:
   0605 54 48 45 20 46 41  1656 	.ascii "THE FACTORY"
        43 54 4F 52 59
   0610 00                 1657 	.db 0x00
   0611                    1658 _level2name:
   0611 20 54 48 45 20 46  1659 	.ascii " THE FOREST"
        4F 52 45 53 54
   061C 00                 1660 	.db 0x00
   061D                    1661 _levelnames:
   061DrFAr05              1662 	.dw _level0name
   061Fr05r06              1663 	.dw _level1name
   0621r11r06              1664 	.dw _level2name
   0623                    1665 ___str_6:
   0623 4C 45 56 45 4C 20  1666 	.ascii "LEVEL 0"
        30
   062A 00                 1667 	.db 0x00
                           1668 ;my/pres.h:86: void credits (void) {
                           1669 ;	---------------------------------
                           1670 ; Function credits
                           1671 ; ---------------------------------
   062B                    1672 _credits::
                           1673 ;my/pres.h:87: cls ();
   062B CDr00r00      [17] 1674 	call	_cls
                           1675 ;my/pres.h:89: _x = 0; _y = 0; if (ntsc) pr_str ("NTSC"); else pr_str ("PAL");
   062E 21r00r00      [10] 1676 	ld	hl,#__x + 0
   0631 36 00         [10] 1677 	ld	(hl), #0x00
   0633 21r01r00      [10] 1678 	ld	hl,#__y + 0
   0636 36 00         [10] 1679 	ld	(hl), #0x00
   0638 3Ar90r00      [13] 1680 	ld	a,(#_ntsc + 0)
   063B B7            [ 4] 1681 	or	a, a
   063C 28 0A         [12] 1682 	jr	Z,00102$
   063E 21rA2r06      [10] 1683 	ld	hl,#___str_10
   0641 E5            [11] 1684 	push	hl
   0642 CDr00r00      [17] 1685 	call	_pr_str
   0645 F1            [10] 1686 	pop	af
   0646 18 08         [12] 1687 	jr	00103$
   0648                    1688 00102$:
   0648 21rA7r06      [10] 1689 	ld	hl,#___str_11
   064B E5            [11] 1690 	push	hl
   064C CDr00r00      [17] 1691 	call	_pr_str
   064F F1            [10] 1692 	pop	af
   0650                    1693 00103$:
                           1694 ;my/pres.h:91: rds16 = 0; rdy = 240;
   0650 21 00 00      [10] 1695 	ld	hl,#0x0000
   0653 22r08r00      [16] 1696 	ld	(_rds16),hl
   0656 21r13r00      [10] 1697 	ld	hl,#_rdy + 0
   0659 36 F0         [10] 1698 	ld	(hl), #0xF0
                           1699 ;my/pres.h:92: _x = 0; _y = 18; 
   065B 21r00r00      [10] 1700 	ld	hl,#__x + 0
   065E 36 00         [10] 1701 	ld	(hl), #0x00
   0660 21r01r00      [10] 1702 	ld	hl,#__y + 0
   0663 36 12         [10] 1703 	ld	(hl), #0x12
                           1704 ;my/pres.h:93: pr_str ("     CHERIL PERIL CLASSIC%%         ORIGINAL GAME%     @ 2011 THE MOJON TWINS%       REPROGRAMMED GAME%     @ 2018 THE MOJON TWINS");
   0665 21rABr06      [10] 1705 	ld	hl,#___str_12+0
   0668 E5            [11] 1706 	push	hl
   0669 CDr00r00      [17] 1707 	call	_pr_str
                           1708 ;my/pres.h:95: SG_displayOn ();
   066C 21 40 01      [10] 1709 	ld	hl, #0x0140
   066F E3            [19] 1710 	ex	(sp),hl
   0670 CDr00r00      [17] 1711 	call	_SG_VDPturnOnFeature
   0673 F1            [10] 1712 	pop	af
                           1713 ;my/pres.h:97: while (!(SG_getKeysStatus () & PAD_START) && rds16 < 300) {
   0674                    1714 00105$:
   0674 CDr00r00      [17] 1715 	call	_SG_getKeysStatus
   0677 CB 65         [ 8] 1716 	bit	4, l
   0679 20 1E         [12] 1717 	jr	NZ,00107$
   067B 3Ar08r00      [13] 1718 	ld	a,(#_rds16 + 0)
   067E D6 2C         [ 7] 1719 	sub	a, #0x2C
   0680 3Ar09r00      [13] 1720 	ld	a,(#_rds16 + 1)
   0683 17            [ 4] 1721 	rla
   0684 3F            [ 4] 1722 	ccf
   0685 1F            [ 4] 1723 	rra
   0686 DE 81         [ 7] 1724 	sbc	a, #0x81
   0688 30 0F         [12] 1725 	jr	NC,00107$
                           1726 ;my/pres.h:100: update_cycle ();
   068A CDr00r00      [17] 1727 	call	_update_cycle
                           1728 ;my/pres.h:101: rds16 ++;
   068D 21r08r00      [10] 1729 	ld	hl, #_rds16+0
   0690 34            [11] 1730 	inc	(hl)
   0691 20 E1         [12] 1731 	jr	NZ,00105$
   0693 21r09r00      [10] 1732 	ld	hl, #_rds16+1
   0696 34            [11] 1733 	inc	(hl)
   0697 18 DB         [12] 1734 	jr	00105$
   0699                    1735 00107$:
                           1736 ;my/pres.h:104: SG_displayOff ();
   0699 21 40 01      [10] 1737 	ld	hl,#0x0140
   069C E5            [11] 1738 	push	hl
   069D CDr00r00      [17] 1739 	call	_SG_VDPturnOffFeature
   06A0 F1            [10] 1740 	pop	af
   06A1 C9            [10] 1741 	ret
   06A2                    1742 ___str_10:
   06A2 4E 54 53 43        1743 	.ascii "NTSC"
   06A6 00                 1744 	.db 0x00
   06A7                    1745 ___str_11:
   06A7 50 41 4C           1746 	.ascii "PAL"
   06AA 00                 1747 	.db 0x00
   06AB                    1748 ___str_12:
   06AB 20 20 20 20 20 43  1749 	.ascii "     CHERIL PERIL CLASSIC%%         ORIGINAL GAME%     @ 201"
        48 45 52 49 4C 20
        50 45 52 49 4C 20
        43 4C 41 53 53 49
        43 25 25 20 20 20
        20 20 20 20 20 20
        4F 52 49 47 49 4E
        41 4C 20 47 41 4D
        45 25 20 20 20 20
        20 40 20 32 30 31
   06E7 31 20 54 48 45 20  1750 	.ascii "1 THE MOJON TWINS%       REPROGRAMMED GAME%     @ 2018 THE M"
        4D 4F 4A 4F 4E 20
        54 57 49 4E 53 25
        20 20 20 20 20 20
        20 52 45 50 52 4F
        47 52 41 4D 4D 45
        44 20 47 41 4D 45
        25 20 20 20 20 20
        40 20 32 30 31 38
        20 54 48 45 20 4D
   0723 4F 4A 4F 4E 20 54  1751 	.ascii "OJON TWINS"
        57 49 4E 53
   072D 00                 1752 	.db 0x00
                           1753 ;mainloop/flickscreen.h:7: void flickscreen_do_horizontal (void) {
                           1754 ;	---------------------------------
                           1755 ; Function flickscreen_do_horizontal
                           1756 ; ---------------------------------
   072E                    1757 _flickscreen_do_horizontal::
                           1758 ;mainloop/flickscreen.h:12: (cfx + pvx) < 0
   072E FD 21rB2r02   [14] 1759 	ld	iy,#_cfx
   0732 FD 4E 00      [19] 1760 	ld	c,0 (iy)
   0735 3ArB2r02      [13] 1761 	ld	a,(#_cfx + 0)
   0738 17            [ 4] 1762 	rla
   0739 9F            [ 4] 1763 	sbc	a, a
   073A 47            [ 4] 1764 	ld	b,a
   073B 3Ar4Cr00      [13] 1765 	ld	a,(#_pvx + 0)
   073E 81            [ 4] 1766 	add	a, c
   073F 57            [ 4] 1767 	ld	d,a
   0740 3Ar4Dr00      [13] 1768 	ld	a,(#_pvx + 1)
   0743 88            [ 4] 1769 	adc	a, b
   0744 5F            [ 4] 1770 	ld	e,a
                           1771 ;mainloop/flickscreen.h:8: if (prx == 4 && 
   0745 3Ar50r00      [13] 1772 	ld	a,(#_prx + 0)
   0748 D6 04         [ 7] 1773 	sub	a, #0x04
   074A 20 0F         [12] 1774 	jr	NZ,00105$
                           1775 ;mainloop/flickscreen.h:12: (cfx + pvx) < 0
   074C CB 7B         [ 8] 1776 	bit	7, e
   074E 28 0B         [12] 1777 	jr	Z,00105$
                           1778 ;mainloop/flickscreen.h:15: -- n_pant;
   0750 21rB8r01      [10] 1779 	ld	hl, #_n_pant+0
   0753 35            [11] 1780 	dec	(hl)
                           1781 ;mainloop/flickscreen.h:16: px = 244 << FIXBITS;
   0754 21 00 3D      [10] 1782 	ld	hl,#0x3D00
   0757 22r48r00      [16] 1783 	ld	(_px),hl
   075A C9            [10] 1784 	ret
   075B                    1785 00105$:
                           1786 ;mainloop/flickscreen.h:17: } else if (prx == 244 && 
   075B FD 21r50r00   [14] 1787 	ld	iy,#_prx
   075F FD 7E 00      [19] 1788 	ld	a,0 (iy)
   0762 D6 F4         [ 7] 1789 	sub	a, #0xF4
   0764 C0            [11] 1790 	ret	NZ
                           1791 ;mainloop/flickscreen.h:21: (cfx + pvx) > 0
   0765 AF            [ 4] 1792 	xor	a, a
   0766 BA            [ 4] 1793 	cp	a, d
   0767 9B            [ 4] 1794 	sbc	a, e
   0768 E2r6Dr07      [10] 1795 	jp	PO, 00130$
   076B EE 80         [ 7] 1796 	xor	a, #0x80
   076D                    1797 00130$:
   076D F0            [11] 1798 	ret	P
                           1799 ;mainloop/flickscreen.h:24: ++ n_pant;
   076E 21rB8r01      [10] 1800 	ld	hl, #_n_pant+0
   0771 34            [11] 1801 	inc	(hl)
                           1802 ;mainloop/flickscreen.h:25: px = 4 << FIXBITS;
   0772 21 00 01      [10] 1803 	ld	hl,#0x0100
   0775 22r48r00      [16] 1804 	ld	(_px),hl
   0778 C9            [10] 1805 	ret
                           1806 ;mainloop/flickscreen.h:29: void flickscreen_do_vertical (void) {
                           1807 ;	---------------------------------
                           1808 ; Function flickscreen_do_vertical
                           1809 ; ---------------------------------
   0779                    1810 _flickscreen_do_vertical::
                           1811 ;mainloop/flickscreen.h:42: if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
   0779 3Ar51r00      [13] 1812 	ld	a,(#_pry + 0)
   077C B7            [ 4] 1813 	or	a, a
   077D 20 44         [12] 1814 	jr	NZ,00108$
   077F 3Ar4Fr00      [13] 1815 	ld	a,(#_pvy + 1)
   0782 CB 7F         [ 8] 1816 	bit	7,a
   0784 28 3D         [12] 1817 	jr	Z,00108$
   0786 21r7Dr00      [10] 1818 	ld	hl,#_c_map_w
   0789 3ArB8r01      [13] 1819 	ld	a,(#_n_pant + 0)
   078C 96            [ 7] 1820 	sub	a, (hl)
   078D 38 34         [12] 1821 	jr	C,00108$
                           1822 ;mainloop/flickscreen.h:43: n_pant -= c_map_w;
   078F 21r7Dr00      [10] 1823 	ld	hl,#_c_map_w
   0792 D5            [11] 1824 	push	de
   0793 FD 21rB8r01   [14] 1825 	ld	iy,#_n_pant
   0797 FD E5         [15] 1826 	push	iy
   0799 D1            [10] 1827 	pop	de
   079A 1A            [ 7] 1828 	ld	a,(de)
   079B 96            [ 7] 1829 	sub	a, (hl)
   079C 12            [ 7] 1830 	ld	(de),a
   079D D1            [10] 1831 	pop	de
                           1832 ;mainloop/flickscreen.h:44: py = 192 << FIXBITS;
   079E 21 00 30      [10] 1833 	ld	hl,#0x3000
   07A1 22r4Ar00      [16] 1834 	ld	(_py),hl
                           1835 ;mainloop/flickscreen.h:45: if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
   07A4 3E 60         [ 7] 1836 	ld	a,#0x60
   07A6 FD 21r4Er00   [14] 1837 	ld	iy,#_pvy
   07AA FD BE 00      [19] 1838 	cp	a, 0 (iy)
   07AD 3E FF         [ 7] 1839 	ld	a,#0xFF
   07AF FD 21r4Er00   [14] 1840 	ld	iy,#_pvy
   07B3 FD 9E 01      [19] 1841 	sbc	a, 1 (iy)
   07B6 E2rBBr07      [10] 1842 	jp	PO, 00142$
   07B9 EE 80         [ 7] 1843 	xor	a, #0x80
   07BB                    1844 00142$:
   07BB F0            [11] 1845 	ret	P
   07BC 21 60 FF      [10] 1846 	ld	hl,#0xFF60
   07BF 22r4Er00      [16] 1847 	ld	(_pvy),hl
   07C2 C9            [10] 1848 	ret
   07C3                    1849 00108$:
                           1850 ;mainloop/flickscreen.h:46: } else if (pry >= 192 && pvy > 0 && n_pant < c_map_size - c_map_w) {
   07C3 3Ar51r00      [13] 1851 	ld	a,(#_pry + 0)
   07C6 D6 C0         [ 7] 1852 	sub	a, #0xC0
   07C8 D8            [11] 1853 	ret	C
   07C9 AF            [ 4] 1854 	xor	a, a
   07CA FD 21r4Er00   [14] 1855 	ld	iy,#_pvy
   07CE FD BE 00      [19] 1856 	cp	a, 0 (iy)
   07D1 FD 21r4Er00   [14] 1857 	ld	iy,#_pvy
   07D5 FD 9E 01      [19] 1858 	sbc	a, 1 (iy)
   07D8 E2rDDr07      [10] 1859 	jp	PO, 00143$
   07DB EE 80         [ 7] 1860 	xor	a, #0x80
   07DD                    1861 00143$:
   07DD F0            [11] 1862 	ret	P
   07DE 21r7Fr00      [10] 1863 	ld	hl,#_c_map_size + 0
   07E1 5E            [ 7] 1864 	ld	e, (hl)
   07E2 16 00         [ 7] 1865 	ld	d,#0x00
   07E4 FD 21r7Dr00   [14] 1866 	ld	iy,#_c_map_w
   07E8 FD 6E 00      [19] 1867 	ld	l,0 (iy)
   07EB 26 00         [ 7] 1868 	ld	h,#0x00
   07ED 7B            [ 4] 1869 	ld	a,e
   07EE 95            [ 4] 1870 	sub	a, l
   07EF 5F            [ 4] 1871 	ld	e,a
   07F0 7A            [ 4] 1872 	ld	a,d
   07F1 9C            [ 4] 1873 	sbc	a, h
   07F2 57            [ 4] 1874 	ld	d,a
   07F3 FD 21rB8r01   [14] 1875 	ld	iy,#_n_pant
   07F7 FD 66 00      [19] 1876 	ld	h,0 (iy)
   07FA 2E 00         [ 7] 1877 	ld	l,#0x00
   07FC 7C            [ 4] 1878 	ld	a,h
   07FD 93            [ 4] 1879 	sub	a, e
   07FE 7D            [ 4] 1880 	ld	a,l
   07FF 9A            [ 4] 1881 	sbc	a, d
   0800 E2r05r08      [10] 1882 	jp	PO, 00144$
   0803 EE 80         [ 7] 1883 	xor	a, #0x80
   0805                    1884 00144$:
   0805 F0            [11] 1885 	ret	P
                           1886 ;mainloop/flickscreen.h:47: n_pant += c_map_w;
   0806 21r7Dr00      [10] 1887 	ld	hl,#_c_map_w
   0809 D5            [11] 1888 	push	de
   080A FD 21rB8r01   [14] 1889 	ld	iy,#_n_pant
   080E FD E5         [15] 1890 	push	iy
   0810 D1            [10] 1891 	pop	de
   0811 1A            [ 7] 1892 	ld	a,(de)
   0812 86            [ 7] 1893 	add	a, (hl)
   0813 12            [ 7] 1894 	ld	(de),a
   0814 D1            [10] 1895 	pop	de
                           1896 ;mainloop/flickscreen.h:48: py = 0;
   0815 21 00 00      [10] 1897 	ld	hl,#0x0000
   0818 22r4Ar00      [16] 1898 	ld	(_py),hl
   081B C9            [10] 1899 	ret
                           1900 ;mainloop.h:7: void game_init (void) {
                           1901 ;	---------------------------------
                           1902 ; Function game_init
                           1903 ; ---------------------------------
   081C                    1904 _game_init::
                           1905 ;mainloop.h:9: win_level = game_over = 0;
   081C 21rBEr01      [10] 1906 	ld	hl,#_game_over + 0
   081F 36 00         [10] 1907 	ld	(hl), #0x00
   0821 21rBDr01      [10] 1908 	ld	hl,#_win_level + 0
   0824 36 00         [10] 1909 	ld	(hl), #0x00
   0826 FD 21rB6r01   [14] 1910 	ld	iy,#_level
   082A FD 6E 00      [19] 1911 	ld	l,0 (iy)
   082D 26 00         [ 7] 1912 	ld	h,#0x00
   082F 29            [11] 1913 	add	hl, hl
   0830 4D            [ 4] 1914 	ld	c, l
   0831 44            [ 4] 1915 	ld	b, h
   0832 21rFCr01      [10] 1916 	ld	hl,#_l_ts_tmaps
   0835 09            [11] 1917 	add	hl,bc
   0836 7E            [ 7] 1918 	ld	a,(hl)
   0837 FD 21r80r00   [14] 1919 	ld	iy,#_c_ts_tmaps
   083B FD 77 00      [19] 1920 	ld	0 (iy),a
   083E 23            [ 6] 1921 	inc	hl
   083F 7E            [ 7] 1922 	ld	a,(hl)
   0840 32r81r00      [13] 1923 	ld	(#_c_ts_tmaps + 1),a
                           1924 ;mainloop/asset_setup.h:10: c_behs = 		l_behs [level];
   0843 21r02r02      [10] 1925 	ld	hl,#_l_behs
   0846 09            [11] 1926 	add	hl,bc
   0847 7E            [ 7] 1927 	ld	a,(hl)
   0848 FD 21r82r00   [14] 1928 	ld	iy,#_c_behs
   084C FD 77 00      [19] 1929 	ld	0 (iy),a
   084F 23            [ 6] 1930 	inc	hl
   0850 7E            [ 7] 1931 	ld	a,(hl)
   0851 32r83r00      [13] 1932 	ld	(#_c_behs + 1),a
                           1933 ;mainloop/asset_setup.h:11: spr_enems = 	l_spr_enems [level];
   0854 21r0Er02      [10] 1934 	ld	hl,#_l_spr_enems
   0857 09            [11] 1935 	add	hl,bc
   0858 7E            [ 7] 1936 	ld	a,(hl)
   0859 FD 21r84r00   [14] 1937 	ld	iy,#_spr_enems
   085D FD 77 00      [19] 1938 	ld	0 (iy),a
   0860 23            [ 6] 1939 	inc	hl
   0861 7E            [ 7] 1940 	ld	a,(hl)
   0862 32r85r00      [13] 1941 	ld	(#_spr_enems + 1),a
                           1942 ;mainloop/asset_setup.h:13: c_map = 		l_map [level];
   0865 21r14r02      [10] 1943 	ld	hl,#_l_map
   0868 09            [11] 1944 	add	hl,bc
   0869 7E            [ 7] 1945 	ld	a,(hl)
   086A FD 21r86r00   [14] 1946 	ld	iy,#_c_map
   086E FD 77 00      [19] 1947 	ld	0 (iy),a
   0871 23            [ 6] 1948 	inc	hl
   0872 7E            [ 7] 1949 	ld	a,(hl)
   0873 32r87r00      [13] 1950 	ld	(#_c_map + 1),a
                           1951 ;mainloop/asset_setup.h:20: c_decos = 	l_decos [level];
   0876 3Er1A         [ 7] 1952 	ld	a,#<(_l_decos)
   0878 21rB6r01      [10] 1953 	ld	hl,#_level
   087B 86            [ 7] 1954 	add	a, (hl)
   087C 5F            [ 4] 1955 	ld	e,a
   087D 3Es02         [ 7] 1956 	ld	a,#>(_l_decos)
   087F CE 00         [ 7] 1957 	adc	a, #0x00
   0881 57            [ 4] 1958 	ld	d,a
   0882 1A            [ 7] 1959 	ld	a,(de)
   0883 32r88r00      [13] 1960 	ld	(#_c_decos + 0),a
                           1961 ;mainloop/asset_setup.h:23: c_locks = 	l_locks [level];
   0886 21r1Dr02      [10] 1962 	ld	hl,#_l_locks
   0889 09            [11] 1963 	add	hl,bc
   088A 7E            [ 7] 1964 	ld	a,(hl)
   088B FD 21r89r00   [14] 1965 	ld	iy,#_c_locks
   088F FD 77 00      [19] 1966 	ld	0 (iy),a
   0892 23            [ 6] 1967 	inc	hl
   0893 7E            [ 7] 1968 	ld	a,(hl)
   0894 32r8Ar00      [13] 1969 	ld	(#_c_locks + 1),a
                           1970 ;mainloop/asset_setup.h:25: l_n_bolts [level];
   0897 3Er23         [ 7] 1971 	ld	a,#<(_l_n_bolts)
   0899 21rB6r01      [10] 1972 	ld	hl,#_level
   089C 86            [ 7] 1973 	add	a, (hl)
   089D 5F            [ 4] 1974 	ld	e,a
   089E 3Es02         [ 7] 1975 	ld	a,#>(_l_n_bolts)
   08A0 CE 00         [ 7] 1976 	adc	a, #0x00
   08A2 57            [ 4] 1977 	ld	d,a
   08A3 1A            [ 7] 1978 	ld	a,(de)
   08A4 32r8Fr00      [13] 1979 	ld	(#_c_max_bolts + 0),a
                           1980 ;mainloop/asset_setup.h:28: c_enems = 		l_enems [level];
   08A7 21r26r02      [10] 1981 	ld	hl,#_l_enems
   08AA 09            [11] 1982 	add	hl,bc
   08AB 7E            [ 7] 1983 	ld	a,(hl)
   08AC FD 21r8Br00   [14] 1984 	ld	iy,#_c_enems
   08B0 FD 77 00      [19] 1985 	ld	0 (iy),a
   08B3 23            [ 6] 1986 	inc	hl
   08B4 7E            [ 7] 1987 	ld	a,(hl)
   08B5 32r8Cr00      [13] 1988 	ld	(#_c_enems + 1),a
                           1989 ;mainloop/asset_setup.h:29: c_hotspots = 	l_hotspots [level];	
   08B8 21r2Cr02      [10] 1990 	ld	hl,#_l_hotspots
   08BB 09            [11] 1991 	add	hl,bc
   08BC 7E            [ 7] 1992 	ld	a,(hl)
   08BD FD 21r8Dr00   [14] 1993 	ld	iy,#_c_hotspots
   08C1 FD 77 00      [19] 1994 	ld	0 (iy),a
   08C4 23            [ 6] 1995 	inc	hl
   08C5 7E            [ 7] 1996 	ld	a,(hl)
   08C6 32r8Er00      [13] 1997 	ld	(#_c_hotspots + 1),a
                           1998 ;mainloop/asset_setup.h:31: c_max_enems = 	l_player_max_enems [level];
   08C9 3ErED         [ 7] 1999 	ld	a,#<(_l_player_max_enems)
   08CB 21rB6r01      [10] 2000 	ld	hl,#_level
   08CE 86            [ 7] 2001 	add	a, (hl)
   08CF 5F            [ 4] 2002 	ld	e,a
   08D0 3Es01         [ 7] 2003 	ld	a,#>(_l_player_max_enems)
   08D2 CE 00         [ 7] 2004 	adc	a, #0x00
   08D4 57            [ 4] 2005 	ld	d,a
   08D5 1A            [ 7] 2006 	ld	a,(de)
   08D6 32rB7r01      [13] 2007 	ld	(#_c_max_enems + 0),a
                           2008 ;mainloop/asset_setup.h:33: c_map_w = 		l_map_w [level];
   08D9 3ErE4         [ 7] 2009 	ld	a,#<(_l_map_w)
   08DB 21rB6r01      [10] 2010 	ld	hl,#_level
   08DE 86            [ 7] 2011 	add	a, (hl)
   08DF 5F            [ 4] 2012 	ld	e,a
   08E0 3Es01         [ 7] 2013 	ld	a,#>(_l_map_w)
   08E2 CE 00         [ 7] 2014 	adc	a, #0x00
   08E4 57            [ 4] 2015 	ld	d,a
   08E5 1A            [ 7] 2016 	ld	a,(de)
   08E6 32r7Dr00      [13] 2017 	ld	(#_c_map_w + 0),a
                           2018 ;mainloop/asset_setup.h:34: c_map_h = 		l_map_h [level];
   08E9 3ErE7         [ 7] 2019 	ld	a,#<(_l_map_h)
   08EB 21rB6r01      [10] 2020 	ld	hl,#_level
   08EE 86            [ 7] 2021 	add	a, (hl)
   08EF 5F            [ 4] 2022 	ld	e,a
   08F0 3Es01         [ 7] 2023 	ld	a,#>(_l_map_h)
   08F2 CE 00         [ 7] 2024 	adc	a, #0x00
   08F4 57            [ 4] 2025 	ld	d,a
   08F5 1A            [ 7] 2026 	ld	a,(de)
                           2027 ;mainloop/asset_setup.h:84: rda = c_map_h; c_map_size = 0; while (rda --) c_map_size += c_map_w;
   08F6 32r7Er00      [13] 2028 	ld	(#_c_map_h + 0),a
   08F9 32r16r00      [13] 2029 	ld	(#_rda + 0),a
   08FC 21r7Fr00      [10] 2030 	ld	hl,#_c_map_size + 0
   08FF 36 00         [10] 2031 	ld	(hl), #0x00
   0901                    2032 00101$:
   0901 21r16r00      [10] 2033 	ld	hl,#_rda + 0
   0904 56            [ 7] 2034 	ld	d, (hl)
   0905 21r16r00      [10] 2035 	ld	hl, #_rda+0
   0908 35            [11] 2036 	dec	(hl)
   0909 7A            [ 4] 2037 	ld	a,d
   090A B7            [ 4] 2038 	or	a, a
   090B 28 11         [12] 2039 	jr	Z,00103$
   090D 21r7Dr00      [10] 2040 	ld	hl,#_c_map_w
   0910 D5            [11] 2041 	push	de
   0911 FD 21r7Fr00   [14] 2042 	ld	iy,#_c_map_size
   0915 FD E5         [15] 2043 	push	iy
   0917 D1            [10] 2044 	pop	de
   0918 1A            [ 7] 2045 	ld	a,(de)
   0919 86            [ 7] 2046 	add	a, (hl)
   091A 12            [ 7] 2047 	ld	(de),a
   091B D1            [10] 2048 	pop	de
   091C 18 E3         [12] 2049 	jr	00101$
   091E                    2050 00103$:
                           2051 ;my/level_pattern_unpacker.h:3: unpack_bg_patterns (l_ts_patterns [level], l_ts_colours [level], 64*8, 7);
   091E 21rF6r01      [10] 2052 	ld	hl,#_l_ts_colours
   0921 09            [11] 2053 	add	hl,bc
   0922 5E            [ 7] 2054 	ld	e,(hl)
   0923 23            [ 6] 2055 	inc	hl
   0924 56            [ 7] 2056 	ld	d,(hl)
   0925 21rF0r01      [10] 2057 	ld	hl,#_l_ts_patterns
   0928 09            [11] 2058 	add	hl,bc
   0929 4E            [ 7] 2059 	ld	c,(hl)
   092A 23            [ 6] 2060 	inc	hl
   092B 46            [ 7] 2061 	ld	b,(hl)
   092C 3E 07         [ 7] 2062 	ld	a,#0x07
   092E F5            [11] 2063 	push	af
   092F 33            [ 6] 2064 	inc	sp
   0930 21 00 02      [10] 2065 	ld	hl,#0x0200
   0933 E5            [11] 2066 	push	hl
   0934 D5            [11] 2067 	push	de
   0935 C5            [11] 2068 	push	bc
   0936 CDr00r00      [17] 2069 	call	_unpack_bg_patterns
   0939 21 07 00      [10] 2070 	ld	hl,#7
   093C 39            [11] 2071 	add	hl,sp
   093D F9            [ 6] 2072 	ld	sp,hl
                           2073 ;my/level_pattern_unpacker.h:4: aPLib_depack_VRAM (SGT_BASE + 160*8, l_spr_patterns [level]);
   093E FD 21rB6r01   [14] 2074 	ld	iy,#_level
   0942 FD 6E 00      [19] 2075 	ld	l,0 (iy)
   0945 26 00         [ 7] 2076 	ld	h,#0x00
   0947 29            [11] 2077 	add	hl, hl
   0948 11r08r02      [10] 2078 	ld	de,#_l_spr_patterns
   094B 19            [11] 2079 	add	hl,de
   094C 5E            [ 7] 2080 	ld	e,(hl)
   094D 23            [ 6] 2081 	inc	hl
   094E 56            [ 7] 2082 	ld	d,(hl)
   094F D5            [11] 2083 	push	de
   0950 21 00 3D      [10] 2084 	ld	hl,#0x3D00
   0953 E5            [11] 2085 	push	hl
   0954 CDr00r00      [17] 2086 	call	_aPLib_depack_VRAM
   0957 F1            [10] 2087 	pop	af
   0958 F1            [10] 2088 	pop	af
                           2089 ;mainloop.h:17: cls ();
   0959 CDr00r00      [17] 2090 	call	_cls
                           2091 ;mainloop.h:19: draw_game_frame ();
   095C CDrD5r02      [17] 2092 	call	_draw_game_frame
                           2093 ;mainloop.h:22: hotspots_load ();
   095F CDr00r00      [17] 2094 	call	_hotspots_load
                           2095 ;mainloop.h:25: memfill (lkact, 1, c_max_bolts);
   0962 21r8Fr00      [10] 2096 	ld	hl,#_c_max_bolts + 0
   0965 4E            [ 7] 2097 	ld	c, (hl)
   0966 06 00         [ 7] 2098 	ld	b,#0x00
   0968 11rE2r01      [10] 2099 	ld	de,#_lkact
   096B C5            [11] 2100 	push	bc
   096C 3E 01         [ 7] 2101 	ld	a,#0x01
   096E F5            [11] 2102 	push	af
   096F 33            [ 6] 2103 	inc	sp
   0970 D5            [11] 2104 	push	de
   0971 CDr00r00      [17] 2105 	call	_memfill
   0974 F1            [10] 2106 	pop	af
   0975 F1            [10] 2107 	pop	af
   0976 33            [ 6] 2108 	inc	sp
                           2109 ;mainloop.h:28: if (!warp_to_level)	{
   0977 3ArBFr01      [13] 2110 	ld	a,(#_warp_to_level + 0)
   097A B7            [ 4] 2111 	or	a, a
   097B 20 43         [12] 2112 	jr	NZ,00105$
                           2113 ;mainloop.h:29: n_pant = SCR_INI;
   097D 11rDBr01      [10] 2114 	ld	de,#_l_scr_ini+0
   0980 2ArB6r01      [16] 2115 	ld	hl,(_level)
   0983 26 00         [ 7] 2116 	ld	h,#0x00
   0985 19            [11] 2117 	add	hl,de
   0986 7E            [ 7] 2118 	ld	a,(hl)
   0987 32rB8r01      [13] 2119 	ld	(#_n_pant + 0),a
                           2120 ;mainloop.h:30: px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
   098A 11rDEr01      [10] 2121 	ld	de,#_l_ini_x+0
   098D 2ArB6r01      [16] 2122 	ld	hl,(_level)
   0990 26 00         [ 7] 2123 	ld	h,#0x00
   0992 19            [11] 2124 	add	hl,de
   0993 6E            [ 7] 2125 	ld	l,(hl)
   0994 26 00         [ 7] 2126 	ld	h,#0x00
   0996 29            [11] 2127 	add	hl, hl
   0997 29            [11] 2128 	add	hl, hl
   0998 29            [11] 2129 	add	hl, hl
   0999 29            [11] 2130 	add	hl, hl
   099A 01 04 00      [10] 2131 	ld	bc,#0x0004
   099D 09            [11] 2132 	add	hl,bc
   099E 29            [11] 2133 	add	hl, hl
   099F 29            [11] 2134 	add	hl, hl
   09A0 29            [11] 2135 	add	hl, hl
   09A1 29            [11] 2136 	add	hl, hl
   09A2 29            [11] 2137 	add	hl, hl
   09A3 29            [11] 2138 	add	hl, hl
   09A4 22r48r00      [16] 2139 	ld	(_px),hl
                           2140 ;mainloop.h:31: py = (PLAYER_INI_Y << 4) << FIXBITS;
   09A7 11rE1r01      [10] 2141 	ld	de,#_l_ini_y+0
   09AA 2ArB6r01      [16] 2142 	ld	hl,(_level)
   09AD 26 00         [ 7] 2143 	ld	h,#0x00
   09AF 19            [11] 2144 	add	hl,de
   09B0 6E            [ 7] 2145 	ld	l,(hl)
   09B1 26 00         [ 7] 2146 	ld	h,#0x00
   09B3 29            [11] 2147 	add	hl, hl
   09B4 29            [11] 2148 	add	hl, hl
   09B5 29            [11] 2149 	add	hl, hl
   09B6 29            [11] 2150 	add	hl, hl
   09B7 29            [11] 2151 	add	hl, hl
   09B8 29            [11] 2152 	add	hl, hl
   09B9 29            [11] 2153 	add	hl, hl
   09BA 29            [11] 2154 	add	hl, hl
   09BB 29            [11] 2155 	add	hl, hl
   09BC 29            [11] 2156 	add	hl, hl
   09BD 22r4Ar00      [16] 2157 	ld	(_py),hl
   09C0                    2158 00105$:
                           2159 ;mainloop.h:33: player_to_pixels ();
   09C0 CDr00r00      [17] 2160 	call	_player_to_pixels
                           2161 ;mainloop.h:34: player_init ();
   09C3 CDr00r00      [17] 2162 	call	_player_init
                           2163 ;mainloop.h:37: enems_persistent_load ();
   09C6 CDr00r00      [17] 2164 	call	_enems_persistent_load
                           2165 ;mainloop.h:41: enems_persistent_deaths_load ();
   09C9 CDr00r00      [17] 2166 	call	_enems_persistent_deaths_load
                           2167 ;mainloop.h:53: pkeys = 0;
   09CC 21r6Er00      [10] 2168 	ld	hl,#_pkeys + 0
   09CF 36 00         [10] 2169 	ld	(hl), #0x00
                           2170 ;mainloop.h:57: res_on = 0;
   09D1 21rAFr02      [10] 2171 	ld	hl,#_res_on + 0
   09D4 36 00         [10] 2172 	ld	(hl), #0x00
                           2173 ;mainloop.h:58: res_disable = 0;
   09D6 21rAEr02      [10] 2174 	ld	hl,#_res_disable + 0
   09D9 36 00         [10] 2175 	ld	(hl), #0x00
                           2176 ;mainloop.h:66: no_ct = 0;
   09DB 21rC8r01      [10] 2177 	ld	hl,#_no_ct + 0
   09DE 36 00         [10] 2178 	ld	(hl), #0x00
                           2179 ;mainloop.h:105: half_life = 0;
   09E0 21rBAr01      [10] 2180 	ld	hl,#_half_life + 0
   09E3 36 00         [10] 2181 	ld	(hl), #0x00
                           2182 ;mainloop.h:106: frame_counter = 0;
   09E5 21rBBr01      [10] 2183 	ld	hl,#_frame_counter + 0
   09E8 36 00         [10] 2184 	ld	(hl), #0x00
                           2185 ;mainloop.h:107: olife = oammo = oobjs = okeys = 0xff;
   09EA 21rC3r01      [10] 2186 	ld	hl,#_okeys + 0
   09ED 36 FF         [10] 2187 	ld	(hl), #0xFF
   09EF 21rC4r01      [10] 2188 	ld	hl,#_oobjs + 0
   09F2 36 FF         [10] 2189 	ld	(hl), #0xFF
   09F4 21rC5r01      [10] 2190 	ld	hl,#_oammo + 0
   09F7 36 FF         [10] 2191 	ld	(hl), #0xFF
   09F9 21rC2r01      [10] 2192 	ld	hl,#_olife + 0
   09FC 36 FF         [10] 2193 	ld	(hl), #0xFF
                           2194 ;mainloop.h:108: okilled = 0xff;
   09FE 21rC6r01      [10] 2195 	ld	hl,#_okilled + 0
   0A01 36 FF         [10] 2196 	ld	(hl), #0xFF
                           2197 ;my/extra_inits.h:7: springs_on = (level == 1);
   0A03 3ArB6r01      [13] 2198 	ld	a,(#_level + 0)
   0A06 3D            [ 4] 2199 	dec	a
   0A07 20 04         [12] 2200 	jr	NZ,00120$
   0A09 3E 01         [ 7] 2201 	ld	a,#0x01
   0A0B 18 01         [12] 2202 	jr	00121$
   0A0D                    2203 00120$:
   0A0D AF            [ 4] 2204 	xor	a,a
   0A0E                    2205 00121$:
   0A0E 32rB3r02      [13] 2206 	ld	(#_springs_on + 0),a
   0A11 C9            [10] 2207 	ret
                           2208 ;mainloop.h:117: void prepare_scr (void) {
                           2209 ;	---------------------------------
                           2210 ; Function prepare_scr
                           2211 ; ---------------------------------
   0A12                    2212 _prepare_scr::
                           2213 ;mainloop.h:118: SG_displayOff ();
   0A12 21 40 01      [10] 2214 	ld	hl,#0x0140
   0A15 E5            [11] 2215 	push	hl
   0A16 CDr00r00      [17] 2216 	call	_SG_VDPturnOffFeature
   0A19 F1            [10] 2217 	pop	af
                           2218 ;mainloop.h:128: ft = 0;
   0A1A FD 21r7Cr00   [14] 2219 	ld	iy,#_ft
   0A1E FD 36 00 00   [19] 2220 	ld	0 (iy),#0x00
                           2221 ;mainloop.h:130: update_list [update_index] = 0xff;
   0A22 3Ar92r00      [13] 2222 	ld	a,(#_update_index + 0)
   0A25 C6r93         [ 7] 2223 	add	a, #<(_update_list)
   0A27 6F            [ 4] 2224 	ld	l, a
   0A28 3E 00         [ 7] 2225 	ld	a, #0x00
   0A2A CEs00         [ 7] 2226 	adc	a, #>(_update_list)
   0A2C 67            [ 4] 2227 	ld	h, a
   0A2D 36 FF         [10] 2228 	ld	(hl),#0xFF
                           2229 ;mainloop.h:131: SG_doUpdateList ();
   0A2F CDr00r00      [17] 2230 	call	_SG_doUpdateList
                           2231 ;mainloop.h:132: clear_update_list ();
   0A32 CDr00r00      [17] 2232 	call	_clear_update_list
                           2233 ;mainloop.h:141: enems_persistent_update ();
   0A35 CDr00r00      [17] 2234 	call	_enems_persistent_update
                           2235 ;mainloop.h:144: enems_load ();
   0A38 CDr00r00      [17] 2236 	call	_enems_load
                           2237 ;mainloop.h:145: hotspots_create ();	
   0A3B CDr75r02      [17] 2238 	call	_hotspots_create
                           2239 ;mainloop.h:162: chac_chacs_queue_write = chac_chacs_queue_read = 0;
   0A3E 21rACr02      [10] 2240 	ld	hl,#_chac_chacs_queue_read + 0
   0A41 36 00         [10] 2241 	ld	(hl), #0x00
   0A43 21rADr02      [10] 2242 	ld	hl,#_chac_chacs_queue_write + 0
   0A46 36 00         [10] 2243 	ld	(hl), #0x00
                           2244 ;mainloop.h:163: max_chac_chacs = 0;
   0A48 21r8Br02      [10] 2245 	ld	hl,#_max_chac_chacs + 0
   0A4B 36 00         [10] 2246 	ld	(hl), #0x00
                           2247 ;mainloop.h:172: draw_scr ();
   0A4D CDr00r00      [17] 2248 	call	_draw_scr
                           2249 ;mainloop.h:210: SG_initSprites ();
   0A50 CDr00r00      [17] 2250 	call	_SG_initSprites
                           2251 ;my/on_entering_screen.h:8: if (mode_no_resonators) {
   0A53 3ArB5r02      [13] 2252 	ld	a,(#_mode_no_resonators + 0)
   0A56 B7            [ 4] 2253 	or	a, a
   0A57 28 11         [12] 2254 	jr	Z,00104$
                           2255 ;my/on_entering_screen.h:9: res_disable = 1;
   0A59 21rAEr02      [10] 2256 	ld	hl,#_res_disable + 0
   0A5C 36 01         [10] 2257 	ld	(hl), #0x01
                           2258 ;my/on_entering_screen.h:10: if (hrt == HOTSPOT_TYPE_RESONATOR) hrt = 0;
   0A5E 3Ar7Ar00      [13] 2259 	ld	a,(#_hrt + 0)
   0A61 D6 04         [ 7] 2260 	sub	a, #0x04
   0A63 20 05         [12] 2261 	jr	NZ,00104$
   0A65 21r7Ar00      [10] 2262 	ld	hl,#_hrt + 0
   0A68 36 00         [10] 2263 	ld	(hl), #0x00
   0A6A                    2264 00104$:
                           2265 ;mainloop.h:227: gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
   0A6A 21r06r00      [10] 2266 	ld	hl,#_gpit + 0
   0A6D 36 03         [10] 2267 	ld	(hl), #0x03
   0A6F                    2268 00105$:
   0A6F 21r06r00      [10] 2269 	ld	hl,#_gpit + 0
   0A72 5E            [ 7] 2270 	ld	e, (hl)
   0A73 21r06r00      [10] 2271 	ld	hl, #_gpit+0
   0A76 35            [11] 2272 	dec	(hl)
   0A77 7B            [ 4] 2273 	ld	a,e
   0A78 B7            [ 4] 2274 	or	a, a
   0A79 28 1E         [12] 2275 	jr	Z,00107$
   0A7B 3Er40         [ 7] 2276 	ld	a,#<(_en_spr_id)
   0A7D 21r06r00      [10] 2277 	ld	hl,#_gpit
   0A80 86            [ 7] 2278 	add	a, (hl)
   0A81 5F            [ 4] 2279 	ld	e,a
   0A82 3Es02         [ 7] 2280 	ld	a,#>(_en_spr_id)
   0A84 CE 00         [ 7] 2281 	adc	a, #0x00
   0A86 57            [ 4] 2282 	ld	d,a
   0A87 FD 21r0Fr02   [14] 2283 	ld	iy,#_en_s
   0A8B ED 4Br06r00   [20] 2284 	ld	bc,(_gpit)
   0A8F 06 00         [ 7] 2285 	ld	b,#0x00
   0A91 FD 09         [15] 2286 	add	iy, bc
   0A93 FD 7E 00      [19] 2287 	ld	a, 0 (iy)
   0A96 12            [ 7] 2288 	ld	(de),a
   0A97 18 D6         [12] 2289 	jr	00105$
   0A99                    2290 00107$:
                           2291 ;mainloop.h:229: prx = px >> FIXBITS; pry = py >> FIXBITS;
   0A99 2Ar48r00      [16] 2292 	ld	hl,(_px)
   0A9C CB 2C         [ 8] 2293 	sra	h
   0A9E CB 1D         [ 8] 2294 	rr	l
   0AA0 CB 2C         [ 8] 2295 	sra	h
   0AA2 CB 1D         [ 8] 2296 	rr	l
   0AA4 CB 2C         [ 8] 2297 	sra	h
   0AA6 CB 1D         [ 8] 2298 	rr	l
   0AA8 CB 2C         [ 8] 2299 	sra	h
   0AAA CB 1D         [ 8] 2300 	rr	l
   0AAC CB 2C         [ 8] 2301 	sra	h
   0AAE CB 1D         [ 8] 2302 	rr	l
   0AB0 CB 2C         [ 8] 2303 	sra	h
   0AB2 CB 1D         [ 8] 2304 	rr	l
   0AB4 FD 21r50r00   [14] 2305 	ld	iy,#_prx
   0AB8 FD 75 00      [19] 2306 	ld	0 (iy),l
   0ABB 2Ar4Ar00      [16] 2307 	ld	hl,(_py)
   0ABE CB 2C         [ 8] 2308 	sra	h
   0AC0 CB 1D         [ 8] 2309 	rr	l
   0AC2 CB 2C         [ 8] 2310 	sra	h
   0AC4 CB 1D         [ 8] 2311 	rr	l
   0AC6 CB 2C         [ 8] 2312 	sra	h
   0AC8 CB 1D         [ 8] 2313 	rr	l
   0ACA CB 2C         [ 8] 2314 	sra	h
   0ACC CB 1D         [ 8] 2315 	rr	l
   0ACE CB 2C         [ 8] 2316 	sra	h
   0AD0 CB 1D         [ 8] 2317 	rr	l
   0AD2 CB 2C         [ 8] 2318 	sra	h
   0AD4 CB 1D         [ 8] 2319 	rr	l
   0AD6 FD 21r51r00   [14] 2320 	ld	iy,#_pry
   0ADA FD 75 00      [19] 2321 	ld	0 (iy),l
                           2322 ;mainloop.h:234: player_move ();
   0ADD CDr00r00      [17] 2323 	call	_player_move
                           2324 ;mainloop.h:235: enems_move ();
   0AE0 CDr00r00      [17] 2325 	call	_enems_move
                           2326 ;mainloop.h:237: if (hrt) hotspots_paint ();
   0AE3 3Ar7Ar00      [13] 2327 	ld	a,(#_hrt + 0)
   0AE6 B7            [ 4] 2328 	or	a, a
   0AE7 28 03         [12] 2329 	jr	Z,00109$
   0AE9 CDr38r02      [17] 2330 	call	_hotspots_paint
   0AEC                    2331 00109$:
                           2332 ;mainloop.h:252: hud_update ();
   0AEC CDrDEr02      [17] 2333 	call	_hud_update
                           2334 ;mainloop.h:253: SG_copySpritestoSAT ();
   0AEF CDr00r00      [17] 2335 	call	_SG_copySpritestoSAT
                           2336 ;mainloop.h:254: update_list [update_index] = 0xff;
   0AF2 3Ar92r00      [13] 2337 	ld	a,(#_update_index + 0)
   0AF5 C6r93         [ 7] 2338 	add	a, #<(_update_list)
   0AF7 6F            [ 4] 2339 	ld	l, a
   0AF8 3E 00         [ 7] 2340 	ld	a, #0x00
   0AFA CEs00         [ 7] 2341 	adc	a, #>(_update_list)
   0AFC 67            [ 4] 2342 	ld	h, a
   0AFD 36 FF         [10] 2343 	ld	(hl),#0xFF
                           2344 ;mainloop.h:255: SG_doUpdateList ();
   0AFF CDr00r00      [17] 2345 	call	_SG_doUpdateList
                           2346 ;mainloop.h:256: clear_update_list ();	
   0B02 CDr00r00      [17] 2347 	call	_clear_update_list
                           2348 ;mainloop.h:257: SG_displayOn ();
   0B05 21 40 01      [10] 2349 	ld	hl,#0x0140
   0B08 E5            [11] 2350 	push	hl
   0B09 CDr00r00      [17] 2351 	call	_SG_VDPturnOnFeature
   0B0C F1            [10] 2352 	pop	af
   0B0D C9            [10] 2353 	ret
                           2354 ;mainloop.h:260: void game_loop (void) {
                           2355 ;	---------------------------------
                           2356 ; Function game_loop
                           2357 ; ---------------------------------
   0B0E                    2358 _game_loop::
                           2359 ;mainloop.h:261: clear_update_list ();
   0B0E CDr00r00      [17] 2360 	call	_clear_update_list
                           2361 ;mainloop.h:263: on_pant = 99; ft = 1; fade_delay = 1;
   0B11 21rB9r01      [10] 2362 	ld	hl,#_on_pant + 0
   0B14 36 63         [10] 2363 	ld	(hl), #0x63
   0B16 21r7Cr00      [10] 2364 	ld	hl,#_ft + 0
   0B19 36 01         [10] 2365 	ld	(hl), #0x01
   0B1B 21rF4r00      [10] 2366 	ld	hl,#_fade_delay + 0
   0B1E 36 01         [10] 2367 	ld	(hl), #0x01
                           2368 ;mainloop.h:267: SG_displayOn ();
   0B20 21 40 01      [10] 2369 	ld	hl,#0x0140
   0B23 E5            [11] 2370 	push	hl
   0B24 CDr00r00      [17] 2371 	call	_SG_VDPturnOnFeature
   0B27 F1            [10] 2372 	pop	af
                           2373 ;mainloop.h:278: ntsc_frame = level_reset = warp_to_level = 0; 
   0B28 21rBFr01      [10] 2374 	ld	hl,#_warp_to_level + 0
   0B2B 36 00         [10] 2375 	ld	(hl), #0x00
   0B2D 21rC0r01      [10] 2376 	ld	hl,#_level_reset + 0
   0B30 36 00         [10] 2377 	ld	(hl), #0x00
   0B32 21r91r00      [10] 2378 	ld	hl,#_ntsc_frame + 0
   0B35 36 00         [10] 2379 	ld	(hl), #0x00
                           2380 ;mainloop.h:279: ticker = 50;
   0B37 21r1Dr00      [10] 2381 	ld	hl,#_ticker + 0
   0B3A 36 32         [10] 2382 	ld	(hl), #0x32
                           2383 ;mainloop.h:282: PSGPlay (l_music [level]);
   0B3C FD 21rB6r01   [14] 2384 	ld	iy,#_level
   0B40 FD 6E 00      [19] 2385 	ld	l,0 (iy)
   0B43 26 00         [ 7] 2386 	ld	h,#0x00
   0B45 29            [11] 2387 	add	hl, hl
   0B46 11r32r02      [10] 2388 	ld	de,#_l_music
   0B49 19            [11] 2389 	add	hl,de
   0B4A 5E            [ 7] 2390 	ld	e,(hl)
   0B4B 23            [ 6] 2391 	inc	hl
   0B4C 56            [ 7] 2392 	ld	d,(hl)
   0B4D D5            [11] 2393 	push	de
   0B4E CDr00r00      [17] 2394 	call	_PSGPlay
   0B51 F1            [10] 2395 	pop	af
                           2396 ;mainloop.h:287: while (1) {
   0B52                    2397 00169$:
                           2398 ;mainloop.h:294: hud_update ();
   0B52 CDrDEr02      [17] 2399 	call	_hud_update
                           2400 ;mainloop.h:298: if (pkill) player_kill ();
   0B55 3Ar69r00      [13] 2401 	ld	a,(#_pkill + 0)
   0B58 B7            [ 4] 2402 	or	a, a
   0B59 28 03         [12] 2403 	jr	Z,00102$
   0B5B CDr00r00      [17] 2404 	call	_player_kill
   0B5E                    2405 00102$:
                           2406 ;mainloop.h:299: if (game_over || level_reset) break;			
   0B5E 3ArBEr01      [13] 2407 	ld	a,(#_game_over + 0)
   0B61 B7            [ 4] 2408 	or	a, a
   0B62 C2r21r0E      [10] 2409 	jp	NZ,00170$
   0B65 3ArC0r01      [13] 2410 	ld	a,(#_level_reset + 0)
   0B68 B7            [ 4] 2411 	or	a, a
   0B69 C2r21r0E      [10] 2412 	jp	NZ,00170$
                           2413 ;mainloop.h:305: flick_override = 0;
   0B6C 21rC1r01      [10] 2414 	ld	hl,#_flick_override + 0
   0B6F 36 00         [10] 2415 	ld	(hl), #0x00
                           2416 ;mainloop.h:308: flickscreen_do_horizontal ();
   0B71 CDr2Er07      [17] 2417 	call	_flickscreen_do_horizontal
                           2418 ;mainloop.h:309: flickscreen_do_vertical ();
   0B74 CDr79r07      [17] 2419 	call	_flickscreen_do_vertical
                           2420 ;mainloop.h:315: if (on_pant != n_pant) {
   0B77 3ArB9r01      [13] 2421 	ld	a,(#_on_pant + 0)
   0B7A FD 21rB8r01   [14] 2422 	ld	iy,#_n_pant
   0B7E FD 96 00      [19] 2423 	sub	a, 0 (iy)
   0B81 28 09         [12] 2424 	jr	Z,00109$
                           2425 ;mainloop.h:316: prepare_scr ();
   0B83 CDr12r0A      [17] 2426 	call	_prepare_scr
                           2427 ;mainloop.h:317: on_pant = n_pant;
   0B86 3ArB8r01      [13] 2428 	ld	a,(#_n_pant + 0)
   0B89 32rB9r01      [13] 2429 	ld	(#_on_pant + 0),a
   0B8C                    2430 00109$:
                           2431 ;mainloop.h:336: SG_waitForVBlank ();
   0B8C CDr00r00      [17] 2432 	call	_SG_waitForVBlank
                           2433 ;mainloop.h:337: SG_copySpritestoSAT ();
   0B8F CDr00r00      [17] 2434 	call	_SG_copySpritestoSAT
                           2435 ;mainloop.h:338: update_list [update_index] = 0xff;
   0B92 3Er93         [ 7] 2436 	ld	a,#<(_update_list)
   0B94 21r92r00      [10] 2437 	ld	hl,#_update_index
   0B97 86            [ 7] 2438 	add	a, (hl)
   0B98 6F            [ 4] 2439 	ld	l, a
   0B99 3Es00         [ 7] 2440 	ld	a, #>(_update_list)
   0B9B CE 00         [ 7] 2441 	adc	a, #0x00
   0B9D 67            [ 4] 2442 	ld	h, a
   0B9E 36 FF         [10] 2443 	ld	(hl),#0xFF
                           2444 ;mainloop.h:339: SG_doUpdateList ();
   0BA0 CDr00r00      [17] 2445 	call	_SG_doUpdateList
                           2446 ;mainloop.h:340: clear_update_list ();
   0BA3 CDr00r00      [17] 2447 	call	_clear_update_list
                           2448 ;mainloop.h:344: pad_read ();
   0BA6 CDr00r00      [17] 2449 	call	_pad_read
                           2450 ;mainloop.h:345: a_button = (pad_this_frame & PAD_A);
   0BA9 3Ar05r00      [13] 2451 	ld	a,(#_pad_this_frame + 0)
   0BAC E6 20         [ 7] 2452 	and	a, #0x20
   0BAE 32r57r00      [13] 2453 	ld	(#_a_button + 0),a
                           2454 ;mainloop.h:346: b_button = (pad_this_frame & PAD_B);
   0BB1 3Ar05r00      [13] 2455 	ld	a,(#_pad_this_frame + 0)
   0BB4 E6 10         [ 7] 2456 	and	a, #0x10
   0BB6 32r58r00      [13] 2457 	ld	(#_b_button + 0),a
                           2458 ;mainloop.h:350: ntsc_frame ++; if (ntsc_frame == 6) ntsc_frame = 0;
   0BB9 21r91r00      [10] 2459 	ld	hl, #_ntsc_frame+0
   0BBC 34            [11] 2460 	inc	(hl)
   0BBD 3Ar91r00      [13] 2461 	ld	a,(#_ntsc_frame + 0)
   0BC0 D6 06         [ 7] 2462 	sub	a, #0x06
   0BC2 20 05         [12] 2463 	jr	NZ,00111$
   0BC4 21r91r00      [10] 2464 	ld	hl,#_ntsc_frame + 0
   0BC7 36 00         [10] 2465 	ld	(hl), #0x00
   0BC9                    2466 00111$:
                           2467 ;mainloop.h:352: if (paused == 0 && (ntsc == 0 || ntsc_frame)) {
   0BC9 3ArBCr01      [13] 2468 	ld	a,(#_paused + 0)
   0BCC B7            [ 4] 2469 	or	a, a
   0BCD C2r02r0E      [10] 2470 	jp	NZ,00161$
   0BD0 3Ar90r00      [13] 2471 	ld	a,(#_ntsc + 0)
   0BD3 B7            [ 4] 2472 	or	a, a
   0BD4 28 07         [12] 2473 	jr	Z,00160$
   0BD6 3Ar91r00      [13] 2474 	ld	a,(#_ntsc_frame + 0)
   0BD9 B7            [ 4] 2475 	or	a, a
   0BDA CAr02r0E      [10] 2476 	jp	Z,00161$
   0BDD                    2477 00160$:
                           2478 ;mainloop.h:353: SG_initSprites ();
   0BDD CDr00r00      [17] 2479 	call	_SG_initSprites
                           2480 ;mainloop.h:356: if (ticker) -- ticker; else ticker = 50;
   0BE0 3Ar1Dr00      [13] 2481 	ld	a,(#_ticker + 0)
   0BE3 B7            [ 4] 2482 	or	a, a
   0BE4 28 09         [12] 2483 	jr	Z,00113$
   0BE6 FD 21r1Dr00   [14] 2484 	ld	iy,#_ticker
   0BEA FD 35 00      [23] 2485 	dec	0 (iy)
   0BED 18 08         [12] 2486 	jr	00114$
   0BEF                    2487 00113$:
   0BEF FD 21r1Dr00   [14] 2488 	ld	iy,#_ticker
   0BF3 FD 36 00 32   [19] 2489 	ld	0 (iy),#0x32
   0BF7                    2490 00114$:
                           2491 ;mainloop.h:357: half_life ^= 1;
   0BF7 3ArBAr01      [13] 2492 	ld	a,(#_half_life + 0)
   0BFA EE 01         [ 7] 2493 	xor	a, #0x01
   0BFC FD 21rBAr01   [14] 2494 	ld	iy,#_half_life
   0C00 FD 77 00      [19] 2495 	ld	0 (iy),a
                           2496 ;mainloop.h:358: ++ frame_counter;
   0C03 FD 21rBBr01   [14] 2497 	ld	iy,#_frame_counter
   0C07 FD 34 00      [23] 2498 	inc	0 (iy)
                           2499 ;mainloop/hotspots.h:6: if (hrt) {
   0C0A 3Ar7Ar00      [13] 2500 	ld	a,(#_hrt + 0)
   0C0D B7            [ 4] 2501 	or	a, a
   0C0E CAr0Ar0D      [10] 2502 	jp	Z,00131$
                           2503 ;mainloop/hotspots.h:7: if (collide_in (prx + 4, pry + 8, hrx, hry)) {
   0C11 3Ar51r00      [13] 2504 	ld	a,(#_pry + 0)
   0C14 C6 08         [ 7] 2505 	add	a, #0x08
   0C16 5F            [ 4] 2506 	ld	e,a
   0C17 21r50r00      [10] 2507 	ld	hl,#_prx + 0
   0C1A 56            [ 7] 2508 	ld	d, (hl)
   0C1B 14            [ 4] 2509 	inc	d
   0C1C 14            [ 4] 2510 	inc	d
   0C1D 14            [ 4] 2511 	inc	d
   0C1E 14            [ 4] 2512 	inc	d
   0C1F 3Ar79r00      [13] 2513 	ld	a,(_hry)
   0C22 F5            [11] 2514 	push	af
   0C23 33            [ 6] 2515 	inc	sp
   0C24 3Ar78r00      [13] 2516 	ld	a,(_hrx)
   0C27 F5            [11] 2517 	push	af
   0C28 33            [ 6] 2518 	inc	sp
   0C29 7B            [ 4] 2519 	ld	a,e
   0C2A F5            [11] 2520 	push	af
   0C2B 33            [ 6] 2521 	inc	sp
   0C2C D5            [11] 2522 	push	de
   0C2D 33            [ 6] 2523 	inc	sp
   0C2E CDr00r00      [17] 2524 	call	_collide_in
   0C31 F1            [10] 2525 	pop	af
   0C32 F1            [10] 2526 	pop	af
   0C33 7D            [ 4] 2527 	ld	a,l
   0C34 B7            [ 4] 2528 	or	a, a
   0C35 CAr0Ar0D      [10] 2529 	jp	Z,00131$
                           2530 ;mainloop/hotspots.h:9: if (hrt == HOTSPOT_TYPE_RESONATOR) {
   0C38 3Ar7Ar00      [13] 2531 	ld	a,(#_hrt + 0)
   0C3B D6 04         [ 7] 2532 	sub	a, #0x04
   0C3D 20 4A         [12] 2533 	jr	NZ,00126$
                           2534 ;mainloop/hotspots.h:10: if (pvy > 0 && pry < hry) {
   0C3F AF            [ 4] 2535 	xor	a, a
   0C40 FD 21r4Er00   [14] 2536 	ld	iy,#_pvy
   0C44 FD BE 00      [19] 2537 	cp	a, 0 (iy)
   0C47 FD 21r4Er00   [14] 2538 	ld	iy,#_pvy
   0C4B FD 9E 01      [19] 2539 	sbc	a, 1 (iy)
   0C4E E2r53r0C      [10] 2540 	jp	PO, 00315$
   0C51 EE 80         [ 7] 2541 	xor	a, #0x80
   0C53                    2542 00315$:
   0C53 F2r0Ar0D      [10] 2543 	jp	P,00131$
   0C56 21r79r00      [10] 2544 	ld	hl,#_hry
   0C59 3Ar51r00      [13] 2545 	ld	a,(#_pry + 0)
   0C5C 96            [ 7] 2546 	sub	a, (hl)
   0C5D D2r0Ar0D      [10] 2547 	jp	NC,00131$
                           2548 ;mainloop/hotspots.h:11: if (res_on == 0) {
   0C60 3ArAFr02      [13] 2549 	ld	a,(#_res_on + 0)
   0C63 B7            [ 4] 2550 	or	a, a
   0C64 C2r0Ar0D      [10] 2551 	jp	NZ,00131$
                           2552 ;mainloop/hotspots.h:12: res_on = 1; res_ct = 9; res_subct = 50;
   0C67 21rAFr02      [10] 2553 	ld	hl,#_res_on + 0
   0C6A 36 01         [10] 2554 	ld	(hl), #0x01
   0C6C 21rB0r02      [10] 2555 	ld	hl,#_res_ct + 0
   0C6F 36 09         [10] 2556 	ld	(hl), #0x09
   0C71 21rB1r02      [10] 2557 	ld	hl,#_res_subct + 0
   0C74 36 32         [10] 2558 	ld	(hl), #0x32
                           2559 ;mainloop/hotspots.h:13: jump_start ();
   0C76 CDr00r00      [17] 2560 	call	_jump_start
                           2561 ;mainloop/hotspots.h:23: PSGSFXPlay (SFX_BREAKH, 2);
   0C79 11r00r00      [10] 2562 	ld	de,#_s_13_breakh3_psg
   0C7C 3E 02         [ 7] 2563 	ld	a,#0x02
   0C7E F5            [11] 2564 	push	af
   0C7F 33            [ 6] 2565 	inc	sp
   0C80 D5            [11] 2566 	push	de
   0C81 CDr00r00      [17] 2567 	call	_PSGSFXPlay
   0C84 F1            [10] 2568 	pop	af
   0C85 33            [ 6] 2569 	inc	sp
   0C86 C3r0Ar0D      [10] 2570 	jp	00131$
   0C89                    2571 00126$:
                           2572 ;mainloop/hotspots.h:128: gp_gen = 0; rdm = 1;
   0C89 21 00 00      [10] 2573 	ld	hl,#0x0000
   0C8C 22r0Ar00      [16] 2574 	ld	(_gp_gen),hl
   0C8F FD 21r1Ar00   [14] 2575 	ld	iy,#_rdm
   0C93 FD 36 00 01   [19] 2576 	ld	0 (iy),#0x01
                           2577 ;mainloop/hotspots.h:129: switch (hrt) {
   0C97 3Ar7Ar00      [13] 2578 	ld	a,(#_hrt + 0)
   0C9A FE 02         [ 7] 2579 	cp	a,#0x02
   0C9C 28 06         [12] 2580 	jr	Z,00120$
   0C9E D6 03         [ 7] 2581 	sub	a, #0x03
   0CA0 28 1B         [12] 2582 	jr	Z,00121$
   0CA2 18 38         [12] 2583 	jr	00122$
                           2584 ;mainloop/hotspots.h:151: case HOTSPOT_TYPE_KEYS:
   0CA4                    2585 00120$:
                           2586 ;mainloop/hotspots.h:152: ++ pkeys;
   0CA4 FD 21r6Er00   [14] 2587 	ld	iy,#_pkeys
   0CA8 FD 34 00      [23] 2588 	inc	0 (iy)
                           2589 ;mainloop/hotspots.h:153: gp_gen = SFX_OBJECT;
   0CAB FD 21r0Ar00   [14] 2590 	ld	iy,#_gp_gen
   0CAF FD 36 00r00   [19] 2591 	ld	0 (iy),#<(_s_02_object2_psg)
   0CB3 FD 21r0Ar00   [14] 2592 	ld	iy,#_gp_gen
   0CB7 FD 36 01s00   [19] 2593 	ld	1 (iy),#>(_s_02_object2_psg)
                           2594 ;mainloop/hotspots.h:154: break;
   0CBB 18 1F         [12] 2595 	jr	00122$
                           2596 ;mainloop/hotspots.h:156: case HOTSPOT_TYPE_REFILL:
   0CBD                    2597 00121$:
                           2598 ;mainloop/hotspots.h:157: plife += PLAYER_REFILL;
   0CBD FD 21r6Dr00   [14] 2599 	ld	iy,#_plife
   0CC1 FD 34 00      [23] 2600 	inc	0 (iy)
                           2601 ;mainloop/hotspots.h:161: gp_gen = SFX_USE;
   0CC4 FD 21r0Ar00   [14] 2602 	ld	iy,#_gp_gen
   0CC8 FD 36 00r00   [19] 2603 	ld	0 (iy),#<(_s_03_use2_psg)
   0CCC FD 21r0Ar00   [14] 2604 	ld	iy,#_gp_gen
   0CD0 FD 36 01s00   [19] 2605 	ld	1 (iy),#>(_s_03_use2_psg)
                           2606 ;mainloop/hotspots.h:162: rdm = 2;
   0CD4 FD 21r1Ar00   [14] 2607 	ld	iy,#_rdm
   0CD8 FD 36 00 02   [19] 2608 	ld	0 (iy),#0x02
                           2609 ;mainloop/hotspots.h:192: }
   0CDC                    2610 00122$:
                           2611 ;mainloop/hotspots.h:193: if (gp_gen) {
   0CDC 3Ar0Br00      [13] 2612 	ld	a,(#_gp_gen + 1)
   0CDF FD 21r0Ar00   [14] 2613 	ld	iy,#_gp_gen
   0CE3 FD B6 00      [19] 2614 	or	a,0 (iy)
   0CE6 28 22         [12] 2615 	jr	Z,00131$
                           2616 ;mainloop/hotspots.h:194: PSGSFXPlay (gp_gen, rdm);
   0CE8 ED 5Br0Ar00   [20] 2617 	ld	de,(_gp_gen)
   0CEC 3Ar1Ar00      [13] 2618 	ld	a,(_rdm)
   0CEF F5            [11] 2619 	push	af
   0CF0 33            [ 6] 2620 	inc	sp
   0CF1 D5            [11] 2621 	push	de
   0CF2 CDr00r00      [17] 2622 	call	_PSGSFXPlay
   0CF5 F1            [10] 2623 	pop	af
   0CF6 33            [ 6] 2624 	inc	sp
                           2625 ;mainloop/hotspots.h:195: hrt = 0;
   0CF7 21r7Ar00      [10] 2626 	ld	hl,#_hrt + 0
   0CFA 36 00         [10] 2627 	ld	(hl), #0x00
                           2628 ;mainloop/hotspots.h:196: hact [n_pant] = 0;
   0CFC 3ErCA         [ 7] 2629 	ld	a,#<(_hact)
   0CFE 21rB8r01      [10] 2630 	ld	hl,#_n_pant
   0D01 86            [ 7] 2631 	add	a, (hl)
   0D02 5F            [ 4] 2632 	ld	e,a
   0D03 3Es01         [ 7] 2633 	ld	a,#>(_hact)
   0D05 CE 00         [ 7] 2634 	adc	a, #0x00
   0D07 57            [ 4] 2635 	ld	d,a
   0D08 AF            [ 4] 2636 	xor	a, a
   0D09 12            [ 7] 2637 	ld	(de),a
   0D0A                    2638 00131$:
                           2639 ;mainloop.h:378: if (!warp_to_level) {
   0D0A 3ArBFr01      [13] 2640 	ld	a,(#_warp_to_level + 0)
   0D0D B7            [ 4] 2641 	or	a, a
   0D0E 20 03         [12] 2642 	jr	NZ,00133$
                           2643 ;mainloop.h:379: player_move ();
   0D10 CDr00r00      [17] 2644 	call	_player_move
   0D13                    2645 00133$:
                           2646 ;my/extra_checks.h:14: if (c_max_enems == pkilled) {
   0D13 3ArB7r01      [13] 2647 	ld	a,(#_c_max_enems + 0)
   0D16 FD 21r71r00   [14] 2648 	ld	iy,#_pkilled
   0D1A FD 96 00      [19] 2649 	sub	a, 0 (iy)
   0D1D 20 17         [12] 2650 	jr	NZ,00139$
                           2651 ;my/extra_checks.h:16: en_cttouched [0] == 0 &&
   0D1F 3Ar1Br02      [13] 2652 	ld	a, (#_en_cttouched + 0)
   0D22 B7            [ 4] 2653 	or	a, a
   0D23 20 11         [12] 2654 	jr	NZ,00139$
                           2655 ;my/extra_checks.h:17: en_cttouched [1] == 0 &&
   0D25 3Ar1Cr02      [13] 2656 	ld	a, (#_en_cttouched + 1)
   0D28 B7            [ 4] 2657 	or	a, a
   0D29 20 0B         [12] 2658 	jr	NZ,00139$
                           2659 ;my/extra_checks.h:18: en_cttouched [2] == 0
   0D2B 3Ar1Dr02      [13] 2660 	ld	a, (#_en_cttouched + 2)
   0D2E B7            [ 4] 2661 	or	a, a
   0D2F 20 05         [12] 2662 	jr	NZ,00139$
                           2663 ;my/extra_checks.h:19: ) win_level = 1;
   0D31 21rBDr01      [10] 2664 	ld	hl,#_win_level + 0
   0D34 36 01         [10] 2665 	ld	(hl), #0x01
   0D36                    2666 00139$:
                           2667 ;mainloop/win_level_condition.h:10: win_level
   0D36 3ArBDr01      [13] 2668 	ld	a,(#_win_level + 0)
   0D39 B7            [ 4] 2669 	or	a, a
   0D3A 28 0E         [12] 2670 	jr	Z,00141$
                           2671 ;mainloop/win_level_condition.h:23: PSGStop ();
   0D3C CDr00r00      [17] 2672 	call	_PSGStop
                           2673 ;mainloop/win_level_condition.h:24: delay (50);
   0D3F 3E 32         [ 7] 2674 	ld	a,#0x32
   0D41 F5            [11] 2675 	push	af
   0D42 33            [ 6] 2676 	inc	sp
   0D43 CDr00r00      [17] 2677 	call	_delay
   0D46 33            [ 6] 2678 	inc	sp
                           2679 ;mainloop/win_level_condition.h:25: break;
   0D47 C3r21r0E      [10] 2680 	jp	00170$
   0D4A                    2681 00141$:
                           2682 ;mainloop.h:416: cur_stp = SG_getStp (); 
   0D4A CDr00r00      [17] 2683 	call	_SG_getStp
   0D4D 22r25r00      [16] 2684 	ld	(_cur_stp),hl
                           2685 ;mainloop.h:417: if (!warp_to_level)	player_render ();
   0D50 3ArBFr01      [13] 2686 	ld	a,(#_warp_to_level + 0)
   0D53 B7            [ 4] 2687 	or	a, a
   0D54 20 03         [12] 2688 	jr	NZ,00143$
   0D56 CDr00r00      [17] 2689 	call	_player_render
   0D59                    2690 00143$:
                           2691 ;mainloop.h:421: enems_move ();
   0D59 CDr00r00      [17] 2692 	call	_enems_move
                           2693 ;mainloop.h:425: if (warp_to_level) {
   0D5C 3ArBFr01      [13] 2694 	ld	a,(#_warp_to_level + 0)
   0D5F B7            [ 4] 2695 	or	a, a
   0D60 28 09         [12] 2696 	jr	Z,00145$
                           2697 ;mainloop.h:426: update_cycle (); PSGStop (); break;
   0D62 CDr00r00      [17] 2698 	call	_update_cycle
   0D65 CDr00r00      [17] 2699 	call	_PSGStop
   0D68 C3r21r0E      [10] 2700 	jp	00170$
   0D6B                    2701 00145$:
                           2702 ;mainloop/resonators.h:5: if (res_on) {
   0D6B 3ArAFr02      [13] 2703 	ld	a,(#_res_on + 0)
   0D6E B7            [ 4] 2704 	or	a, a
   0D6F 28 62         [12] 2705 	jr	Z,00155$
                           2706 ;mainloop/resonators.h:7: gp_addr = ((RESONATOR_COUNTER_Y << 5) | RESONATOR_COUNTER_X) + PNTADDRESS;
   0D71 21 3D 18      [10] 2707 	ld	hl,#0x183D
   0D74 22r10r00      [16] 2708 	ld	(_gp_addr),hl
                           2709 ;mainloop/resonators.h:8: _n = 16 + res_ct; 
   0D77 21r02r00      [10] 2710 	ld	hl,#__n
   0D7A 3ArB0r02      [13] 2711 	ld	a,(#_res_ct + 0)
   0D7D C6 10         [ 7] 2712 	add	a, #0x10
   0D7F 77            [ 7] 2713 	ld	(hl),a
                           2714 ;mainloop/resonators.h:9: ul_putc ();
   0D80 CDr00r00      [17] 2715 	call	_ul_putc
                           2716 ;mainloop/resonators.h:12: if (res_subct) -- res_subct; else {
   0D83 3ArB1r02      [13] 2717 	ld	a,(#_res_subct + 0)
   0D86 B7            [ 4] 2718 	or	a, a
   0D87 28 09         [12] 2719 	jr	Z,00152$
   0D89 FD 21rB1r02   [14] 2720 	ld	iy,#_res_subct
   0D8D FD 35 00      [23] 2721 	dec	0 (iy)
   0D90 18 41         [12] 2722 	jr	00155$
   0D92                    2723 00152$:
                           2724 ;mainloop/resonators.h:13: res_subct = 50;
   0D92 FD 21rB1r02   [14] 2725 	ld	iy,#_res_subct
   0D96 FD 36 00 32   [19] 2726 	ld	0 (iy),#0x32
                           2727 ;mainloop/resonators.h:14: if (res_ct) { 
   0D9A 3ArB0r02      [13] 2728 	ld	a,(#_res_ct + 0)
   0D9D B7            [ 4] 2729 	or	a, a
   0D9E 28 21         [12] 2730 	jr	Z,00149$
                           2731 ;mainloop/resonators.h:15: -- res_ct; 
   0DA0 FD 21rB0r02   [14] 2732 	ld	iy,#_res_ct
   0DA4 FD 35 00      [23] 2733 	dec	0 (iy)
                           2734 ;mainloop/resonators.h:16: if (res_ct <= 5) PSGSFXPlay (SFX_COUNT, 1);
   0DA7 3E 05         [ 7] 2735 	ld	a,#0x05
   0DA9 FD 21rB0r02   [14] 2736 	ld	iy,#_res_ct
   0DAD FD 96 00      [19] 2737 	sub	a, 0 (iy)
   0DB0 38 21         [12] 2738 	jr	C,00155$
   0DB2 11r00r00      [10] 2739 	ld	de,#_s_12_count2_psg
   0DB5 3E 01         [ 7] 2740 	ld	a,#0x01
   0DB7 F5            [11] 2741 	push	af
   0DB8 33            [ 6] 2742 	inc	sp
   0DB9 D5            [11] 2743 	push	de
   0DBA CDr00r00      [17] 2744 	call	_PSGSFXPlay
   0DBD F1            [10] 2745 	pop	af
   0DBE 33            [ 6] 2746 	inc	sp
   0DBF 18 12         [12] 2747 	jr	00155$
   0DC1                    2748 00149$:
                           2749 ;mainloop/resonators.h:18: res_on = 0;
   0DC1 21rAFr02      [10] 2750 	ld	hl,#_res_on + 0
   0DC4 36 00         [10] 2751 	ld	(hl), #0x00
                           2752 ;mainloop/resonators.h:19: PSGSFXPlay (SFX_SPRING, 1); 
   0DC6 11r00r00      [10] 2753 	ld	de,#_s_11_spring2_psg
   0DC9 3E 01         [ 7] 2754 	ld	a,#0x01
   0DCB F5            [11] 2755 	push	af
   0DCC 33            [ 6] 2756 	inc	sp
   0DCD D5            [11] 2757 	push	de
   0DCE CDr00r00      [17] 2758 	call	_PSGSFXPlay
   0DD1 F1            [10] 2759 	pop	af
   0DD2 33            [ 6] 2760 	inc	sp
   0DD3                    2761 00155$:
                           2762 ;mainloop.h:437: if (hrt) hotspots_paint ();
   0DD3 3Ar7Ar00      [13] 2763 	ld	a,(#_hrt + 0)
   0DD6 B7            [ 4] 2764 	or	a, a
   0DD7 28 03         [12] 2765 	jr	Z,00157$
   0DD9 CDr38r02      [17] 2766 	call	_hotspots_paint
   0DDC                    2767 00157$:
                           2768 ;mainloop/no.h:5: if (no_ct) {
   0DDC 3ArC8r01      [13] 2769 	ld	a,(#_no_ct + 0)
   0DDF B7            [ 4] 2770 	or	a, a
   0DE0 28 1D         [12] 2771 	jr	Z,00159$
                           2772 ;mainloop/no.h:6: -- no_ct;
   0DE2 FD 21rC8r01   [14] 2773 	ld	iy,#_no_ct
   0DE6 FD 35 00      [23] 2774 	dec	0 (iy)
                           2775 ;mainloop/no.h:9: NO_METASPRITE
   0DE9 11r00r00      [10] 2776 	ld	de,#_ss_it_06
                           2777 ;mainloop/no.h:8: prx + NO_OFFS_X, pry + NO_OFFS_Y + SPRITE_ADJUST,
   0DEC 3Ar51r00      [13] 2778 	ld	a,(#_pry + 0)
   0DEF C6 E3         [ 7] 2779 	add	a, #0xE3
   0DF1 67            [ 4] 2780 	ld	h,a
   0DF2 D5            [11] 2781 	push	de
   0DF3 E5            [11] 2782 	push	hl
   0DF4 33            [ 6] 2783 	inc	sp
   0DF5 3Ar50r00      [13] 2784 	ld	a,(_prx)
   0DF8 F5            [11] 2785 	push	af
   0DF9 33            [ 6] 2786 	inc	sp
   0DFA CDr00r00      [17] 2787 	call	_SG_addMetaSprite1x1
   0DFD F1            [10] 2788 	pop	af
   0DFE F1            [10] 2789 	pop	af
   0DFF                    2790 00159$:
                           2791 ;mainloop.h:466: chac_chacs_do ();
   0DFF CDr00r00      [17] 2792 	call	_chac_chacs_do
   0E02                    2793 00161$:
                           2794 ;mainloop/cheat.h:5: if ((pad0 & (PAD_B|PAD_SELECT|PAD_UP)) == (PAD_B|PAD_SELECT|PAD_UP)) break;
   0E02 3Ar04r00      [13] 2795 	ld	a,(#_pad0 + 0)
   0E05 E6 31         [ 7] 2796 	and	a, #0x31
   0E07 D6 31         [ 7] 2797 	sub	a, #0x31
   0E09 28 16         [12] 2798 	jr	Z,00170$
   0E0B CDr00r00      [17] 2799 	call	_SG_queryPauseRequested
   0E0E CB 45         [ 8] 2800 	bit	0,l
   0E10 CAr52r0B      [10] 2801 	jp	Z,00169$
                           2802 ;mainloop/pause.h:6: SG_resetPauseRequest ();
   0E13 CDr00r00      [17] 2803 	call	_SG_resetPauseRequest
                           2804 ;mainloop/pause.h:7: paused ^= 1;
   0E16 3ArBCr01      [13] 2805 	ld	a,(#_paused + 0)
   0E19 EE 01         [ 7] 2806 	xor	a, #0x01
   0E1B 32rBCr01      [13] 2807 	ld	(#_paused + 0),a
   0E1E C3r52r0B      [10] 2808 	jp	00169$
   0E21                    2809 00170$:
                           2810 ;mainloop.h:481: PSGStop ();
   0E21 CDr00r00      [17] 2811 	call	_PSGStop
                           2812 ;mainloop.h:482: PSGSFXStop ();
   0E24 CDr00r00      [17] 2813 	call	_PSGSFXStop
                           2814 ;mainloop.h:483: SG_displayOff ();
   0E27 21 40 01      [10] 2815 	ld	hl,#0x0140
   0E2A E5            [11] 2816 	push	hl
   0E2B CDr00r00      [17] 2817 	call	_SG_VDPturnOffFeature
   0E2E F1            [10] 2818 	pop	af
                           2819 ;mainloop.h:484: SG_initSprites ();
   0E2F CDr00r00      [17] 2820 	call	_SG_initSprites
                           2821 ;mainloop.h:485: SG_copySpritestoSAT ();	
   0E32 C3r00r00      [10] 2822 	jp  _SG_copySpritestoSAT
                           2823 ;game.c:107: void main(void) {
                           2824 ;	---------------------------------
                           2825 ; Function main
                           2826 ; ---------------------------------
   0E35                    2827 _main::
                           2828 ;game.c:108: SG_displayOff ();
   0E35 21 40 01      [10] 2829 	ld	hl,#0x0140
   0E38 E5            [11] 2830 	push	hl
   0E39 CDr00r00      [17] 2831 	call	_SG_VDPturnOffFeature
                           2832 ;game.c:109: SG_setSpriteMode (SG_SPRITEMODE_LARGE);
   0E3C 26 01         [ 7] 2833 	ld	h,#0x01
   0E3E E3            [19] 2834 	ex	(sp),hl
   0E3F 33            [ 6] 2835 	inc	sp
   0E40 CDr00r00      [17] 2836 	call	_SG_setSpriteMode
   0E43 33            [ 6] 2837 	inc	sp
                           2838 ;game.c:110: SG_setUpdateList (update_list);
   0E44 21r93r00      [10] 2839 	ld	hl,#_update_list
   0E47 E5            [11] 2840 	push	hl
   0E48 CDr00r00      [17] 2841 	call	_SG_setUpdateList
   0E4B F1            [10] 2842 	pop	af
                           2843 ;game.c:111: first_game = 1;
   0E4C 21rB5r01      [10] 2844 	ld	hl,#_first_game + 0
   0E4F 36 01         [10] 2845 	ld	(hl), #0x01
                           2846 ;game.c:116: ntsc = 1;
   0E51 21r90r00      [10] 2847 	ld	hl,#_ntsc + 0
   0E54 36 01         [10] 2848 	ld	(hl), #0x01
                           2849 ;game.c:120: unpack_bg_patterns (tsfont_patterns_c, tsfont_colours_c, 0, 7);
   0E56 11r00r00      [10] 2850 	ld	de,#_tsfont_patterns_c
   0E59 3E 07         [ 7] 2851 	ld	a,#0x07
   0E5B F5            [11] 2852 	push	af
   0E5C 33            [ 6] 2853 	inc	sp
   0E5D 21 00 00      [10] 2854 	ld	hl,#0x0000
   0E60 E5            [11] 2855 	push	hl
   0E61 21r00r00      [10] 2856 	ld	hl,#_tsfont_colours_c
   0E64 E5            [11] 2857 	push	hl
   0E65 D5            [11] 2858 	push	de
   0E66 CDr00r00      [17] 2859 	call	_unpack_bg_patterns
   0E69 21 07 00      [10] 2860 	ld	hl,#7
   0E6C 39            [11] 2861 	add	hl,sp
   0E6D F9            [ 6] 2862 	ld	sp,hl
                           2863 ;game.c:122: credits ();
   0E6E CDr2Br06      [17] 2864 	call	_credits
                           2865 ;game.c:125: aPLib_depack_VRAM (SGT_BASE, ss_fixed_patterns_c);
   0E71 21r00r00      [10] 2866 	ld	hl,#_ss_fixed_patterns_c
   0E74 E5            [11] 2867 	push	hl
   0E75 21 00 38      [10] 2868 	ld	hl,#0x3800
   0E78 E5            [11] 2869 	push	hl
   0E79 CDr00r00      [17] 2870 	call	_aPLib_depack_VRAM
   0E7C F1            [10] 2871 	pop	af
   0E7D F1            [10] 2872 	pop	af
                           2873 ;game.c:127: mode_no_resonators = 0;
   0E7E 21rB5r02      [10] 2874 	ld	hl,#_mode_no_resonators + 0
   0E81 36 00         [10] 2875 	ld	(hl), #0x00
                           2876 ;game.c:128: while (1) {	
   0E83                    2877 00110$:
                           2878 ;game.c:129: title ();
   0E83 CDrABr03      [17] 2879 	call	_title
                           2880 ;game.c:131: level = 0;
   0E86 21rB6r01      [10] 2881 	ld	hl,#_level + 0
   0E89 36 00         [10] 2882 	ld	(hl), #0x00
                           2883 ;game.c:132: plife = PLAYER_LIFE;
   0E8B 21r6Dr00      [10] 2884 	ld	hl,#_plife + 0
   0E8E 36 05         [10] 2885 	ld	(hl), #0x05
                           2886 ;game.c:136: while (1) {
   0E90                    2887 00107$:
                           2888 ;game.c:137: pres (scr_level, 0);
   0E90 21 00 00      [10] 2889 	ld	hl,#0x0000
   0E93 E5            [11] 2890 	push	hl
   0E94 21rBCr05      [10] 2891 	ld	hl,#_scr_level
   0E97 E5            [11] 2892 	push	hl
   0E98 CDr78r03      [17] 2893 	call	_pres
   0E9B F1            [10] 2894 	pop	af
   0E9C F1            [10] 2895 	pop	af
                           2896 ;game.c:138: game_init (); 
   0E9D CDr1Cr08      [17] 2897 	call	_game_init
                           2898 ;game.c:139: game_loop ();
   0EA0 CDr0Er0B      [17] 2899 	call	_game_loop
                           2900 ;game.c:141: if (game_over) {
   0EA3 3ArBEr01      [13] 2901 	ld	a,(#_game_over + 0)
   0EA6 B7            [ 4] 2902 	or	a, a
   0EA7 28 0F         [12] 2903 	jr	Z,00104$
                           2904 ;game.c:142: pres (scr_game_over, MUSIC_GOVER);
   0EA9 21r00r00      [10] 2905 	ld	hl,#_m_gover_psg
   0EAC E5            [11] 2906 	push	hl
   0EAD 21rF3r04      [10] 2907 	ld	hl,#_scr_game_over
   0EB0 E5            [11] 2908 	push	hl
   0EB1 CDr78r03      [17] 2909 	call	_pres
   0EB4 F1            [10] 2910 	pop	af
   0EB5 F1            [10] 2911 	pop	af
                           2912 ;game.c:143: break;
   0EB6 18 18         [12] 2913 	jr	00108$
   0EB8                    2914 00104$:
                           2915 ;game.c:145: level ++;
   0EB8 21rB6r01      [10] 2916 	ld	hl, #_level+0
   0EBB 34            [11] 2917 	inc	(hl)
                           2918 ;game.c:146: if (level == MAX_LEVELS) {
   0EBC 3ArB6r01      [13] 2919 	ld	a,(#_level + 0)
   0EBF D6 03         [ 7] 2920 	sub	a, #0x03
   0EC1 20 CD         [12] 2921 	jr	NZ,00107$
                           2922 ;game.c:147: pres (scr_the_end, 0);
   0EC3 21 00 00      [10] 2923 	ld	hl,#0x0000
   0EC6 E5            [11] 2924 	push	hl
   0EC7 21r11r05      [10] 2925 	ld	hl,#_scr_the_end
   0ECA E5            [11] 2926 	push	hl
   0ECB CDr78r03      [17] 2927 	call	_pres
   0ECE F1            [10] 2928 	pop	af
   0ECF F1            [10] 2929 	pop	af
                           2930 ;game.c:148: break;
   0ED0                    2931 00108$:
                           2932 ;game.c:153: first_game = 0;
   0ED0 21rB5r01      [10] 2933 	ld	hl,#_first_game + 0
   0ED3 36 00         [10] 2934 	ld	(hl), #0x00
   0ED5 18 AC         [12] 2935 	jr	00110$
                           2936 	.area _CODE
                           2937 	.area _INITIALIZER
                           2938 	.area _CABS (ABS)
