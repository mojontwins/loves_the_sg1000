                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.2 #9293 (MINGW32)
                              4 ; This file was generated Thu Nov 01 21:39:33 2018
                              5 ;--------------------------------------------------------
                              6 	.module game
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _game_loop
                             14 	.globl _prepare_scr
                             15 	.globl _game_init
                             16 	.globl _flickscreen_do_vertical
                             17 	.globl _flickscreen_do_horizontal
                             18 	.globl _credits
                             19 	.globl _scr_level
                             20 	.globl _scr_the_end
                             21 	.globl _scr_game_over
                             22 	.globl _title
                             23 	.globl _pres
                             24 	.globl _bat_out
                             25 	.globl _bat_in
                             26 	.globl _hud_update
                             27 	.globl _draw_game_frame
                             28 	.globl _enems_move
                             29 	.globl _enems_load
                             30 	.globl _enems_persistent_deaths_load
                             31 	.globl _enems_persistent_update
                             32 	.globl _enems_persistent_load
                             33 	.globl _player_move
                             34 	.globl _player_kill
                             35 	.globl _player_to_pixels
                             36 	.globl _player_render
                             37 	.globl _player_init
                             38 	.globl _chac_chacs_do
                             39 	.globl _hotspots_create
                             40 	.globl _hotspots_paint
                             41 	.globl _hotspots_load
                             42 	.globl _update_cycle
                             43 	.globl _jump_start
                             44 	.globl _pad_read
                             45 	.globl _collide_in
                             46 	.globl _pr_str
                             47 	.globl _draw_scr
                             48 	.globl _p_t
                             49 	.globl _ul_putc
                             50 	.globl _cls
                             51 	.globl _clear_update_list
                             52 	.globl _unrle
                             53 	.globl _unpack_bg_patterns
                             54 	.globl _memfill
                             55 	.globl _delay
                             56 	.globl _aPLib_depack_VRAM
                             57 	.globl _PSGStop
                             58 	.globl _SG_doUpdateList
                             59 	.globl _SG_setUpdateList
                             60 	.globl _UNSAFE_SG_copySpritestoSAT
                             61 	.globl _SG_resetPauseRequest
                             62 	.globl _SG_queryPauseRequested
                             63 	.globl _SG_getKeysStatus
                             64 	.globl _SG_getStp
                             65 	.globl _SG_addMetaSprite1x1
                             66 	.globl _SG_initSprites
                             67 	.globl _SG_setTile
                             68 	.globl _SG_waitForVBlank
                             69 	.globl _SG_setSpriteMode
                             70 	.globl _SG_VDPturnOffFeature
                             71 	.globl _SG_VDPturnOnFeature
                             72 	.globl _game_mode
                             73 	.globl _mode_no_resonators
                             74 	.globl _shaker_ct
                             75 	.globl _springs_on
                             76 	.globl _cfx
                             77 	.globl _res_subct
                             78 	.globl _res_ct
                             79 	.globl _res_on
                             80 	.globl _res_disable
                             81 	.globl _chac_chacs_queue_write
                             82 	.globl _chac_chacs_queue_read
                             83 	.globl _chac_chacs_queue
                             84 	.globl _chac_chacs_ct
                             85 	.globl _chac_chacs_idlewait
                             86 	.globl _chac_chacs_state
                             87 	.globl _chac_chacs_yx
                             88 	.globl _max_chac_chacs
                             89 	.globl _ep_dead
                             90 	.globl _en_spr_id
                             91 	.globl _enf_vy
                             92 	.globl _enf_y
                             93 	.globl _enf_vx
                             94 	.globl _enf_x
                             95 	.globl _en_spr_x_mod
                             96 	.globl _en_ct
                             97 	.globl _en_status
                             98 	.globl _en_life
                             99 	.globl _en_cttouched
                            100 	.globl _en_flags
                            101 	.globl _en_state
                            102 	.globl _en_facing
                            103 	.globl _en_s
                            104 	.globl _en_my
                            105 	.globl _en_mx
                            106 	.globl _en_y2
                            107 	.globl _en_x2
                            108 	.globl _en_y1
                            109 	.globl _en_x1
                            110 	.globl _en_y
                            111 	.globl _en_x
                            112 	.globl _en_t
                            113 	.globl _flags
                            114 	.globl _lkact
                            115 	.globl _hact
                            116 	.globl _pctfr
                            117 	.globl _no_ct
                            118 	.globl _oam_index_player
                            119 	.globl _okilled
                            120 	.globl _oammo
                            121 	.globl _oobjs
                            122 	.globl _okeys
                            123 	.globl _olife
                            124 	.globl _flick_override
                            125 	.globl _level_reset
                            126 	.globl _warp_to_level
                            127 	.globl _game_over
                            128 	.globl _win_level
                            129 	.globl _paused
                            130 	.globl _frame_counter
                            131 	.globl _half_life
                            132 	.globl _on_pant
                            133 	.globl _n_pant
                            134 	.globl _c_max_enems
                            135 	.globl _level
                            136 	.globl _first_game
                            137 	.globl _map_buff
                            138 	.globl _fade_delay
                            139 	.globl _fader
                            140 	.globl _update_list
                            141 	.globl _update_index
                            142 	.globl _ntsc_frame
                            143 	.globl _ntsc
                            144 	.globl _c_max_bolts
                            145 	.globl _c_hotspots
                            146 	.globl _c_enems
                            147 	.globl _c_locks
                            148 	.globl _c_decos
                            149 	.globl _c_map
                            150 	.globl _spr_enems
                            151 	.globl _c_behs
                            152 	.globl _c_ts_tmaps
                            153 	.globl _c_map_size
                            154 	.globl _c_map_h
                            155 	.globl _c_map_w
                            156 	.globl _ft
                            157 	.globl _do_process_breakable
                            158 	.globl _hrt
                            159 	.globl _hry
                            160 	.globl _hrx
                            161 	.globl _py_safe
                            162 	.globl _px_safe
                            163 	.globl _n_pant_safe
                            164 	.globl _pfiring
                            165 	.globl _pkilled
                            166 	.globl _pammo
                            167 	.globl _pobjs
                            168 	.globl _pkeys
                            169 	.globl _plife
                            170 	.globl _pcontinues
                            171 	.globl _pnotsafe
                            172 	.globl _pice
                            173 	.globl _pkill
                            174 	.globl _pry_old
                            175 	.globl _prx_old
                            176 	.globl _hith
                            177 	.globl _hitv
                            178 	.globl _pgtmy
                            179 	.globl _pgtmx
                            180 	.globl _phit
                            181 	.globl _pbouncing
                            182 	.globl _pflickering
                            183 	.globl _oppossee
                            184 	.globl _ppossee
                            185 	.globl _pgotten
                            186 	.globl _pctj
                            187 	.globl _pj
                            188 	.globl _b_button
                            189 	.globl _a_button
                            190 	.globl _psprid
                            191 	.globl _pfr
                            192 	.globl _pfacing
                            193 	.globl _pcy
                            194 	.globl _pcx
                            195 	.globl _pry
                            196 	.globl _prx
                            197 	.globl _pvy
                            198 	.globl _pvx
                            199 	.globl _py
                            200 	.globl _px
                            201 	.globl _vertical_engine_type
                            202 	.globl _en_sg_2
                            203 	.globl _en_sg_1
                            204 	.globl __enf_vy
                            205 	.globl __enf_vx
                            206 	.globl __enf_y
                            207 	.globl __enf_x
                            208 	.globl __en_state
                            209 	.globl __en_facing
                            210 	.globl __en_ct
                            211 	.globl __en_my
                            212 	.globl __en_mx
                            213 	.globl __en_y2
                            214 	.globl __en_x2
                            215 	.globl __en_y1
                            216 	.globl __en_x1
                            217 	.globl __en_y
                            218 	.globl __en_x
                            219 	.globl __en_s
                            220 	.globl __en_t
                            221 	.globl _pregotten
                            222 	.globl _en_is_alive
                            223 	.globl _touched
                            224 	.globl _en_spr
                            225 	.globl _en_colly
                            226 	.globl _en_collx
                            227 	.globl _en_fr
                            228 	.globl _en_offs
                            229 	.globl _en_initial
                            230 	.globl _cur_stp
                            231 	.globl _caux
                            232 	.globl _cy2
                            233 	.globl _cy1
                            234 	.globl _cx2
                            235 	.globl _cx1
                            236 	.globl _at2
                            237 	.globl _at1
                            238 	.globl _ticker
                            239 	.globl _rdct
                            240 	.globl _rds
                            241 	.globl _rdm
                            242 	.globl _rdd
                            243 	.globl _rdc
                            244 	.globl _rdb
                            245 	.globl _rda
                            246 	.globl _rdit
                            247 	.globl _rdt
                            248 	.globl _rdy
                            249 	.globl _rdx
                            250 	.globl _gp_addr
                            251 	.globl _gp_ram
                            252 	.globl _gp_tmap
                            253 	.globl _gp_gen
                            254 	.globl _rds16
                            255 	.globl _gpjt
                            256 	.globl _gpit
                            257 	.globl _pad_this_frame
                            258 	.globl _pad0
                            259 	.globl __t
                            260 	.globl __n
                            261 	.globl __y
                            262 	.globl __x
                            263 	.globl _levelnames
                            264 	.globl _level2name
                            265 	.globl _level1name
                            266 	.globl _level0name
                            267 	.globl _l_music
                            268 	.globl _l_hotspots
                            269 	.globl _l_enems
                            270 	.globl _l_n_bolts
                            271 	.globl _l_locks
                            272 	.globl _l_decos
                            273 	.globl _l_map
                            274 	.globl _l_spr_enems
                            275 	.globl _l_spr_patterns
                            276 	.globl _l_behs
                            277 	.globl _l_ts_tmaps
                            278 	.globl _l_ts_colours
                            279 	.globl _l_ts_patterns
                            280 	.globl _l_player_max_enems
                            281 	.globl _l_player_max_objects
                            282 	.globl _l_map_h
                            283 	.globl _l_map_w
                            284 	.globl _l_ini_y
                            285 	.globl _l_ini_x
                            286 	.globl _l_scr_ini
                            287 	.globl _spr_hs
                            288 	.globl _spr_enems2
                            289 	.globl _spr_enems1
                            290 	.globl _spr_enems0
                            291 	.globl _spr_player
                            292 	.globl _behs2
                            293 	.globl _behs1
                            294 	.globl _behs0
                            295 	.globl _jitter
                            296 	.globl _bits
                            297 	.globl _chac_chacs_t3
                            298 	.globl _chac_chacs_t2
                            299 	.globl _chac_chacs_t1
                            300 	.globl _chac_chacs_times
                            301 ;--------------------------------------------------------
                            302 ; special function registers
                            303 ;--------------------------------------------------------
                     00BF   304 _VDPControlPort	=	0x00bf
                     00BF   305 _VDPStatusPort	=	0x00bf
                     00BE   306 _VDPDataPort	=	0x00be
                     007E   307 _VDPVCounterPort	=	0x007e
                     007F   308 _VDPHCounterPort	=	0x007f
                     00DC   309 _IOPortL	=	0x00dc
                     00DD   310 _IOPortH	=	0x00dd
                            311 ;--------------------------------------------------------
                            312 ; ram data
                            313 ;--------------------------------------------------------
                            314 	.area _DATA
   0000                     315 __x::
   0000                     316 	.ds 1
   0001                     317 __y::
   0001                     318 	.ds 1
   0002                     319 __n::
   0002                     320 	.ds 1
   0003                     321 __t::
   0003                     322 	.ds 1
   0004                     323 _pad0::
   0004                     324 	.ds 2
   0006                     325 _pad_this_frame::
   0006                     326 	.ds 2
   0008                     327 _gpit::
   0008                     328 	.ds 1
   0009                     329 _gpjt::
   0009                     330 	.ds 1
   000A                     331 _rds16::
   000A                     332 	.ds 2
   000C                     333 _gp_gen::
   000C                     334 	.ds 2
   000E                     335 _gp_tmap::
   000E                     336 	.ds 2
   0010                     337 _gp_ram::
   0010                     338 	.ds 2
   0012                     339 _gp_addr::
   0012                     340 	.ds 2
   0014                     341 _rdx::
   0014                     342 	.ds 1
   0015                     343 _rdy::
   0015                     344 	.ds 1
   0016                     345 _rdt::
   0016                     346 	.ds 1
   0017                     347 _rdit::
   0017                     348 	.ds 1
   0018                     349 _rda::
   0018                     350 	.ds 1
   0019                     351 _rdb::
   0019                     352 	.ds 1
   001A                     353 _rdc::
   001A                     354 	.ds 1
   001B                     355 _rdd::
   001B                     356 	.ds 1
   001C                     357 _rdm::
   001C                     358 	.ds 1
   001D                     359 _rds::
   001D                     360 	.ds 1
   001E                     361 _rdct::
   001E                     362 	.ds 1
   001F                     363 _ticker::
   001F                     364 	.ds 1
   0020                     365 _at1::
   0020                     366 	.ds 1
   0021                     367 _at2::
   0021                     368 	.ds 1
   0022                     369 _cx1::
   0022                     370 	.ds 1
   0023                     371 _cx2::
   0023                     372 	.ds 1
   0024                     373 _cy1::
   0024                     374 	.ds 1
   0025                     375 _cy2::
   0025                     376 	.ds 1
   0026                     377 _caux::
   0026                     378 	.ds 1
   0027                     379 _cur_stp::
   0027                     380 	.ds 2
   0029                     381 _en_initial::
   0029                     382 	.ds 1
   002A                     383 _en_offs::
   002A                     384 	.ds 1
   002B                     385 _en_fr::
   002B                     386 	.ds 1
   002C                     387 _en_collx::
   002C                     388 	.ds 1
   002D                     389 _en_colly::
   002D                     390 	.ds 1
   002E                     391 _en_spr::
   002E                     392 	.ds 1
   002F                     393 _touched::
   002F                     394 	.ds 1
   0030                     395 _en_is_alive::
   0030                     396 	.ds 1
   0031                     397 _pregotten::
   0031                     398 	.ds 1
   0032                     399 __en_t::
   0032                     400 	.ds 1
   0033                     401 __en_s::
   0033                     402 	.ds 1
   0034                     403 __en_x::
   0034                     404 	.ds 1
   0035                     405 __en_y::
   0035                     406 	.ds 1
   0036                     407 __en_x1::
   0036                     408 	.ds 1
   0037                     409 __en_y1::
   0037                     410 	.ds 1
   0038                     411 __en_x2::
   0038                     412 	.ds 1
   0039                     413 __en_y2::
   0039                     414 	.ds 1
   003A                     415 __en_mx::
   003A                     416 	.ds 1
   003B                     417 __en_my::
   003B                     418 	.ds 1
   003C                     419 __en_ct::
   003C                     420 	.ds 1
   003D                     421 __en_facing::
   003D                     422 	.ds 1
   003E                     423 __en_state::
   003E                     424 	.ds 1
   003F                     425 __enf_x::
   003F                     426 	.ds 2
   0041                     427 __enf_y::
   0041                     428 	.ds 2
   0043                     429 __enf_vx::
   0043                     430 	.ds 2
   0045                     431 __enf_vy::
   0045                     432 	.ds 2
   0047                     433 _en_sg_1::
   0047                     434 	.ds 1
   0048                     435 _en_sg_2::
   0048                     436 	.ds 1
   0049                     437 _vertical_engine_type::
   0049                     438 	.ds 1
   004A                     439 _px::
   004A                     440 	.ds 2
   004C                     441 _py::
   004C                     442 	.ds 2
   004E                     443 _pvx::
   004E                     444 	.ds 2
   0050                     445 _pvy::
   0050                     446 	.ds 2
   0052                     447 _prx::
   0052                     448 	.ds 1
   0053                     449 _pry::
   0053                     450 	.ds 1
   0054                     451 _pcx::
   0054                     452 	.ds 1
   0055                     453 _pcy::
   0055                     454 	.ds 1
   0056                     455 _pfacing::
   0056                     456 	.ds 1
   0057                     457 _pfr::
   0057                     458 	.ds 1
   0058                     459 _psprid::
   0058                     460 	.ds 1
   0059                     461 _a_button::
   0059                     462 	.ds 1
   005A                     463 _b_button::
   005A                     464 	.ds 1
   005B                     465 _pj::
   005B                     466 	.ds 1
   005C                     467 _pctj::
   005C                     468 	.ds 1
   005D                     469 _pgotten::
   005D                     470 	.ds 1
   005E                     471 _ppossee::
   005E                     472 	.ds 1
   005F                     473 _oppossee::
   005F                     474 	.ds 1
   0060                     475 _pflickering::
   0060                     476 	.ds 1
   0061                     477 _pbouncing::
   0061                     478 	.ds 1
   0062                     479 _phit::
   0062                     480 	.ds 1
   0063                     481 _pgtmx::
   0063                     482 	.ds 2
   0065                     483 _pgtmy::
   0065                     484 	.ds 2
   0067                     485 _hitv::
   0067                     486 	.ds 1
   0068                     487 _hith::
   0068                     488 	.ds 1
   0069                     489 _prx_old::
   0069                     490 	.ds 1
   006A                     491 _pry_old::
   006A                     492 	.ds 1
   006B                     493 _pkill::
   006B                     494 	.ds 1
   006C                     495 _pice::
   006C                     496 	.ds 1
   006D                     497 _pnotsafe::
   006D                     498 	.ds 1
   006E                     499 _pcontinues::
   006E                     500 	.ds 1
   006F                     501 _plife::
   006F                     502 	.ds 1
   0070                     503 _pkeys::
   0070                     504 	.ds 1
   0071                     505 _pobjs::
   0071                     506 	.ds 1
   0072                     507 _pammo::
   0072                     508 	.ds 1
   0073                     509 _pkilled::
   0073                     510 	.ds 1
   0074                     511 _pfiring::
   0074                     512 	.ds 1
   0075                     513 _n_pant_safe::
   0075                     514 	.ds 1
   0076                     515 _px_safe::
   0076                     516 	.ds 2
   0078                     517 _py_safe::
   0078                     518 	.ds 2
   007A                     519 _hrx::
   007A                     520 	.ds 1
   007B                     521 _hry::
   007B                     522 	.ds 1
   007C                     523 _hrt::
   007C                     524 	.ds 1
   007D                     525 _do_process_breakable::
   007D                     526 	.ds 1
   007E                     527 _ft::
   007E                     528 	.ds 1
   007F                     529 _c_map_w::
   007F                     530 	.ds 1
   0080                     531 _c_map_h::
   0080                     532 	.ds 1
   0081                     533 _c_map_size::
   0081                     534 	.ds 1
   0082                     535 _c_ts_tmaps::
   0082                     536 	.ds 2
   0084                     537 _c_behs::
   0084                     538 	.ds 2
   0086                     539 _spr_enems::
   0086                     540 	.ds 2
   0088                     541 _c_map::
   0088                     542 	.ds 2
   008A                     543 _c_decos::
   008A                     544 	.ds 1
   008B                     545 _c_locks::
   008B                     546 	.ds 2
   008D                     547 _c_enems::
   008D                     548 	.ds 2
   008F                     549 _c_hotspots::
   008F                     550 	.ds 2
   0091                     551 _c_max_bolts::
   0091                     552 	.ds 1
   0092                     553 _ntsc::
   0092                     554 	.ds 1
   0093                     555 _ntsc_frame::
   0093                     556 	.ds 1
   0094                     557 _update_index::
   0094                     558 	.ds 1
   0095                     559 _update_list::
   0095                     560 	.ds 96
   00F5                     561 _fader::
   00F5                     562 	.ds 1
   00F6                     563 _fade_delay::
   00F6                     564 	.ds 1
   00F7                     565 _map_buff::
   00F7                     566 	.ds 192
   01B7                     567 _first_game::
   01B7                     568 	.ds 1
   01B8                     569 _level::
   01B8                     570 	.ds 1
   01B9                     571 _c_max_enems::
   01B9                     572 	.ds 1
   01BA                     573 _n_pant::
   01BA                     574 	.ds 1
   01BB                     575 _on_pant::
   01BB                     576 	.ds 1
   01BC                     577 _half_life::
   01BC                     578 	.ds 1
   01BD                     579 _frame_counter::
   01BD                     580 	.ds 1
   01BE                     581 _paused::
   01BE                     582 	.ds 1
   01BF                     583 _win_level::
   01BF                     584 	.ds 1
   01C0                     585 _game_over::
   01C0                     586 	.ds 1
   01C1                     587 _warp_to_level::
   01C1                     588 	.ds 1
   01C2                     589 _level_reset::
   01C2                     590 	.ds 1
   01C3                     591 _flick_override::
   01C3                     592 	.ds 1
   01C4                     593 _olife::
   01C4                     594 	.ds 1
   01C5                     595 _okeys::
   01C5                     596 	.ds 1
   01C6                     597 _oobjs::
   01C6                     598 	.ds 1
   01C7                     599 _oammo::
   01C7                     600 	.ds 1
   01C8                     601 _okilled::
   01C8                     602 	.ds 1
   01C9                     603 _oam_index_player::
   01C9                     604 	.ds 1
   01CA                     605 _no_ct::
   01CA                     606 	.ds 1
   01CB                     607 _pctfr::
   01CB                     608 	.ds 1
   01CC                     609 _hact::
   01CC                     610 	.ds 24
   01E4                     611 _lkact::
   01E4                     612 	.ds 16
   01F4                     613 _flags::
   01F4                     614 	.ds 2
   01F6                     615 _en_t::
   01F6                     616 	.ds 3
   01F9                     617 _en_x::
   01F9                     618 	.ds 3
   01FC                     619 _en_y::
   01FC                     620 	.ds 3
   01FF                     621 _en_x1::
   01FF                     622 	.ds 3
   0202                     623 _en_y1::
   0202                     624 	.ds 3
   0205                     625 _en_x2::
   0205                     626 	.ds 3
   0208                     627 _en_y2::
   0208                     628 	.ds 3
   020B                     629 _en_mx::
   020B                     630 	.ds 3
   020E                     631 _en_my::
   020E                     632 	.ds 3
   0211                     633 _en_s::
   0211                     634 	.ds 3
   0214                     635 _en_facing::
   0214                     636 	.ds 3
   0217                     637 _en_state::
   0217                     638 	.ds 3
   021A                     639 _en_flags::
   021A                     640 	.ds 3
   021D                     641 _en_cttouched::
   021D                     642 	.ds 3
   0220                     643 _en_life::
   0220                     644 	.ds 3
   0223                     645 _en_status::
   0223                     646 	.ds 3
   0226                     647 _en_ct::
   0226                     648 	.ds 3
   0229                     649 _en_spr_x_mod::
   0229                     650 	.ds 1
   022A                     651 _enf_x::
   022A                     652 	.ds 6
   0230                     653 _enf_vx::
   0230                     654 	.ds 6
   0236                     655 _enf_y::
   0236                     656 	.ds 6
   023C                     657 _enf_vy::
   023C                     658 	.ds 6
   0242                     659 _en_spr_id::
   0242                     660 	.ds 3
   0245                     661 _ep_dead::
   0245                     662 	.ds 72
   028D                     663 _max_chac_chacs::
   028D                     664 	.ds 1
   028E                     665 _chac_chacs_yx::
   028E                     666 	.ds 4
   0292                     667 _chac_chacs_state::
   0292                     668 	.ds 4
   0296                     669 _chac_chacs_idlewait::
   0296                     670 	.ds 4
   029A                     671 _chac_chacs_ct::
   029A                     672 	.ds 4
   029E                     673 _chac_chacs_queue::
   029E                     674 	.ds 16
   02AE                     675 _chac_chacs_queue_read::
   02AE                     676 	.ds 1
   02AF                     677 _chac_chacs_queue_write::
   02AF                     678 	.ds 1
   02B0                     679 _res_disable::
   02B0                     680 	.ds 1
   02B1                     681 _res_on::
   02B1                     682 	.ds 1
   02B2                     683 _res_ct::
   02B2                     684 	.ds 1
   02B3                     685 _res_subct::
   02B3                     686 	.ds 1
   02B4                     687 _cfx::
   02B4                     688 	.ds 1
   02B5                     689 _springs_on::
   02B5                     690 	.ds 1
   02B6                     691 _shaker_ct::
   02B6                     692 	.ds 1
   02B7                     693 _mode_no_resonators::
   02B7                     694 	.ds 1
   02B8                     695 _game_mode::
   02B8                     696 	.ds 1
                            697 ;--------------------------------------------------------
                            698 ; ram data
                            699 ;--------------------------------------------------------
                            700 	.area _INITIALIZED
                            701 ;--------------------------------------------------------
                            702 ; absolute external ram data
                            703 ;--------------------------------------------------------
                            704 	.area _DABS (ABS)
                            705 ;--------------------------------------------------------
                            706 ; global & static initialisations
                            707 ;--------------------------------------------------------
                            708 	.area _HOME
                            709 	.area _GSINIT
                            710 	.area _GSFINAL
                            711 	.area _GSINIT
                            712 ;--------------------------------------------------------
                            713 ; Home
                            714 ;--------------------------------------------------------
                            715 	.area _HOME
                            716 	.area _HOME
                            717 ;--------------------------------------------------------
                            718 ; code
                            719 ;--------------------------------------------------------
                            720 	.area _CODE
                            721 ;engine/hotspots.h:7: void hotspots_load (void) {
                            722 ;	---------------------------------
                            723 ; Function hotspots_load
                            724 ; ---------------------------------
   0000                     725 _hotspots_load::
                            726 ;engine/hotspots.h:9: gp_gen = (unsigned char *) c_hotspots;
   0000 2Ar8Fr00      [16]  727 	ld	hl,(_c_hotspots)
   0003 22r0Cr00      [16]  728 	ld	(_gp_gen),hl
                            729 ;engine/hotspots.h:11: for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
   0006 21r08r00      [10]  730 	ld	hl,#_gpit + 0
   0009 36 00         [10]  731 	ld	(hl), #0x00
   000B 11rCCr01      [10]  732 	ld	de,#_hact+0
   000E                     733 00102$:
                            734 ;engine/hotspots.h:16: hact [gpit] = 1;
   000E 2Ar08r00      [16]  735 	ld	hl,(_gpit)
   0011 26 00         [ 7]  736 	ld	h,#0x00
   0013 19            [11]  737 	add	hl,de
   0014 36 01         [10]  738 	ld	(hl),#0x01
                            739 ;engine/hotspots.h:11: for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
   0016 21r08r00      [10]  740 	ld	hl, #_gpit+0
   0019 34            [11]  741 	inc	(hl)
   001A 3Ar08r00      [13]  742 	ld	a,(#_gpit + 0)
   001D D6 18         [ 7]  743 	sub	a, #0x18
   001F 38 ED         [12]  744 	jr	C,00102$
   0021 C9            [10]  745 	ret
   0022                     746 _chac_chacs_times:
   0022 00                  747 	.db #0x00	; 0
   0023 10                  748 	.db #0x10	; 16
   0024 01                  749 	.db #0x01	; 1
   0025 32                  750 	.db #0x32	; 50	'2'
   0026 01                  751 	.db #0x01	; 1
   0027 01                  752 	.db #0x01	; 1
   0028                     753 _chac_chacs_t1:
   0028 26                  754 	.db #0x26	; 38
   0029 20                  755 	.db #0x20	; 32
   002A 22                  756 	.db #0x22	; 34
   002B 25                  757 	.db #0x25	; 37
   002C 22                  758 	.db #0x22	; 34
   002D 20                  759 	.db #0x20	; 32
   002E                     760 _chac_chacs_t2:
   002E 26                  761 	.db #0x26	; 38
   002F 26                  762 	.db #0x26	; 38
   0030 26                  763 	.db #0x26	; 38
   0031 24                  764 	.db #0x24	; 36
   0032 26                  765 	.db #0x26	; 38
   0033 26                  766 	.db #0x26	; 38
   0034                     767 _chac_chacs_t3:
   0034 26                  768 	.db #0x26	; 38
   0035 21                  769 	.db #0x21	; 33
   0036 23                  770 	.db #0x23	; 35
   0037 25                  771 	.db #0x25	; 37
   0038 23                  772 	.db #0x23	; 35
   0039 21                  773 	.db #0x21	; 33
   003A                     774 _bits:
   003A 01                  775 	.db #0x01	; 1
   003B 02                  776 	.db #0x02	; 2
   003C 04                  777 	.db #0x04	; 4
   003D 08                  778 	.db #0x08	; 8
   003E 10                  779 	.db #0x10	; 16
   003F 20                  780 	.db #0x20	; 32
   0040 40                  781 	.db #0x40	; 64
   0041 80                  782 	.db #0x80	; 128
   0042                     783 _jitter:
   0042 00                  784 	.db #0x00	; 0
   0043 01                  785 	.db #0x01	; 1
   0044 01                  786 	.db #0x01	; 1
   0045 00                  787 	.db #0x00	; 0
   0046 00                  788 	.db #0x00	; 0
   0047 01                  789 	.db #0x01	; 1
   0048 00                  790 	.db #0x00	; 0
   0049 01                  791 	.db #0x01	; 1
   004A 01                  792 	.db #0x01	; 1
   004B 00                  793 	.db #0x00	; 0
   004C 00                  794 	.db #0x00	; 0
   004D 00                  795 	.db #0x00	; 0
   004E 01                  796 	.db #0x01	; 1
   004F 00                  797 	.db #0x00	; 0
   0050 01                  798 	.db #0x01	; 1
   0051 01                  799 	.db #0x01	; 1
   0052                     800 _behs0:
   0052 00                  801 	.db #0x00	; 0
   0053 00                  802 	.db #0x00	; 0
   0054 00                  803 	.db #0x00	; 0
   0055 00                  804 	.db #0x00	; 0
   0056 08                  805 	.db #0x08	; 8
   0057 08                  806 	.db #0x08	; 8
   0058 08                  807 	.db #0x08	; 8
   0059 08                  808 	.db #0x08	; 8
   005A 00                  809 	.db #0x00	; 0
   005B 08                  810 	.db #0x08	; 8
   005C 00                  811 	.db #0x00	; 0
   005D 00                  812 	.db #0x00	; 0
   005E 01                  813 	.db #0x01	; 1
   005F 08                  814 	.db #0x08	; 8
   0060 04                  815 	.db #0x04	; 4
   0061 0A                  816 	.db #0x0A	; 10
   0062 00                  817 	.db #0x00	; 0
   0063 00                  818 	.db #0x00	; 0
   0064 00                  819 	.db #0x00	; 0
   0065 00                  820 	.db #0x00	; 0
   0066 08                  821 	.db #0x08	; 8
   0067 08                  822 	.db #0x08	; 8
   0068 08                  823 	.db #0x08	; 8
   0069 08                  824 	.db #0x08	; 8
   006A 00                  825 	.db #0x00	; 0
   006B 08                  826 	.db #0x08	; 8
   006C 00                  827 	.db #0x00	; 0
   006D 00                  828 	.db #0x00	; 0
   006E 01                  829 	.db #0x01	; 1
   006F 08                  830 	.db #0x08	; 8
   0070 04                  831 	.db #0x04	; 4
   0071 0A                  832 	.db #0x0A	; 10
   0072                     833 _behs1:
   0072 00                  834 	.db #0x00	; 0
   0073 00                  835 	.db #0x00	; 0
   0074 00                  836 	.db #0x00	; 0
   0075 00                  837 	.db #0x00	; 0
   0076 08                  838 	.db #0x08	; 8
   0077 04                  839 	.db #0x04	; 4
   0078 08                  840 	.db #0x08	; 8
   0079 04                  841 	.db #0x04	; 4
   007A 28                  842 	.db #0x28	; 40
   007B 29                  843 	.db #0x29	; 41
   007C 01                  844 	.db #0x01	; 1
   007D 01                  845 	.db #0x01	; 1
   007E 01                  846 	.db #0x01	; 1
   007F 08                  847 	.db #0x08	; 8
   0080 08                  848 	.db #0x08	; 8
   0081 0A                  849 	.db #0x0A	; 10
   0082 00                  850 	.db #0x00	; 0
   0083 00                  851 	.db #0x00	; 0
   0084 00                  852 	.db #0x00	; 0
   0085 00                  853 	.db #0x00	; 0
   0086 08                  854 	.db #0x08	; 8
   0087 04                  855 	.db #0x04	; 4
   0088 08                  856 	.db #0x08	; 8
   0089 04                  857 	.db #0x04	; 4
   008A 28                  858 	.db #0x28	; 40
   008B 29                  859 	.db #0x29	; 41
   008C 01                  860 	.db #0x01	; 1
   008D 01                  861 	.db #0x01	; 1
   008E 01                  862 	.db #0x01	; 1
   008F 08                  863 	.db #0x08	; 8
   0090 08                  864 	.db #0x08	; 8
   0091 08                  865 	.db #0x08	; 8
   0092                     866 _behs2:
   0092 00                  867 	.db #0x00	; 0
   0093 08                  868 	.db #0x08	; 8
   0094 00                  869 	.db #0x00	; 0
   0095 00                  870 	.db #0x00	; 0
   0096 08                  871 	.db #0x08	; 8
   0097 08                  872 	.db #0x08	; 8
   0098 08                  873 	.db #0x08	; 8
   0099 08                  874 	.db #0x08	; 8
   009A 00                  875 	.db #0x00	; 0
   009B 08                  876 	.db #0x08	; 8
   009C 04                  877 	.db #0x04	; 4
   009D 08                  878 	.db #0x08	; 8
   009E 01                  879 	.db #0x01	; 1
   009F 01                  880 	.db #0x01	; 1
   00A0 08                  881 	.db #0x08	; 8
   00A1 0A                  882 	.db #0x0A	; 10
   00A2 00                  883 	.db #0x00	; 0
   00A3 08                  884 	.db #0x08	; 8
   00A4 00                  885 	.db #0x00	; 0
   00A5 00                  886 	.db #0x00	; 0
   00A6 08                  887 	.db #0x08	; 8
   00A7 08                  888 	.db #0x08	; 8
   00A8 08                  889 	.db #0x08	; 8
   00A9 08                  890 	.db #0x08	; 8
   00AA 00                  891 	.db #0x00	; 0
   00AB 08                  892 	.db #0x08	; 8
   00AC 04                  893 	.db #0x04	; 4
   00AD 08                  894 	.db #0x08	; 8
   00AE 01                  895 	.db #0x01	; 1
   00AF 01                  896 	.db #0x01	; 1
   00B0 08                  897 	.db #0x08	; 8
   00B1 0A                  898 	.db #0x0A	; 10
   00B2 00                  899 	.db #0x00	; 0
   00B3 00                  900 	.db #0x00	; 0
   00B4 01                  901 	.db #0x01	; 1
   00B5 01                  902 	.db #0x01	; 1
   00B6 01                  903 	.db #0x01	; 1
   00B7 01                  904 	.db #0x01	; 1
   00B8 00                  905 	.db #0x00	; 0
   00B9                     906 _spr_player:
   00B9r00r00               907 	.dw _ss_pl_00
   00BBr00r00               908 	.dw _ss_pl_00
   00BDr00r00               909 	.dw _ss_pl_01
   00BFr00r00               910 	.dw _ss_pl_00
   00C1r00r00               911 	.dw _ss_pl_02
   00C3r00r00               912 	.dw _ss_pl_03
   00C5 00 00               913 	.dw #0x0000
   00C7 00 00               914 	.dw #0x0000
   00C9r00r00               915 	.dw _ss_pl_04
   00CBr00r00               916 	.dw _ss_pl_04
   00CDr00r00               917 	.dw _ss_pl_06
   00CFr00r00               918 	.dw _ss_pl_04
   00D1r00r00               919 	.dw _ss_pl_05
   00D3r00r00               920 	.dw _ss_pl_07
   00D5 00 00               921 	.dw #0x0000
   00D7 00 00               922 	.dw #0x0000
   00D9                     923 _spr_enems0:
   00D9r00r00               924 	.dw _ss_en_0_00
   00DBr00r00               925 	.dw _ss_en_0_01
   00DD 00 00               926 	.dw #0x0000
   00DF 00 00               927 	.dw #0x0000
   00E1r00r00               928 	.dw _ss_en_0_02
   00E3r00r00               929 	.dw _ss_en_0_03
   00E5 00 00               930 	.dw #0x0000
   00E7 00 00               931 	.dw #0x0000
   00E9r00r00               932 	.dw _ss_en_0_04
   00EBr00r00               933 	.dw _ss_en_0_05
   00ED 00 00               934 	.dw #0x0000
   00EF 00 00               935 	.dw #0x0000
   00F1r00r00               936 	.dw _ss_en_0_06
   00F3r00r00               937 	.dw _ss_en_0_07
   00F5 00 00               938 	.dw #0x0000
   00F7 00 00               939 	.dw #0x0000
   00F9r00r00               940 	.dw _ss_en_0_08
   00FBr00r00               941 	.dw _ss_en_0_09
   00FD 00 00               942 	.dw #0x0000
   00FF 00 00               943 	.dw #0x0000
   0101r00r00               944 	.dw _ss_en_0_0a
   0103r00r00               945 	.dw _ss_en_0_0b
   0105 00 00               946 	.dw #0x0000
   0107 00 00               947 	.dw #0x0000
   0109r00r00               948 	.dw _ss_plat_00
   010Br00r00               949 	.dw _ss_plat_01
   010D 00 00               950 	.dw #0x0000
   010F 00 00               951 	.dw #0x0000
   0111r00r00               952 	.dw _ss_plat_00
   0113r00r00               953 	.dw _ss_plat_01
   0115 00 00               954 	.dw #0x0000
   0117 00 00               955 	.dw #0x0000
   0119r00r00               956 	.dw _ss_fanty_00
   011Br00r00               957 	.dw _ss_fanty_01
   011D 00 00               958 	.dw #0x0000
   011F 00 00               959 	.dw #0x0000
   0121r00r00               960 	.dw _ss_fanty_02
   0123r00r00               961 	.dw _ss_fanty_03
   0125 00 00               962 	.dw #0x0000
   0127 00 00               963 	.dw #0x0000
   0129r00r00               964 	.dw _ss_it_04
   012B                     965 _spr_enems1:
   012Br00r00               966 	.dw _ss_en_1_00
   012Dr00r00               967 	.dw _ss_en_1_01
   012F 00 00               968 	.dw #0x0000
   0131 00 00               969 	.dw #0x0000
   0133r00r00               970 	.dw _ss_en_1_02
   0135r00r00               971 	.dw _ss_en_1_03
   0137 00 00               972 	.dw #0x0000
   0139 00 00               973 	.dw #0x0000
   013Br00r00               974 	.dw _ss_en_1_04
   013Dr00r00               975 	.dw _ss_en_1_05
   013F 00 00               976 	.dw #0x0000
   0141 00 00               977 	.dw #0x0000
   0143r00r00               978 	.dw _ss_en_1_06
   0145r00r00               979 	.dw _ss_en_1_07
   0147 00 00               980 	.dw #0x0000
   0149 00 00               981 	.dw #0x0000
   014Br00r00               982 	.dw _ss_en_1_08
   014Dr00r00               983 	.dw _ss_en_1_09
   014F 00 00               984 	.dw #0x0000
   0151 00 00               985 	.dw #0x0000
   0153r00r00               986 	.dw _ss_en_1_0a
   0155r00r00               987 	.dw _ss_en_1_0b
   0157 00 00               988 	.dw #0x0000
   0159 00 00               989 	.dw #0x0000
   015Br00r00               990 	.dw _ss_plat_00
   015Dr00r00               991 	.dw _ss_plat_01
   015F 00 00               992 	.dw #0x0000
   0161 00 00               993 	.dw #0x0000
   0163r00r00               994 	.dw _ss_plat_00
   0165r00r00               995 	.dw _ss_plat_01
   0167 00 00               996 	.dw #0x0000
   0169 00 00               997 	.dw #0x0000
   016Br00r00               998 	.dw _ss_fanty_00
   016Dr00r00               999 	.dw _ss_fanty_01
   016F 00 00              1000 	.dw #0x0000
   0171 00 00              1001 	.dw #0x0000
   0173r00r00              1002 	.dw _ss_fanty_02
   0175r00r00              1003 	.dw _ss_fanty_03
   0177 00 00              1004 	.dw #0x0000
   0179 00 00              1005 	.dw #0x0000
   017Br00r00              1006 	.dw _ss_it_04
   017D                    1007 _spr_enems2:
   017Dr00r00              1008 	.dw _ss_en_2_00
   017Fr00r00              1009 	.dw _ss_en_2_01
   0181 00 00              1010 	.dw #0x0000
   0183 00 00              1011 	.dw #0x0000
   0185r00r00              1012 	.dw _ss_en_2_02
   0187r00r00              1013 	.dw _ss_en_2_03
   0189 00 00              1014 	.dw #0x0000
   018B 00 00              1015 	.dw #0x0000
   018Dr00r00              1016 	.dw _ss_en_2_04
   018Fr00r00              1017 	.dw _ss_en_2_05
   0191 00 00              1018 	.dw #0x0000
   0193 00 00              1019 	.dw #0x0000
   0195r00r00              1020 	.dw _ss_en_2_06
   0197r00r00              1021 	.dw _ss_en_2_07
   0199 00 00              1022 	.dw #0x0000
   019B 00 00              1023 	.dw #0x0000
   019Dr00r00              1024 	.dw _ss_en_2_08
   019Fr00r00              1025 	.dw _ss_en_2_09
   01A1 00 00              1026 	.dw #0x0000
   01A3 00 00              1027 	.dw #0x0000
   01A5r00r00              1028 	.dw _ss_en_2_08
   01A7r00r00              1029 	.dw _ss_en_2_09
   01A9 00 00              1030 	.dw #0x0000
   01AB 00 00              1031 	.dw #0x0000
   01ADr00r00              1032 	.dw _ss_plat_00
   01AFr00r00              1033 	.dw _ss_plat_01
   01B1 00 00              1034 	.dw #0x0000
   01B3 00 00              1035 	.dw #0x0000
   01B5r00r00              1036 	.dw _ss_plat_00
   01B7r00r00              1037 	.dw _ss_plat_01
   01B9 00 00              1038 	.dw #0x0000
   01BB 00 00              1039 	.dw #0x0000
   01BDr00r00              1040 	.dw _ss_fanty_00
   01BFr00r00              1041 	.dw _ss_fanty_01
   01C1 00 00              1042 	.dw #0x0000
   01C3 00 00              1043 	.dw #0x0000
   01C5r00r00              1044 	.dw _ss_fanty_02
   01C7r00r00              1045 	.dw _ss_fanty_03
   01C9 00 00              1046 	.dw #0x0000
   01CB 00 00              1047 	.dw #0x0000
   01CDr00r00              1048 	.dw _ss_it_04
   01CF                    1049 _spr_hs:
   01CF 00 00              1050 	.dw #0x0000
   01D1 00 00              1051 	.dw #0x0000
   01D3r00r00              1052 	.dw _ss_it_01
   01D5r00r00              1053 	.dw _ss_it_00
   01D7r00r00              1054 	.dw _ss_it_02
   01D9r00r00              1055 	.dw _ss_it_03
   01DB                    1056 _l_scr_ini:
   01DB 14                 1057 	.db #0x14	; 20
   01DC 14                 1058 	.db #0x14	; 20
   01DD 08                 1059 	.db #0x08	; 8
   01DE                    1060 _l_ini_x:
   01DE 02                 1061 	.db #0x02	; 2
   01DF 02                 1062 	.db #0x02	; 2
   01E0 02                 1063 	.db #0x02	; 2
   01E1                    1064 _l_ini_y:
   01E1 07                 1065 	.db #0x07	; 7
   01E2 0A                 1066 	.db #0x0A	; 10
   01E3 03                 1067 	.db #0x03	; 3
   01E4                    1068 _l_map_w:
   01E4 04                 1069 	.db #0x04	; 4
   01E5 04                 1070 	.db #0x04	; 4
   01E6 08                 1071 	.db #0x08	; 8
   01E7                    1072 _l_map_h:
   01E7 06                 1073 	.db #0x06	; 6
   01E8 06                 1074 	.db #0x06	; 6
   01E9 03                 1075 	.db #0x03	; 3
   01EA                    1076 _l_player_max_objects:
   01EA 00                 1077 	.db #0x00	; 0
   01EB 00                 1078 	.db #0x00	; 0
   01EC 00                 1079 	.db #0x00	; 0
   01ED                    1080 _l_player_max_enems:
   01ED 36                 1081 	.db #0x36	; 54	'6'
   01EE 31                 1082 	.db #0x31	; 49	'1'
   01EF 2E                 1083 	.db #0x2E	; 46
   01F0                    1084 _l_ts_patterns:
   01F0r00r00              1085 	.dw _ts0_patterns_c
   01F2r00r00              1086 	.dw _ts1_patterns_c
   01F4r00r00              1087 	.dw _ts2_patterns_c
   01F6                    1088 _l_ts_colours:
   01F6r00r00              1089 	.dw _ts0_colours_c
   01F8r00r00              1090 	.dw _ts1_colours_c
   01FAr00r00              1091 	.dw _ts2_colours_c
   01FC                    1092 _l_ts_tmaps:
   01FCr00r00              1093 	.dw _ts0_tmaps
   01FEr00r00              1094 	.dw _ts1_tmaps
   0200r00r00              1095 	.dw _ts2_tmaps
   0202                    1096 _l_behs:
   0202r52r00              1097 	.dw _behs0
   0204r72r00              1098 	.dw _behs1
   0206r92r00              1099 	.dw _behs2
   0208                    1100 _l_spr_patterns:
   0208r00r00              1101 	.dw _ss_en_0_patterns_c
   020Ar00r00              1102 	.dw _ss_en_1_patterns_c
   020Cr00r00              1103 	.dw _ss_en_2_patterns_c
   020E                    1104 _l_spr_enems:
   020ErD9r00              1105 	.dw _spr_enems0
   0210r2Br01              1106 	.dw _spr_enems1
   0212r7Dr01              1107 	.dw _spr_enems2
   0214                    1108 _l_map:
   0214r00r00              1109 	.dw _map_0
   0216r00r00              1110 	.dw _map_1
   0218r00r00              1111 	.dw _map_2
   021A                    1112 _l_decos:
   021A 00                 1113 	.db #0x00	; 0
   021B 01                 1114 	.db #0x01	; 1
   021C 01                 1115 	.db #0x01	; 1
   021D                    1116 _l_locks:
   021Dr00r00              1117 	.dw _map_0_locks
   021Fr00r00              1118 	.dw _map_1_locks
   0221r00r00              1119 	.dw _map_2_locks
   0223                    1120 _l_n_bolts:
   0223 02                 1121 	.db #0x02	; 2
   0224 01                 1122 	.db #0x01	; 1
   0225 02                 1123 	.db #0x02	; 2
   0226                    1124 _l_enems:
   0226r00r00              1125 	.dw _enems_0
   0228r00r00              1126 	.dw _enems_1
   022Ar00r00              1127 	.dw _enems_2
   022C                    1128 _l_hotspots:
   022Cr00r00              1129 	.dw _hotspots_0
   022Er00r00              1130 	.dw _hotspots_1
   0230r00r00              1131 	.dw _hotspots_2
   0232                    1132 _l_music:
   0232 00                 1133 	.db #0x00	; 0
   0233 01                 1134 	.db #0x01	; 1
   0234 02                 1135 	.db #0x02	; 2
                           1136 ;engine/hotspots.h:20: void hotspots_paint (void) {
                           1137 ;	---------------------------------
                           1138 ; Function hotspots_paint
                           1139 ; ---------------------------------
   0235                    1140 _hotspots_paint::
                           1141 ;engine/hotspots.h:30: rda = hrt;
   0235 3Ar7Cr00      [13] 1142 	ld	a,(#_hrt + 0)
   0238 32r18r00      [13] 1143 	ld	(#_rda + 0),a
                           1144 ;engine/hotspots.h:33: if (hrt == HOTSPOT_TYPE_RESONATOR && res_on) rda = HOTSPOT_TYPE_RESONATOR_ON;
   023B 3Ar7Cr00      [13] 1145 	ld	a,(#_hrt + 0)
   023E D6 04         [ 7] 1146 	sub	a, #0x04
   0240 20 0B         [12] 1147 	jr	NZ,00102$
   0242 3ArB1r02      [13] 1148 	ld	a,(#_res_on + 0)
   0245 B7            [ 4] 1149 	or	a, a
   0246 28 05         [12] 1150 	jr	Z,00102$
   0248 21r18r00      [10] 1151 	ld	hl,#_rda + 0
   024B 36 05         [10] 1152 	ld	(hl), #0x05
   024D                    1153 00102$:
                           1154 ;engine/hotspots.h:38: spr_hs [rda]
   024D 11rCFr01      [10] 1155 	ld	de,#_spr_hs+0
   0250 FD 21r18r00   [14] 1156 	ld	iy,#_rda
   0254 FD 6E 00      [19] 1157 	ld	l,0 (iy)
   0257 26 00         [ 7] 1158 	ld	h,#0x00
   0259 29            [11] 1159 	add	hl, hl
   025A 19            [11] 1160 	add	hl,de
   025B 5E            [ 7] 1161 	ld	e,(hl)
   025C 23            [ 6] 1162 	inc	hl
   025D 56            [ 7] 1163 	ld	d,(hl)
                           1164 ;engine/hotspots.h:37: hrx, hry + SPRITE_ADJUST, 
   025E 3Ar7Br00      [13] 1165 	ld	a,(#_hry + 0)
   0261 C6 F7         [ 7] 1166 	add	a, #0xF7
   0263 67            [ 4] 1167 	ld	h,a
   0264 D5            [11] 1168 	push	de
   0265 E5            [11] 1169 	push	hl
   0266 33            [ 6] 1170 	inc	sp
   0267 3Ar7Ar00      [13] 1171 	ld	a,(_hrx)
   026A F5            [11] 1172 	push	af
   026B 33            [ 6] 1173 	inc	sp
   026C CDr00r00      [17] 1174 	call	_SG_addMetaSprite1x1
   026F F1            [10] 1175 	pop	af
   0270 F1            [10] 1176 	pop	af
   0271 C9            [10] 1177 	ret
                           1178 ;engine/hotspots.h:42: void hotspots_create (void) {
                           1179 ;	---------------------------------
                           1180 ; Function hotspots_create
                           1181 ; ---------------------------------
   0272                    1182 _hotspots_create::
                           1183 ;engine/hotspots.h:54: gp_gen = (unsigned char *) (c_hotspots + (n_pant << 1));
   0272 FD 21rBAr01   [14] 1184 	ld	iy,#_n_pant
   0276 FD 6E 00      [19] 1185 	ld	l,0 (iy)
   0279 26 00         [ 7] 1186 	ld	h,#0x00
   027B 29            [11] 1187 	add	hl, hl
   027C 55            [ 4] 1188 	ld	d,l
   027D 5C            [ 4] 1189 	ld	e,h
   027E 21r0Cr00      [10] 1190 	ld	hl,#_gp_gen
   0281 3Ar8Fr00      [13] 1191 	ld	a,(#_c_hotspots + 0)
   0284 82            [ 4] 1192 	add	a, d
   0285 77            [ 7] 1193 	ld	(hl),a
   0286 3Ar90r00      [13] 1194 	ld	a,(#_c_hotspots + 1)
   0289 8B            [ 4] 1195 	adc	a, e
   028A 23            [ 6] 1196 	inc	hl
   028B 77            [ 7] 1197 	ld	(hl),a
                           1198 ;engine/hotspots.h:55: hrt = *gp_gen ++; rda = *gp_gen; 
   028C 2Ar0Cr00      [16] 1199 	ld	hl,(_gp_gen)
   028F 7E            [ 7] 1200 	ld	a,(hl)
   0290 32r7Cr00      [13] 1201 	ld	(#_hrt + 0),a
   0293 21r0Cr00      [10] 1202 	ld	hl, #_gp_gen+0
   0296 34            [11] 1203 	inc	(hl)
   0297 20 04         [12] 1204 	jr	NZ,00115$
   0299 21r0Dr00      [10] 1205 	ld	hl, #_gp_gen+1
   029C 34            [11] 1206 	inc	(hl)
   029D                    1207 00115$:
   029D 2Ar0Cr00      [16] 1208 	ld	hl,(_gp_gen)
   02A0 7E            [ 7] 1209 	ld	a,(hl)
   02A1 32r18r00      [13] 1210 	ld	(#_rda + 0),a
                           1211 ;engine/hotspots.h:56: if (hrt && hact [n_pant]) {
   02A4 3Ar7Cr00      [13] 1212 	ld	a,(#_hrt + 0)
   02A7 B7            [ 4] 1213 	or	a, a
   02A8 28 22         [12] 1214 	jr	Z,00102$
   02AA 11rCCr01      [10] 1215 	ld	de,#_hact+0
   02AD 2ArBAr01      [16] 1216 	ld	hl,(_n_pant)
   02B0 26 00         [ 7] 1217 	ld	h,#0x00
   02B2 19            [11] 1218 	add	hl,de
   02B3 7E            [ 7] 1219 	ld	a,(hl)
   02B4 B7            [ 4] 1220 	or	a, a
   02B5 28 15         [12] 1221 	jr	Z,00102$
                           1222 ;engine/hotspots.h:57: hry = rda & 0xf0; hrx = rda << 4;
   02B7 3Ar18r00      [13] 1223 	ld	a,(#_rda + 0)
   02BA E6 F0         [ 7] 1224 	and	a, #0xF0
   02BC 32r7Br00      [13] 1225 	ld	(#_hry + 0),a
   02BF 3Ar18r00      [13] 1226 	ld	a,(#_rda + 0)
   02C2 07            [ 4] 1227 	rlca
   02C3 07            [ 4] 1228 	rlca
   02C4 07            [ 4] 1229 	rlca
   02C5 07            [ 4] 1230 	rlca
   02C6 E6 F0         [ 7] 1231 	and	a,#0xF0
   02C8 32r7Ar00      [13] 1232 	ld	(#_hrx + 0),a
   02CB C9            [10] 1233 	ret
   02CC                    1234 00102$:
                           1235 ;engine/hotspots.h:58: } else hrt = 0;
   02CC 21r7Cr00      [10] 1236 	ld	hl,#_hrt + 0
   02CF 36 00         [10] 1237 	ld	(hl), #0x00
   02D1 C9            [10] 1238 	ret
                           1239 ;engine/../my/game_frame.h:7: void draw_game_frame (void) {
                           1240 ;	---------------------------------
                           1241 ; Function draw_game_frame
                           1242 ; ---------------------------------
   02D2                    1243 _draw_game_frame::
                           1244 ;engine/../my/game_frame.h:8: gp_gen = hud_rle; unrle ();
   02D2 21r00r00      [10] 1245 	ld	hl,#_hud_rle+0
   02D5 22r0Cr00      [16] 1246 	ld	(_gp_gen),hl
   02D8 C3r00r00      [10] 1247 	jp  _unrle
                           1248 ;engine/frame.h:9: void hud_update (void) {
                           1249 ;	---------------------------------
                           1250 ; Function hud_update
                           1251 ; ---------------------------------
   02DB                    1252 _hud_update::
                           1253 ;engine/frame.h:12: if (okilled != pkilled) {
   02DB 3ArC8r01      [13] 1254 	ld	a,(#_okilled + 0)
   02DE FD 21r73r00   [14] 1255 	ld	iy,#_pkilled
   02E2 FD 96 00      [19] 1256 	sub	a, 0 (iy)
   02E5 28 24         [12] 1257 	jr	Z,00102$
                           1258 ;engine/frame.h:13: okilled = pkilled;
   02E7 3Ar73r00      [13] 1259 	ld	a,(#_pkilled + 0)
   02EA 32rC8r01      [13] 1260 	ld	(#_okilled + 0),a
                           1261 ;engine/frame.h:14: _x = KILLED_X; _y = KILLED_Y; _n = c_max_enems - pkilled; p_t ();
   02ED 21r00r00      [10] 1262 	ld	hl,#__x + 0
   02F0 36 15         [10] 1263 	ld	(hl), #0x15
   02F2 21r01r00      [10] 1264 	ld	hl,#__y + 0
   02F5 36 01         [10] 1265 	ld	(hl), #0x01
   02F7 21r73r00      [10] 1266 	ld	hl,#_pkilled
   02FA D5            [11] 1267 	push	de
   02FB FD 21r02r00   [14] 1268 	ld	iy,#__n
   02FF FD E5         [15] 1269 	push	iy
   0301 D1            [10] 1270 	pop	de
   0302 3ArB9r01      [13] 1271 	ld	a,(#_c_max_enems + 0)
   0305 96            [ 7] 1272 	sub	a, (hl)
   0306 12            [ 7] 1273 	ld	(de),a
   0307 D1            [10] 1274 	pop	de
   0308 CDr00r00      [17] 1275 	call	_p_t
   030B                    1276 00102$:
                           1277 ;engine/frame.h:32: if (okeys != pkeys) {
   030B 3ArC5r01      [13] 1278 	ld	a,(#_okeys + 0)
   030E FD 21r70r00   [14] 1279 	ld	iy,#_pkeys
   0312 FD 96 00      [19] 1280 	sub	a, 0 (iy)
   0315 28 19         [12] 1281 	jr	Z,00104$
                           1282 ;engine/frame.h:33: okeys = pkeys;
   0317 21r70r00      [10] 1283 	ld	hl,#_pkeys + 0
   031A 56            [ 7] 1284 	ld	d, (hl)
   031B 21rC5r01      [10] 1285 	ld	hl,#_okeys + 0
   031E 72            [ 7] 1286 	ld	(hl), d
                           1287 ;engine/frame.h:34: _x = KEYS_X; _y = KEYS_Y; _n = pkeys; p_t ();
   031F 21r00r00      [10] 1288 	ld	hl,#__x + 0
   0322 36 0C         [10] 1289 	ld	(hl), #0x0C
   0324 21r01r00      [10] 1290 	ld	hl,#__y + 0
   0327 36 01         [10] 1291 	ld	(hl), #0x01
   0329 21r02r00      [10] 1292 	ld	hl,#__n + 0
   032C 72            [ 7] 1293 	ld	(hl), d
   032D CDr00r00      [17] 1294 	call	_p_t
   0330                    1295 00104$:
                           1296 ;engine/frame.h:39: if (olife != plife) {
   0330 3ArC4r01      [13] 1297 	ld	a,(#_olife + 0)
   0333 FD 21r6Fr00   [14] 1298 	ld	iy,#_plife
   0337 FD 96 00      [19] 1299 	sub	a, 0 (iy)
   033A C8            [11] 1300 	ret	Z
                           1301 ;engine/frame.h:40: olife = plife;
   033B 21r6Fr00      [10] 1302 	ld	hl,#_plife + 0
   033E 56            [ 7] 1303 	ld	d, (hl)
   033F 21rC4r01      [10] 1304 	ld	hl,#_olife + 0
   0342 72            [ 7] 1305 	ld	(hl), d
                           1306 ;engine/frame.h:41: _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
   0343 21r00r00      [10] 1307 	ld	hl,#__x + 0
   0346 36 04         [10] 1308 	ld	(hl), #0x04
   0348 21r01r00      [10] 1309 	ld	hl,#__y + 0
   034B 36 01         [10] 1310 	ld	(hl), #0x01
   034D 21r02r00      [10] 1311 	ld	hl,#__n + 0
   0350 72            [ 7] 1312 	ld	(hl), d
   0351 C3r00r00      [10] 1313 	jp  _p_t
                           1314 ;my/pres.h:6: void bat_in (void) {
                           1315 ;	---------------------------------
                           1316 ; Function bat_in
                           1317 ; ---------------------------------
   0354                    1318 _bat_in::
                           1319 ;my/pres.h:7: SG_displayOn ();
   0354 21 40 01      [10] 1320 	ld	hl,#0x0140
   0357 E5            [11] 1321 	push	hl
   0358 CDr00r00      [17] 1322 	call	_SG_VDPturnOnFeature
   035B F1            [10] 1323 	pop	af
                           1324 ;my/pres.h:8: while (SG_getKeysStatus ());
   035C                    1325 00101$:
   035C CDr00r00      [17] 1326 	call	_SG_getKeysStatus
   035F 7C            [ 4] 1327 	ld	a,h
   0360 B5            [ 4] 1328 	or	a,l
   0361 20 F9         [12] 1329 	jr	NZ,00101$
   0363 C9            [10] 1330 	ret
                           1331 ;my/pres.h:11: void bat_out (void) {
                           1332 ;	---------------------------------
                           1333 ; Function bat_out
                           1334 ; ---------------------------------
   0364                    1335 _bat_out::
                           1336 ;my/pres.h:12: PSGStop ();
   0364 CDr00r00      [17] 1337 	call	_PSGStop
                           1338 ;my/pres.h:13: SG_displayOff ();
   0367 21 40 01      [10] 1339 	ld	hl,#0x0140
   036A E5            [11] 1340 	push	hl
   036B CDr00r00      [17] 1341 	call	_SG_VDPturnOffFeature
   036E F1            [10] 1342 	pop	af
                           1343 ;my/pres.h:14: SG_initSprites ();
   036F CDr00r00      [17] 1344 	call	_SG_initSprites
                           1345 ;my/pres.h:15: UNSAFE_SG_copySpritestoSAT ();	
   0372 C3r00r00      [10] 1346 	jp  _UNSAFE_SG_copySpritestoSAT
                           1347 ;my/pres.h:18: void pres (void (*func) (void)) {
                           1348 ;	---------------------------------
                           1349 ; Function pres
                           1350 ; ---------------------------------
   0375                    1351 _pres::
                           1352 ;my/pres.h:19: cls ();
   0375 CDr00r00      [17] 1353 	call	_cls
                           1354 ;my/pres.h:20: (*func) ();
   0378 C1            [10] 1355 	pop	bc
   0379 E1            [10] 1356 	pop	hl
   037A E5            [11] 1357 	push	hl
   037B C5            [11] 1358 	push	bc
   037C CDr00r00      [17] 1359 	call	___sdcc_call_hl
                           1360 ;my/pres.h:21: bat_in ();
   037F CDr54r03      [17] 1361 	call	_bat_in
                           1362 ;my/pres.h:22: while (1) {
   0382                    1363 00104$:
                           1364 ;my/pres.h:23: pad_read ();
   0382 CDr00r00      [17] 1365 	call	_pad_read
                           1366 ;my/pres.h:24: if (pad_this_frame & (PAD_A|PAD_B|PAD_START)) break;
   0385 3Ar06r00      [13] 1367 	ld	a,(#_pad_this_frame + 0)
   0388 E6 30         [ 7] 1368 	and	a, #0x30
   038A 28 F6         [12] 1369 	jr	Z,00104$
                           1370 ;my/pres.h:26: bat_out ();
   038C C3r64r03      [10] 1371 	jp  _bat_out
                           1372 ;my/pres.h:29: void title (void) {
                           1373 ;	---------------------------------
                           1374 ; Function title
                           1375 ; ---------------------------------
   038F                    1376 _title::
                           1377 ;my/pres.h:30: unpack_bg_patterns (tstitle_patterns_c, tstitle_colours_c, 64*8, 7);
   038F 11r00r00      [10] 1378 	ld	de,#_tstitle_patterns_c
   0392 3E 07         [ 7] 1379 	ld	a,#0x07
   0394 F5            [11] 1380 	push	af
   0395 33            [ 6] 1381 	inc	sp
   0396 21 00 02      [10] 1382 	ld	hl,#0x0200
   0399 E5            [11] 1383 	push	hl
   039A 21r00r00      [10] 1384 	ld	hl,#_tstitle_colours_c
   039D E5            [11] 1385 	push	hl
   039E D5            [11] 1386 	push	de
   039F CDr00r00      [17] 1387 	call	_unpack_bg_patterns
   03A2 21 07 00      [10] 1388 	ld	hl,#7
   03A5 39            [11] 1389 	add	hl,sp
   03A6 F9            [ 6] 1390 	ld	sp,hl
                           1391 ;my/pres.h:31: gp_gen = title_rle; unrle ();
   03A7 21r00r00      [10] 1392 	ld	hl,#_title_rle+0
   03AA 22r0Cr00      [16] 1393 	ld	(_gp_gen),hl
   03AD CDr00r00      [17] 1394 	call	_unrle
                           1395 ;my/pres.h:33: _x = 7; _y = 12; pr_str ("SELECT AND PUSH 1!");
   03B0 21r00r00      [10] 1396 	ld	hl,#__x + 0
   03B3 36 07         [10] 1397 	ld	(hl), #0x07
   03B5 21r01r00      [10] 1398 	ld	hl,#__y + 0
   03B8 36 0C         [10] 1399 	ld	(hl), #0x0C
   03BA 21r62r04      [10] 1400 	ld	hl,#___str_0
   03BD E5            [11] 1401 	push	hl
   03BE CDr00r00      [17] 1402 	call	_pr_str
   03C1 F1            [10] 1403 	pop	af
                           1404 ;my/pres.h:35: _x = 12; _y = 16; pr_str ("RESONATORS");
   03C2 21r00r00      [10] 1405 	ld	hl,#__x + 0
   03C5 36 0C         [10] 1406 	ld	(hl), #0x0C
   03C7 21r01r00      [10] 1407 	ld	hl,#__y + 0
   03CA 36 10         [10] 1408 	ld	(hl), #0x10
   03CC 21r75r04      [10] 1409 	ld	hl,#___str_1
   03CF E5            [11] 1410 	push	hl
   03D0 CDr00r00      [17] 1411 	call	_pr_str
   03D3 F1            [10] 1412 	pop	af
                           1413 ;my/pres.h:36: _y = 18; pr_str ("EASY MODE");
   03D4 21r01r00      [10] 1414 	ld	hl,#__y + 0
   03D7 36 12         [10] 1415 	ld	(hl), #0x12
   03D9 21r80r04      [10] 1416 	ld	hl,#___str_2
   03DC E5            [11] 1417 	push	hl
   03DD CDr00r00      [17] 1418 	call	_pr_str
   03E0 F1            [10] 1419 	pop	af
                           1420 ;my/pres.h:38: _x = 5; _y = 23; pr_str ("@ 2018 THE MOJON TWINS");
   03E1 21r00r00      [10] 1421 	ld	hl,#__x + 0
   03E4 36 05         [10] 1422 	ld	(hl), #0x05
   03E6 21r01r00      [10] 1423 	ld	hl,#__y + 0
   03E9 36 17         [10] 1424 	ld	(hl), #0x17
   03EB 21r8Ar04      [10] 1425 	ld	hl,#___str_3
   03EE E5            [11] 1426 	push	hl
   03EF CDr00r00      [17] 1427 	call	_pr_str
   03F2 F1            [10] 1428 	pop	af
                           1429 ;my/pres.h:40: bat_in ();
   03F3 CDr54r03      [17] 1430 	call	_bat_in
                           1431 ;my/pres.h:42: while (1) {
   03F6                    1432 00113$:
                           1433 ;my/pres.h:43: update_cycle ();
   03F6 CDr00r00      [17] 1434 	call	_update_cycle
                           1435 ;my/pres.h:44: SG_addMetaSprite1x1 (82, 122 + (mode_no_resonators << 4), ss_pl_00);
   03F9 21r00r00      [10] 1436 	ld	hl,#_ss_pl_00
   03FC 3ArB7r02      [13] 1437 	ld	a,(#_mode_no_resonators + 0)
   03FF 07            [ 4] 1438 	rlca
   0400 07            [ 4] 1439 	rlca
   0401 07            [ 4] 1440 	rlca
   0402 07            [ 4] 1441 	rlca
   0403 E6 F0         [ 7] 1442 	and	a,#0xF0
   0405 C6 7A         [ 7] 1443 	add	a, #0x7A
   0407 E5            [11] 1444 	push	hl
   0408 57            [ 4] 1445 	ld	d,a
   0409 1E 52         [ 7] 1446 	ld	e,#0x52
   040B D5            [11] 1447 	push	de
   040C CDr00r00      [17] 1448 	call	_SG_addMetaSprite1x1
   040F F1            [10] 1449 	pop	af
   0410 F1            [10] 1450 	pop	af
                           1451 ;my/pres.h:45: pad_read ();
   0411 CDr00r00      [17] 1452 	call	_pad_read
                           1453 ;my/pres.h:46: rda = mode_no_resonators;
   0414 3ArB7r02      [13] 1454 	ld	a,(#_mode_no_resonators + 0)
   0417 32r18r00      [13] 1455 	ld	(#_rda + 0),a
                           1456 ;my/pres.h:47: if (pad_this_frame & PAD_DOWN) {
   041A 21r06r00      [10] 1457 	ld	hl,#_pad_this_frame+0
   041D CB 4E         [12] 1458 	bit	1, (hl)
   041F 28 10         [12] 1459 	jr	Z,00104$
                           1460 ;my/pres.h:48: ++ mode_no_resonators; if (mode_no_resonators == 2) mode_no_resonators = 0;
   0421 21rB7r02      [10] 1461 	ld	hl, #_mode_no_resonators+0
   0424 34            [11] 1462 	inc	(hl)
   0425 3ArB7r02      [13] 1463 	ld	a,(#_mode_no_resonators + 0)
   0428 D6 02         [ 7] 1464 	sub	a, #0x02
   042A 20 05         [12] 1465 	jr	NZ,00104$
   042C 21rB7r02      [10] 1466 	ld	hl,#_mode_no_resonators + 0
   042F 36 00         [10] 1467 	ld	(hl), #0x00
   0431                    1468 00104$:
                           1469 ;my/pres.h:50: if (pad_this_frame & PAD_UP) {
   0431 21r06r00      [10] 1470 	ld	hl,#_pad_this_frame+0
   0434 CB 46         [12] 1471 	bit	0, (hl)
   0436 28 11         [12] 1472 	jr	Z,00109$
                           1473 ;my/pres.h:51: if (mode_no_resonators) -- mode_no_resonators; else mode_no_resonators = 1;
   0438 3ArB7r02      [13] 1474 	ld	a,(#_mode_no_resonators + 0)
   043B B7            [ 4] 1475 	or	a, a
   043C 28 06         [12] 1476 	jr	Z,00106$
   043E 21rB7r02      [10] 1477 	ld	hl, #_mode_no_resonators+0
   0441 35            [11] 1478 	dec	(hl)
   0442 18 05         [12] 1479 	jr	00109$
   0444                    1480 00106$:
   0444 21rB7r02      [10] 1481 	ld	hl,#_mode_no_resonators + 0
   0447 36 01         [10] 1482 	ld	(hl), #0x01
   0449                    1483 00109$:
                           1484 ;my/pres.h:54: if (pad_this_frame & PAD_1) break;
   0449 21r06r00      [10] 1485 	ld	hl,#_pad_this_frame+0
   044C CB 66         [12] 1486 	bit	4, (hl)
   044E 28 A6         [12] 1487 	jr	Z,00113$
                           1488 ;my/pres.h:60: plife = mode_no_resonators ? 5 : 3;
   0450 3ArB7r02      [13] 1489 	ld	a,(#_mode_no_resonators + 0)
   0453 B7            [ 4] 1490 	or	a, a
   0454 28 04         [12] 1491 	jr	Z,00117$
   0456 3E 05         [ 7] 1492 	ld	a,#0x05
   0458 18 02         [12] 1493 	jr	00118$
   045A                    1494 00117$:
   045A 3E 03         [ 7] 1495 	ld	a,#0x03
   045C                    1496 00118$:
   045C 32r6Fr00      [13] 1497 	ld	(#_plife + 0),a
                           1498 ;my/pres.h:62: bat_out ();
   045F C3r64r03      [10] 1499 	jp  _bat_out
   0462                    1500 ___str_0:
   0462 53 45 4C 45 43 54  1501 	.ascii "SELECT AND PUSH 1!"
        20 41 4E 44 20 50
        55 53 48 20 31 21
   0474 00                 1502 	.db 0x00
   0475                    1503 ___str_1:
   0475 52 45 53 4F 4E 41  1504 	.ascii "RESONATORS"
        54 4F 52 53
   047F 00                 1505 	.db 0x00
   0480                    1506 ___str_2:
   0480 45 41 53 59 20 4D  1507 	.ascii "EASY MODE"
        4F 44 45
   0489 00                 1508 	.db 0x00
   048A                    1509 ___str_3:
   048A 40 20 32 30 31 38  1510 	.ascii "@ 2018 THE MOJON TWINS"
        20 54 48 45 20 4D
        4F 4A 4F 4E 20 54
        57 49 4E 53
   04A0 00                 1511 	.db 0x00
                           1512 ;my/pres.h:65: void scr_game_over (void) {
                           1513 ;	---------------------------------
                           1514 ; Function scr_game_over
                           1515 ; ---------------------------------
   04A1                    1516 _scr_game_over::
                           1517 ;my/pres.h:66: _x = 11; _y = 15; pr_str ("GAME OVER!");
   04A1 21r00r00      [10] 1518 	ld	hl,#__x + 0
   04A4 36 0B         [10] 1519 	ld	(hl), #0x0B
   04A6 21r01r00      [10] 1520 	ld	hl,#__y + 0
   04A9 36 0F         [10] 1521 	ld	(hl), #0x0F
   04AB 21rB4r04      [10] 1522 	ld	hl,#___str_4
   04AE E5            [11] 1523 	push	hl
   04AF CDr00r00      [17] 1524 	call	_pr_str
   04B2 F1            [10] 1525 	pop	af
   04B3 C9            [10] 1526 	ret
   04B4                    1527 ___str_4:
   04B4 47 41 4D 45 20 4F  1528 	.ascii "GAME OVER!"
        56 45 52 21
   04BE 00                 1529 	.db 0x00
                           1530 ;my/pres.h:69: void scr_the_end (void) {
                           1531 ;	---------------------------------
                           1532 ; Function scr_the_end
                           1533 ; ---------------------------------
   04BF                    1534 _scr_the_end::
                           1535 ;my/pres.h:70: _x = 6; _y = 6; pr_str (" CHERIL VANQUISHED%    ALL ZOMBIES%AND RETURNED SAFELY%   TO THE BOSQUE");
   04BF 21r00r00      [10] 1536 	ld	hl,#__x + 0
   04C2 36 06         [10] 1537 	ld	(hl), #0x06
   04C4 21r01r00      [10] 1538 	ld	hl,#__y + 0
   04C7 36 06         [10] 1539 	ld	(hl), #0x06
   04C9 21rE4r04      [10] 1540 	ld	hl,#___str_5
   04CC E5            [11] 1541 	push	hl
   04CD CDr00r00      [17] 1542 	call	_pr_str
   04D0 F1            [10] 1543 	pop	af
                           1544 ;my/pres.h:72: _x = 12; _y = 25; pr_str ("THE  END");
   04D1 21r00r00      [10] 1545 	ld	hl,#__x + 0
   04D4 36 0C         [10] 1546 	ld	(hl), #0x0C
   04D6 21r01r00      [10] 1547 	ld	hl,#__y + 0
   04D9 36 19         [10] 1548 	ld	(hl), #0x19
   04DB 21r2Cr05      [10] 1549 	ld	hl,#___str_6
   04DE E5            [11] 1550 	push	hl
   04DF CDr00r00      [17] 1551 	call	_pr_str
   04E2 F1            [10] 1552 	pop	af
   04E3 C9            [10] 1553 	ret
   04E4                    1554 ___str_5:
   04E4 20 43 48 45 52 49  1555 	.ascii " CHERIL VANQUISHED%    ALL ZOMBIES%AND RETURNED SAFELY%   TO"
        4C 20 56 41 4E 51
        55 49 53 48 45 44
        25 20 20 20 20 41
        4C 4C 20 5A 4F 4D
        42 49 45 53 25 41
        4E 44 20 52 45 54
        55 52 4E 45 44 20
        53 41 46 45 4C 59
        25 20 20 20 54 4F
   0520 20 54 48 45 20 42  1556 	.ascii " THE BOSQUE"
        4F 53 51 55 45
   052B 00                 1557 	.db 0x00
   052C                    1558 ___str_6:
   052C 54 48 45 20 20 45  1559 	.ascii "THE  END"
        4E 44
   0534 00                 1560 	.db 0x00
                           1561 ;my/pres.h:80: void scr_level (void) {
                           1562 ;	---------------------------------
                           1563 ; Function scr_level
                           1564 ; ---------------------------------
   0535                    1565 _scr_level::
                           1566 ;my/pres.h:81: _x = 12; _y = 14; pr_str ("LEVEL 0"); SG_setTile (17+level);
   0535 21r00r00      [10] 1567 	ld	hl,#__x + 0
   0538 36 0C         [10] 1568 	ld	(hl), #0x0C
   053A 21r01r00      [10] 1569 	ld	hl,#__y + 0
   053D 36 0E         [10] 1570 	ld	(hl), #0x0E
   053F 21r9Cr05      [10] 1571 	ld	hl,#___str_7
   0542 E5            [11] 1572 	push	hl
   0543 CDr00r00      [17] 1573 	call	_pr_str
   0546 F1            [10] 1574 	pop	af
   0547 3ArB8r01      [13] 1575 	ld	a,(#_level + 0)
   054A C6 11         [ 7] 1576 	add	a, #0x11
   054C F5            [11] 1577 	push	af
   054D 33            [ 6] 1578 	inc	sp
   054E CDr00r00      [17] 1579 	call	_SG_setTile
   0551 33            [ 6] 1580 	inc	sp
                           1581 ;my/pres.h:82: _x = 10; _y = 16; pr_str (levelnames [level]);
   0552 21r00r00      [10] 1582 	ld	hl,#__x + 0
   0555 36 0A         [10] 1583 	ld	(hl), #0x0A
   0557 21r01r00      [10] 1584 	ld	hl,#__y + 0
   055A 36 10         [10] 1585 	ld	(hl), #0x10
   055C FD 21rB8r01   [14] 1586 	ld	iy,#_level
   0560 FD 6E 00      [19] 1587 	ld	l,0 (iy)
   0563 26 00         [ 7] 1588 	ld	h,#0x00
   0565 29            [11] 1589 	add	hl, hl
   0566 11r96r05      [10] 1590 	ld	de,#_levelnames
   0569 19            [11] 1591 	add	hl,de
   056A 5E            [ 7] 1592 	ld	e,(hl)
   056B 23            [ 6] 1593 	inc	hl
   056C 56            [ 7] 1594 	ld	d,(hl)
   056D D5            [11] 1595 	push	de
   056E CDr00r00      [17] 1596 	call	_pr_str
   0571 F1            [10] 1597 	pop	af
   0572 C9            [10] 1598 	ret
   0573                    1599 _level0name:
   0573 20 20 54 48 45 20  1600 	.ascii "  THE CITY"
        43 49 54 59
   057D 00                 1601 	.db 0x00
   057E                    1602 _level1name:
   057E 54 48 45 20 46 41  1603 	.ascii "THE FACTORY"
        43 54 4F 52 59
   0589 00                 1604 	.db 0x00
   058A                    1605 _level2name:
   058A 20 54 48 45 20 46  1606 	.ascii " THE FOREST"
        4F 52 45 53 54
   0595 00                 1607 	.db 0x00
   0596                    1608 _levelnames:
   0596r73r05              1609 	.dw _level0name
   0598r7Er05              1610 	.dw _level1name
   059Ar8Ar05              1611 	.dw _level2name
   059C                    1612 ___str_7:
   059C 4C 45 56 45 4C 20  1613 	.ascii "LEVEL 0"
        30
   05A3 00                 1614 	.db 0x00
                           1615 ;my/pres.h:85: void credits (void) {
                           1616 ;	---------------------------------
                           1617 ; Function credits
                           1618 ; ---------------------------------
   05A4                    1619 _credits::
                           1620 ;my/pres.h:86: cls ();
   05A4 CDr00r00      [17] 1621 	call	_cls
                           1622 ;my/pres.h:87: rds16 = 0; rdy = 240;
   05A7 21 00 00      [10] 1623 	ld	hl,#0x0000
   05AA 22r0Ar00      [16] 1624 	ld	(_rds16),hl
   05AD 21r15r00      [10] 1625 	ld	hl,#_rdy + 0
   05B0 36 F0         [10] 1626 	ld	(hl), #0xF0
                           1627 ;my/pres.h:89: _x = 0; _y = 18; 
   05B2 21r00r00      [10] 1628 	ld	hl,#__x + 0
   05B5 36 00         [10] 1629 	ld	(hl), #0x00
   05B7 21r01r00      [10] 1630 	ld	hl,#__y + 0
   05BA 36 12         [10] 1631 	ld	(hl), #0x12
                           1632 ;my/pres.h:90: pr_str ("     CHERIL PERIL CLASSIC%%         ORIGINAL GAME%     @ 2011 THE MOJON TWINS%       REPROGRAMMED GAME%     @ 2018 THE MOJON TWINS");
   05BC 21rF9r05      [10] 1633 	ld	hl,#___str_11+0
   05BF E5            [11] 1634 	push	hl
   05C0 CDr00r00      [17] 1635 	call	_pr_str
                           1636 ;my/pres.h:92: SG_displayOn ();
   05C3 21 40 01      [10] 1637 	ld	hl, #0x0140
   05C6 E3            [19] 1638 	ex	(sp),hl
   05C7 CDr00r00      [17] 1639 	call	_SG_VDPturnOnFeature
   05CA F1            [10] 1640 	pop	af
                           1641 ;my/pres.h:94: while (!(SG_getKeysStatus () & PAD_START) && rds16 < 300) {
   05CB                    1642 00102$:
   05CB CDr00r00      [17] 1643 	call	_SG_getKeysStatus
   05CE CB 65         [ 8] 1644 	bit	4, l
   05D0 20 1E         [12] 1645 	jr	NZ,00104$
   05D2 3Ar0Ar00      [13] 1646 	ld	a,(#_rds16 + 0)
   05D5 D6 2C         [ 7] 1647 	sub	a, #0x2C
   05D7 3Ar0Br00      [13] 1648 	ld	a,(#_rds16 + 1)
   05DA 17            [ 4] 1649 	rla
   05DB 3F            [ 4] 1650 	ccf
   05DC 1F            [ 4] 1651 	rra
   05DD DE 81         [ 7] 1652 	sbc	a, #0x81
   05DF 30 0F         [12] 1653 	jr	NC,00104$
                           1654 ;my/pres.h:97: update_cycle ();
   05E1 CDr00r00      [17] 1655 	call	_update_cycle
                           1656 ;my/pres.h:98: rds16 ++;
   05E4 21r0Ar00      [10] 1657 	ld	hl, #_rds16+0
   05E7 34            [11] 1658 	inc	(hl)
   05E8 20 E1         [12] 1659 	jr	NZ,00102$
   05EA 21r0Br00      [10] 1660 	ld	hl, #_rds16+1
   05ED 34            [11] 1661 	inc	(hl)
   05EE 18 DB         [12] 1662 	jr	00102$
   05F0                    1663 00104$:
                           1664 ;my/pres.h:101: SG_displayOff ();
   05F0 21 40 01      [10] 1665 	ld	hl,#0x0140
   05F3 E5            [11] 1666 	push	hl
   05F4 CDr00r00      [17] 1667 	call	_SG_VDPturnOffFeature
   05F7 F1            [10] 1668 	pop	af
   05F8 C9            [10] 1669 	ret
   05F9                    1670 ___str_11:
   05F9 20 20 20 20 20 43  1671 	.ascii "     CHERIL PERIL CLASSIC%%         ORIGINAL GAME%     @ 201"
        48 45 52 49 4C 20
        50 45 52 49 4C 20
        43 4C 41 53 53 49
        43 25 25 20 20 20
        20 20 20 20 20 20
        4F 52 49 47 49 4E
        41 4C 20 47 41 4D
        45 25 20 20 20 20
        20 40 20 32 30 31
   0635 31 20 54 48 45 20  1672 	.ascii "1 THE MOJON TWINS%       REPROGRAMMED GAME%     @ 2018 THE M"
        4D 4F 4A 4F 4E 20
        54 57 49 4E 53 25
        20 20 20 20 20 20
        20 52 45 50 52 4F
        47 52 41 4D 4D 45
        44 20 47 41 4D 45
        25 20 20 20 20 20
        40 20 32 30 31 38
        20 54 48 45 20 4D
   0671 4F 4A 4F 4E 20 54  1673 	.ascii "OJON TWINS"
        57 49 4E 53
   067B 00                 1674 	.db 0x00
                           1675 ;mainloop/flickscreen.h:7: void flickscreen_do_horizontal (void) {
                           1676 ;	---------------------------------
                           1677 ; Function flickscreen_do_horizontal
                           1678 ; ---------------------------------
   067C                    1679 _flickscreen_do_horizontal::
                           1680 ;mainloop/flickscreen.h:12: (cfx + pvx) < 0
   067C FD 21rB4r02   [14] 1681 	ld	iy,#_cfx
   0680 FD 4E 00      [19] 1682 	ld	c,0 (iy)
   0683 3ArB4r02      [13] 1683 	ld	a,(#_cfx + 0)
   0686 17            [ 4] 1684 	rla
   0687 9F            [ 4] 1685 	sbc	a, a
   0688 47            [ 4] 1686 	ld	b,a
   0689 3Ar4Er00      [13] 1687 	ld	a,(#_pvx + 0)
   068C 81            [ 4] 1688 	add	a, c
   068D 57            [ 4] 1689 	ld	d,a
   068E 3Ar4Fr00      [13] 1690 	ld	a,(#_pvx + 1)
   0691 88            [ 4] 1691 	adc	a, b
   0692 5F            [ 4] 1692 	ld	e,a
                           1693 ;mainloop/flickscreen.h:8: if (prx == 4 && 
   0693 3Ar52r00      [13] 1694 	ld	a,(#_prx + 0)
   0696 D6 04         [ 7] 1695 	sub	a, #0x04
   0698 20 0F         [12] 1696 	jr	NZ,00105$
                           1697 ;mainloop/flickscreen.h:12: (cfx + pvx) < 0
   069A CB 7B         [ 8] 1698 	bit	7, e
   069C 28 0B         [12] 1699 	jr	Z,00105$
                           1700 ;mainloop/flickscreen.h:15: -- n_pant;
   069E 21rBAr01      [10] 1701 	ld	hl, #_n_pant+0
   06A1 35            [11] 1702 	dec	(hl)
                           1703 ;mainloop/flickscreen.h:16: px = 244 << FIXBITS;
   06A2 21 00 3D      [10] 1704 	ld	hl,#0x3D00
   06A5 22r4Ar00      [16] 1705 	ld	(_px),hl
   06A8 C9            [10] 1706 	ret
   06A9                    1707 00105$:
                           1708 ;mainloop/flickscreen.h:17: } else if (prx == 244 && 
   06A9 FD 21r52r00   [14] 1709 	ld	iy,#_prx
   06AD FD 7E 00      [19] 1710 	ld	a,0 (iy)
   06B0 D6 F4         [ 7] 1711 	sub	a, #0xF4
   06B2 C0            [11] 1712 	ret	NZ
                           1713 ;mainloop/flickscreen.h:21: (cfx + pvx) > 0
   06B3 AF            [ 4] 1714 	xor	a, a
   06B4 BA            [ 4] 1715 	cp	a, d
   06B5 9B            [ 4] 1716 	sbc	a, e
   06B6 E2rBBr06      [10] 1717 	jp	PO, 00130$
   06B9 EE 80         [ 7] 1718 	xor	a, #0x80
   06BB                    1719 00130$:
   06BB F0            [11] 1720 	ret	P
                           1721 ;mainloop/flickscreen.h:24: ++ n_pant;
   06BC 21rBAr01      [10] 1722 	ld	hl, #_n_pant+0
   06BF 34            [11] 1723 	inc	(hl)
                           1724 ;mainloop/flickscreen.h:25: px = 4 << FIXBITS;
   06C0 21 00 01      [10] 1725 	ld	hl,#0x0100
   06C3 22r4Ar00      [16] 1726 	ld	(_px),hl
   06C6 C9            [10] 1727 	ret
                           1728 ;mainloop/flickscreen.h:29: void flickscreen_do_vertical (void) {
                           1729 ;	---------------------------------
                           1730 ; Function flickscreen_do_vertical
                           1731 ; ---------------------------------
   06C7                    1732 _flickscreen_do_vertical::
                           1733 ;mainloop/flickscreen.h:42: if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
   06C7 3Ar53r00      [13] 1734 	ld	a,(#_pry + 0)
   06CA B7            [ 4] 1735 	or	a, a
   06CB 20 44         [12] 1736 	jr	NZ,00108$
   06CD 3Ar51r00      [13] 1737 	ld	a,(#_pvy + 1)
   06D0 CB 7F         [ 8] 1738 	bit	7,a
   06D2 28 3D         [12] 1739 	jr	Z,00108$
   06D4 21r7Fr00      [10] 1740 	ld	hl,#_c_map_w
   06D7 3ArBAr01      [13] 1741 	ld	a,(#_n_pant + 0)
   06DA 96            [ 7] 1742 	sub	a, (hl)
   06DB 38 34         [12] 1743 	jr	C,00108$
                           1744 ;mainloop/flickscreen.h:43: n_pant -= c_map_w;
   06DD 21r7Fr00      [10] 1745 	ld	hl,#_c_map_w
   06E0 D5            [11] 1746 	push	de
   06E1 FD 21rBAr01   [14] 1747 	ld	iy,#_n_pant
   06E5 FD E5         [15] 1748 	push	iy
   06E7 D1            [10] 1749 	pop	de
   06E8 1A            [ 7] 1750 	ld	a,(de)
   06E9 96            [ 7] 1751 	sub	a, (hl)
   06EA 12            [ 7] 1752 	ld	(de),a
   06EB D1            [10] 1753 	pop	de
                           1754 ;mainloop/flickscreen.h:44: py = 192 << FIXBITS;
   06EC 21 00 30      [10] 1755 	ld	hl,#0x3000
   06EF 22r4Cr00      [16] 1756 	ld	(_py),hl
                           1757 ;mainloop/flickscreen.h:45: if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
   06F2 3E 60         [ 7] 1758 	ld	a,#0x60
   06F4 FD 21r50r00   [14] 1759 	ld	iy,#_pvy
   06F8 FD BE 00      [19] 1760 	cp	a, 0 (iy)
   06FB 3E FF         [ 7] 1761 	ld	a,#0xFF
   06FD FD 21r50r00   [14] 1762 	ld	iy,#_pvy
   0701 FD 9E 01      [19] 1763 	sbc	a, 1 (iy)
   0704 E2r09r07      [10] 1764 	jp	PO, 00142$
   0707 EE 80         [ 7] 1765 	xor	a, #0x80
   0709                    1766 00142$:
   0709 F0            [11] 1767 	ret	P
   070A 21 60 FF      [10] 1768 	ld	hl,#0xFF60
   070D 22r50r00      [16] 1769 	ld	(_pvy),hl
   0710 C9            [10] 1770 	ret
   0711                    1771 00108$:
                           1772 ;mainloop/flickscreen.h:46: } else if (pry >= 192 && pvy > 0 && n_pant < c_map_size - c_map_w) {
   0711 3Ar53r00      [13] 1773 	ld	a,(#_pry + 0)
   0714 D6 C0         [ 7] 1774 	sub	a, #0xC0
   0716 D8            [11] 1775 	ret	C
   0717 AF            [ 4] 1776 	xor	a, a
   0718 FD 21r50r00   [14] 1777 	ld	iy,#_pvy
   071C FD BE 00      [19] 1778 	cp	a, 0 (iy)
   071F FD 21r50r00   [14] 1779 	ld	iy,#_pvy
   0723 FD 9E 01      [19] 1780 	sbc	a, 1 (iy)
   0726 E2r2Br07      [10] 1781 	jp	PO, 00143$
   0729 EE 80         [ 7] 1782 	xor	a, #0x80
   072B                    1783 00143$:
   072B F0            [11] 1784 	ret	P
   072C 21r81r00      [10] 1785 	ld	hl,#_c_map_size + 0
   072F 5E            [ 7] 1786 	ld	e, (hl)
   0730 16 00         [ 7] 1787 	ld	d,#0x00
   0732 FD 21r7Fr00   [14] 1788 	ld	iy,#_c_map_w
   0736 FD 6E 00      [19] 1789 	ld	l,0 (iy)
   0739 26 00         [ 7] 1790 	ld	h,#0x00
   073B 7B            [ 4] 1791 	ld	a,e
   073C 95            [ 4] 1792 	sub	a, l
   073D 5F            [ 4] 1793 	ld	e,a
   073E 7A            [ 4] 1794 	ld	a,d
   073F 9C            [ 4] 1795 	sbc	a, h
   0740 57            [ 4] 1796 	ld	d,a
   0741 FD 21rBAr01   [14] 1797 	ld	iy,#_n_pant
   0745 FD 66 00      [19] 1798 	ld	h,0 (iy)
   0748 2E 00         [ 7] 1799 	ld	l,#0x00
   074A 7C            [ 4] 1800 	ld	a,h
   074B 93            [ 4] 1801 	sub	a, e
   074C 7D            [ 4] 1802 	ld	a,l
   074D 9A            [ 4] 1803 	sbc	a, d
   074E E2r53r07      [10] 1804 	jp	PO, 00144$
   0751 EE 80         [ 7] 1805 	xor	a, #0x80
   0753                    1806 00144$:
   0753 F0            [11] 1807 	ret	P
                           1808 ;mainloop/flickscreen.h:47: n_pant += c_map_w;
   0754 21r7Fr00      [10] 1809 	ld	hl,#_c_map_w
   0757 D5            [11] 1810 	push	de
   0758 FD 21rBAr01   [14] 1811 	ld	iy,#_n_pant
   075C FD E5         [15] 1812 	push	iy
   075E D1            [10] 1813 	pop	de
   075F 1A            [ 7] 1814 	ld	a,(de)
   0760 86            [ 7] 1815 	add	a, (hl)
   0761 12            [ 7] 1816 	ld	(de),a
   0762 D1            [10] 1817 	pop	de
                           1818 ;mainloop/flickscreen.h:48: py = 0;
   0763 21 00 00      [10] 1819 	ld	hl,#0x0000
   0766 22r4Cr00      [16] 1820 	ld	(_py),hl
   0769 C9            [10] 1821 	ret
                           1822 ;mainloop.h:7: void game_init (void) {
                           1823 ;	---------------------------------
                           1824 ; Function game_init
                           1825 ; ---------------------------------
   076A                    1826 _game_init::
                           1827 ;mainloop.h:9: win_level = game_over = 0;
   076A 21rC0r01      [10] 1828 	ld	hl,#_game_over + 0
   076D 36 00         [10] 1829 	ld	(hl), #0x00
   076F 21rBFr01      [10] 1830 	ld	hl,#_win_level + 0
   0772 36 00         [10] 1831 	ld	(hl), #0x00
   0774 FD 21rB8r01   [14] 1832 	ld	iy,#_level
   0778 FD 6E 00      [19] 1833 	ld	l,0 (iy)
   077B 26 00         [ 7] 1834 	ld	h,#0x00
   077D 29            [11] 1835 	add	hl, hl
   077E 4D            [ 4] 1836 	ld	c, l
   077F 44            [ 4] 1837 	ld	b, h
   0780 21rFCr01      [10] 1838 	ld	hl,#_l_ts_tmaps
   0783 09            [11] 1839 	add	hl,bc
   0784 7E            [ 7] 1840 	ld	a,(hl)
   0785 FD 21r82r00   [14] 1841 	ld	iy,#_c_ts_tmaps
   0789 FD 77 00      [19] 1842 	ld	0 (iy),a
   078C 23            [ 6] 1843 	inc	hl
   078D 7E            [ 7] 1844 	ld	a,(hl)
   078E 32r83r00      [13] 1845 	ld	(#_c_ts_tmaps + 1),a
                           1846 ;mainloop/asset_setup.h:10: c_behs = 		l_behs [level];
   0791 21r02r02      [10] 1847 	ld	hl,#_l_behs
   0794 09            [11] 1848 	add	hl,bc
   0795 7E            [ 7] 1849 	ld	a,(hl)
   0796 FD 21r84r00   [14] 1850 	ld	iy,#_c_behs
   079A FD 77 00      [19] 1851 	ld	0 (iy),a
   079D 23            [ 6] 1852 	inc	hl
   079E 7E            [ 7] 1853 	ld	a,(hl)
   079F 32r85r00      [13] 1854 	ld	(#_c_behs + 1),a
                           1855 ;mainloop/asset_setup.h:11: spr_enems = 	l_spr_enems [level];
   07A2 21r0Er02      [10] 1856 	ld	hl,#_l_spr_enems
   07A5 09            [11] 1857 	add	hl,bc
   07A6 7E            [ 7] 1858 	ld	a,(hl)
   07A7 FD 21r86r00   [14] 1859 	ld	iy,#_spr_enems
   07AB FD 77 00      [19] 1860 	ld	0 (iy),a
   07AE 23            [ 6] 1861 	inc	hl
   07AF 7E            [ 7] 1862 	ld	a,(hl)
   07B0 32r87r00      [13] 1863 	ld	(#_spr_enems + 1),a
                           1864 ;mainloop/asset_setup.h:13: c_map = 		l_map [level];
   07B3 21r14r02      [10] 1865 	ld	hl,#_l_map
   07B6 09            [11] 1866 	add	hl,bc
   07B7 7E            [ 7] 1867 	ld	a,(hl)
   07B8 FD 21r88r00   [14] 1868 	ld	iy,#_c_map
   07BC FD 77 00      [19] 1869 	ld	0 (iy),a
   07BF 23            [ 6] 1870 	inc	hl
   07C0 7E            [ 7] 1871 	ld	a,(hl)
   07C1 32r89r00      [13] 1872 	ld	(#_c_map + 1),a
                           1873 ;mainloop/asset_setup.h:20: c_decos = 	l_decos [level];
   07C4 3Er1A         [ 7] 1874 	ld	a,#<(_l_decos)
   07C6 21rB8r01      [10] 1875 	ld	hl,#_level
   07C9 86            [ 7] 1876 	add	a, (hl)
   07CA 5F            [ 4] 1877 	ld	e,a
   07CB 3Es02         [ 7] 1878 	ld	a,#>(_l_decos)
   07CD CE 00         [ 7] 1879 	adc	a, #0x00
   07CF 57            [ 4] 1880 	ld	d,a
   07D0 1A            [ 7] 1881 	ld	a,(de)
   07D1 32r8Ar00      [13] 1882 	ld	(#_c_decos + 0),a
                           1883 ;mainloop/asset_setup.h:23: c_locks = 	l_locks [level];
   07D4 21r1Dr02      [10] 1884 	ld	hl,#_l_locks
   07D7 09            [11] 1885 	add	hl,bc
   07D8 7E            [ 7] 1886 	ld	a,(hl)
   07D9 FD 21r8Br00   [14] 1887 	ld	iy,#_c_locks
   07DD FD 77 00      [19] 1888 	ld	0 (iy),a
   07E0 23            [ 6] 1889 	inc	hl
   07E1 7E            [ 7] 1890 	ld	a,(hl)
   07E2 32r8Cr00      [13] 1891 	ld	(#_c_locks + 1),a
                           1892 ;mainloop/asset_setup.h:25: l_n_bolts [level];
   07E5 3Er23         [ 7] 1893 	ld	a,#<(_l_n_bolts)
   07E7 21rB8r01      [10] 1894 	ld	hl,#_level
   07EA 86            [ 7] 1895 	add	a, (hl)
   07EB 5F            [ 4] 1896 	ld	e,a
   07EC 3Es02         [ 7] 1897 	ld	a,#>(_l_n_bolts)
   07EE CE 00         [ 7] 1898 	adc	a, #0x00
   07F0 57            [ 4] 1899 	ld	d,a
   07F1 1A            [ 7] 1900 	ld	a,(de)
   07F2 32r91r00      [13] 1901 	ld	(#_c_max_bolts + 0),a
                           1902 ;mainloop/asset_setup.h:28: c_enems = 		l_enems [level];
   07F5 21r26r02      [10] 1903 	ld	hl,#_l_enems
   07F8 09            [11] 1904 	add	hl,bc
   07F9 7E            [ 7] 1905 	ld	a,(hl)
   07FA FD 21r8Dr00   [14] 1906 	ld	iy,#_c_enems
   07FE FD 77 00      [19] 1907 	ld	0 (iy),a
   0801 23            [ 6] 1908 	inc	hl
   0802 7E            [ 7] 1909 	ld	a,(hl)
   0803 32r8Er00      [13] 1910 	ld	(#_c_enems + 1),a
                           1911 ;mainloop/asset_setup.h:29: c_hotspots = 	l_hotspots [level];	
   0806 21r2Cr02      [10] 1912 	ld	hl,#_l_hotspots
   0809 09            [11] 1913 	add	hl,bc
   080A 7E            [ 7] 1914 	ld	a,(hl)
   080B FD 21r8Fr00   [14] 1915 	ld	iy,#_c_hotspots
   080F FD 77 00      [19] 1916 	ld	0 (iy),a
   0812 23            [ 6] 1917 	inc	hl
   0813 7E            [ 7] 1918 	ld	a,(hl)
   0814 32r90r00      [13] 1919 	ld	(#_c_hotspots + 1),a
                           1920 ;mainloop/asset_setup.h:31: c_max_enems = 	l_player_max_enems [level];
   0817 3ErED         [ 7] 1921 	ld	a,#<(_l_player_max_enems)
   0819 21rB8r01      [10] 1922 	ld	hl,#_level
   081C 86            [ 7] 1923 	add	a, (hl)
   081D 5F            [ 4] 1924 	ld	e,a
   081E 3Es01         [ 7] 1925 	ld	a,#>(_l_player_max_enems)
   0820 CE 00         [ 7] 1926 	adc	a, #0x00
   0822 57            [ 4] 1927 	ld	d,a
   0823 1A            [ 7] 1928 	ld	a,(de)
   0824 32rB9r01      [13] 1929 	ld	(#_c_max_enems + 0),a
                           1930 ;mainloop/asset_setup.h:33: c_map_w = 		l_map_w [level];
   0827 3ErE4         [ 7] 1931 	ld	a,#<(_l_map_w)
   0829 21rB8r01      [10] 1932 	ld	hl,#_level
   082C 86            [ 7] 1933 	add	a, (hl)
   082D 5F            [ 4] 1934 	ld	e,a
   082E 3Es01         [ 7] 1935 	ld	a,#>(_l_map_w)
   0830 CE 00         [ 7] 1936 	adc	a, #0x00
   0832 57            [ 4] 1937 	ld	d,a
   0833 1A            [ 7] 1938 	ld	a,(de)
   0834 32r7Fr00      [13] 1939 	ld	(#_c_map_w + 0),a
                           1940 ;mainloop/asset_setup.h:34: c_map_h = 		l_map_h [level];
   0837 3ErE7         [ 7] 1941 	ld	a,#<(_l_map_h)
   0839 21rB8r01      [10] 1942 	ld	hl,#_level
   083C 86            [ 7] 1943 	add	a, (hl)
   083D 5F            [ 4] 1944 	ld	e,a
   083E 3Es01         [ 7] 1945 	ld	a,#>(_l_map_h)
   0840 CE 00         [ 7] 1946 	adc	a, #0x00
   0842 57            [ 4] 1947 	ld	d,a
   0843 1A            [ 7] 1948 	ld	a,(de)
                           1949 ;mainloop/asset_setup.h:84: rda = c_map_h; c_map_size = 0; while (rda --) c_map_size += c_map_w;
   0844 32r80r00      [13] 1950 	ld	(#_c_map_h + 0),a
   0847 32r18r00      [13] 1951 	ld	(#_rda + 0),a
   084A 21r81r00      [10] 1952 	ld	hl,#_c_map_size + 0
   084D 36 00         [10] 1953 	ld	(hl), #0x00
   084F                    1954 00101$:
   084F 21r18r00      [10] 1955 	ld	hl,#_rda + 0
   0852 56            [ 7] 1956 	ld	d, (hl)
   0853 21r18r00      [10] 1957 	ld	hl, #_rda+0
   0856 35            [11] 1958 	dec	(hl)
   0857 7A            [ 4] 1959 	ld	a,d
   0858 B7            [ 4] 1960 	or	a, a
   0859 28 11         [12] 1961 	jr	Z,00103$
   085B 21r7Fr00      [10] 1962 	ld	hl,#_c_map_w
   085E D5            [11] 1963 	push	de
   085F FD 21r81r00   [14] 1964 	ld	iy,#_c_map_size
   0863 FD E5         [15] 1965 	push	iy
   0865 D1            [10] 1966 	pop	de
   0866 1A            [ 7] 1967 	ld	a,(de)
   0867 86            [ 7] 1968 	add	a, (hl)
   0868 12            [ 7] 1969 	ld	(de),a
   0869 D1            [10] 1970 	pop	de
   086A 18 E3         [12] 1971 	jr	00101$
   086C                    1972 00103$:
                           1973 ;my/level_pattern_unpacker.h:3: unpack_bg_patterns (l_ts_patterns [level], l_ts_colours [level], 64*8, 7);
   086C 21rF6r01      [10] 1974 	ld	hl,#_l_ts_colours
   086F 09            [11] 1975 	add	hl,bc
   0870 5E            [ 7] 1976 	ld	e,(hl)
   0871 23            [ 6] 1977 	inc	hl
   0872 56            [ 7] 1978 	ld	d,(hl)
   0873 21rF0r01      [10] 1979 	ld	hl,#_l_ts_patterns
   0876 09            [11] 1980 	add	hl,bc
   0877 4E            [ 7] 1981 	ld	c,(hl)
   0878 23            [ 6] 1982 	inc	hl
   0879 46            [ 7] 1983 	ld	b,(hl)
   087A 3E 07         [ 7] 1984 	ld	a,#0x07
   087C F5            [11] 1985 	push	af
   087D 33            [ 6] 1986 	inc	sp
   087E 21 00 02      [10] 1987 	ld	hl,#0x0200
   0881 E5            [11] 1988 	push	hl
   0882 D5            [11] 1989 	push	de
   0883 C5            [11] 1990 	push	bc
   0884 CDr00r00      [17] 1991 	call	_unpack_bg_patterns
   0887 21 07 00      [10] 1992 	ld	hl,#7
   088A 39            [11] 1993 	add	hl,sp
   088B F9            [ 6] 1994 	ld	sp,hl
                           1995 ;my/level_pattern_unpacker.h:4: aPLib_depack_VRAM (SGT_BASE + 160*8, l_spr_patterns [level]);
   088C FD 21rB8r01   [14] 1996 	ld	iy,#_level
   0890 FD 6E 00      [19] 1997 	ld	l,0 (iy)
   0893 26 00         [ 7] 1998 	ld	h,#0x00
   0895 29            [11] 1999 	add	hl, hl
   0896 11r08r02      [10] 2000 	ld	de,#_l_spr_patterns
   0899 19            [11] 2001 	add	hl,de
   089A 5E            [ 7] 2002 	ld	e,(hl)
   089B 23            [ 6] 2003 	inc	hl
   089C 56            [ 7] 2004 	ld	d,(hl)
   089D D5            [11] 2005 	push	de
   089E 21 00 3D      [10] 2006 	ld	hl,#0x3D00
   08A1 E5            [11] 2007 	push	hl
   08A2 CDr00r00      [17] 2008 	call	_aPLib_depack_VRAM
   08A5 F1            [10] 2009 	pop	af
   08A6 F1            [10] 2010 	pop	af
                           2011 ;mainloop.h:17: cls ();
   08A7 CDr00r00      [17] 2012 	call	_cls
                           2013 ;mainloop.h:19: draw_game_frame ();
   08AA CDrD2r02      [17] 2014 	call	_draw_game_frame
                           2015 ;mainloop.h:22: hotspots_load ();
   08AD CDr00r00      [17] 2016 	call	_hotspots_load
                           2017 ;mainloop.h:25: memfill (lkact, 1, c_max_bolts);
   08B0 21r91r00      [10] 2018 	ld	hl,#_c_max_bolts + 0
   08B3 4E            [ 7] 2019 	ld	c, (hl)
   08B4 06 00         [ 7] 2020 	ld	b,#0x00
   08B6 11rE4r01      [10] 2021 	ld	de,#_lkact
   08B9 C5            [11] 2022 	push	bc
   08BA 3E 01         [ 7] 2023 	ld	a,#0x01
   08BC F5            [11] 2024 	push	af
   08BD 33            [ 6] 2025 	inc	sp
   08BE D5            [11] 2026 	push	de
   08BF CDr00r00      [17] 2027 	call	_memfill
   08C2 F1            [10] 2028 	pop	af
   08C3 F1            [10] 2029 	pop	af
   08C4 33            [ 6] 2030 	inc	sp
                           2031 ;mainloop.h:28: if (!warp_to_level)	{
   08C5 3ArC1r01      [13] 2032 	ld	a,(#_warp_to_level + 0)
   08C8 B7            [ 4] 2033 	or	a, a
   08C9 20 43         [12] 2034 	jr	NZ,00105$
                           2035 ;mainloop.h:29: n_pant = SCR_INI;
   08CB 11rDBr01      [10] 2036 	ld	de,#_l_scr_ini+0
   08CE 2ArB8r01      [16] 2037 	ld	hl,(_level)
   08D1 26 00         [ 7] 2038 	ld	h,#0x00
   08D3 19            [11] 2039 	add	hl,de
   08D4 7E            [ 7] 2040 	ld	a,(hl)
   08D5 32rBAr01      [13] 2041 	ld	(#_n_pant + 0),a
                           2042 ;mainloop.h:30: px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
   08D8 11rDEr01      [10] 2043 	ld	de,#_l_ini_x+0
   08DB 2ArB8r01      [16] 2044 	ld	hl,(_level)
   08DE 26 00         [ 7] 2045 	ld	h,#0x00
   08E0 19            [11] 2046 	add	hl,de
   08E1 6E            [ 7] 2047 	ld	l,(hl)
   08E2 26 00         [ 7] 2048 	ld	h,#0x00
   08E4 29            [11] 2049 	add	hl, hl
   08E5 29            [11] 2050 	add	hl, hl
   08E6 29            [11] 2051 	add	hl, hl
   08E7 29            [11] 2052 	add	hl, hl
   08E8 01 04 00      [10] 2053 	ld	bc,#0x0004
   08EB 09            [11] 2054 	add	hl,bc
   08EC 29            [11] 2055 	add	hl, hl
   08ED 29            [11] 2056 	add	hl, hl
   08EE 29            [11] 2057 	add	hl, hl
   08EF 29            [11] 2058 	add	hl, hl
   08F0 29            [11] 2059 	add	hl, hl
   08F1 29            [11] 2060 	add	hl, hl
   08F2 22r4Ar00      [16] 2061 	ld	(_px),hl
                           2062 ;mainloop.h:31: py = (PLAYER_INI_Y << 4) << FIXBITS;
   08F5 11rE1r01      [10] 2063 	ld	de,#_l_ini_y+0
   08F8 2ArB8r01      [16] 2064 	ld	hl,(_level)
   08FB 26 00         [ 7] 2065 	ld	h,#0x00
   08FD 19            [11] 2066 	add	hl,de
   08FE 6E            [ 7] 2067 	ld	l,(hl)
   08FF 26 00         [ 7] 2068 	ld	h,#0x00
   0901 29            [11] 2069 	add	hl, hl
   0902 29            [11] 2070 	add	hl, hl
   0903 29            [11] 2071 	add	hl, hl
   0904 29            [11] 2072 	add	hl, hl
   0905 29            [11] 2073 	add	hl, hl
   0906 29            [11] 2074 	add	hl, hl
   0907 29            [11] 2075 	add	hl, hl
   0908 29            [11] 2076 	add	hl, hl
   0909 29            [11] 2077 	add	hl, hl
   090A 29            [11] 2078 	add	hl, hl
   090B 22r4Cr00      [16] 2079 	ld	(_py),hl
   090E                    2080 00105$:
                           2081 ;mainloop.h:33: player_to_pixels ();
   090E CDr00r00      [17] 2082 	call	_player_to_pixels
                           2083 ;mainloop.h:34: player_init ();
   0911 CDr00r00      [17] 2084 	call	_player_init
                           2085 ;mainloop.h:37: enems_persistent_load ();
   0914 CDr00r00      [17] 2086 	call	_enems_persistent_load
                           2087 ;mainloop.h:41: enems_persistent_deaths_load ();
   0917 CDr00r00      [17] 2088 	call	_enems_persistent_deaths_load
                           2089 ;mainloop.h:53: pkeys = 0;
   091A 21r70r00      [10] 2090 	ld	hl,#_pkeys + 0
   091D 36 00         [10] 2091 	ld	(hl), #0x00
                           2092 ;mainloop.h:57: res_on = 0;
   091F 21rB1r02      [10] 2093 	ld	hl,#_res_on + 0
   0922 36 00         [10] 2094 	ld	(hl), #0x00
                           2095 ;mainloop.h:58: res_disable = 0;
   0924 21rB0r02      [10] 2096 	ld	hl,#_res_disable + 0
   0927 36 00         [10] 2097 	ld	(hl), #0x00
                           2098 ;mainloop.h:66: no_ct = 0;
   0929 21rCAr01      [10] 2099 	ld	hl,#_no_ct + 0
   092C 36 00         [10] 2100 	ld	(hl), #0x00
                           2101 ;mainloop.h:105: half_life = 0;
   092E 21rBCr01      [10] 2102 	ld	hl,#_half_life + 0
   0931 36 00         [10] 2103 	ld	(hl), #0x00
                           2104 ;mainloop.h:106: frame_counter = 0;
   0933 21rBDr01      [10] 2105 	ld	hl,#_frame_counter + 0
   0936 36 00         [10] 2106 	ld	(hl), #0x00
                           2107 ;mainloop.h:107: olife = oammo = oobjs = okeys = 0xff;
   0938 21rC5r01      [10] 2108 	ld	hl,#_okeys + 0
   093B 36 FF         [10] 2109 	ld	(hl), #0xFF
   093D 21rC6r01      [10] 2110 	ld	hl,#_oobjs + 0
   0940 36 FF         [10] 2111 	ld	(hl), #0xFF
   0942 21rC7r01      [10] 2112 	ld	hl,#_oammo + 0
   0945 36 FF         [10] 2113 	ld	(hl), #0xFF
   0947 21rC4r01      [10] 2114 	ld	hl,#_olife + 0
   094A 36 FF         [10] 2115 	ld	(hl), #0xFF
                           2116 ;mainloop.h:108: okilled = 0xff;
   094C 21rC8r01      [10] 2117 	ld	hl,#_okilled + 0
   094F 36 FF         [10] 2118 	ld	(hl), #0xFF
                           2119 ;my/extra_inits.h:7: springs_on = (level == 1);
   0951 3ArB8r01      [13] 2120 	ld	a,(#_level + 0)
   0954 3D            [ 4] 2121 	dec	a
   0955 20 04         [12] 2122 	jr	NZ,00120$
   0957 3E 01         [ 7] 2123 	ld	a,#0x01
   0959 18 01         [12] 2124 	jr	00121$
   095B                    2125 00120$:
   095B AF            [ 4] 2126 	xor	a,a
   095C                    2127 00121$:
   095C 32rB5r02      [13] 2128 	ld	(#_springs_on + 0),a
   095F C9            [10] 2129 	ret
                           2130 ;mainloop.h:117: void prepare_scr (void) {
                           2131 ;	---------------------------------
                           2132 ; Function prepare_scr
                           2133 ; ---------------------------------
   0960                    2134 _prepare_scr::
                           2135 ;mainloop.h:118: SG_displayOff ();
   0960 21 40 01      [10] 2136 	ld	hl,#0x0140
   0963 E5            [11] 2137 	push	hl
   0964 CDr00r00      [17] 2138 	call	_SG_VDPturnOffFeature
   0967 F1            [10] 2139 	pop	af
                           2140 ;mainloop.h:128: ft = 0;
   0968 FD 21r7Er00   [14] 2141 	ld	iy,#_ft
   096C FD 36 00 00   [19] 2142 	ld	0 (iy),#0x00
                           2143 ;mainloop.h:130: update_list [update_index] = 0xff;
   0970 3Ar94r00      [13] 2144 	ld	a,(#_update_index + 0)
   0973 C6r95         [ 7] 2145 	add	a, #<(_update_list)
   0975 6F            [ 4] 2146 	ld	l, a
   0976 3E 00         [ 7] 2147 	ld	a, #0x00
   0978 CEs00         [ 7] 2148 	adc	a, #>(_update_list)
   097A 67            [ 4] 2149 	ld	h, a
   097B 36 FF         [10] 2150 	ld	(hl),#0xFF
                           2151 ;mainloop.h:131: SG_doUpdateList ();
   097D CDr00r00      [17] 2152 	call	_SG_doUpdateList
                           2153 ;mainloop.h:132: clear_update_list ();
   0980 CDr00r00      [17] 2154 	call	_clear_update_list
                           2155 ;mainloop.h:141: enems_persistent_update ();
   0983 CDr00r00      [17] 2156 	call	_enems_persistent_update
                           2157 ;mainloop.h:144: enems_load ();
   0986 CDr00r00      [17] 2158 	call	_enems_load
                           2159 ;mainloop.h:145: hotspots_create ();	
   0989 CDr72r02      [17] 2160 	call	_hotspots_create
                           2161 ;mainloop.h:162: chac_chacs_queue_write = chac_chacs_queue_read = 0;
   098C 21rAEr02      [10] 2162 	ld	hl,#_chac_chacs_queue_read + 0
   098F 36 00         [10] 2163 	ld	(hl), #0x00
   0991 21rAFr02      [10] 2164 	ld	hl,#_chac_chacs_queue_write + 0
   0994 36 00         [10] 2165 	ld	(hl), #0x00
                           2166 ;mainloop.h:163: max_chac_chacs = 0;
   0996 21r8Dr02      [10] 2167 	ld	hl,#_max_chac_chacs + 0
   0999 36 00         [10] 2168 	ld	(hl), #0x00
                           2169 ;mainloop.h:172: draw_scr ();
   099B CDr00r00      [17] 2170 	call	_draw_scr
                           2171 ;mainloop.h:210: SG_initSprites ();
   099E CDr00r00      [17] 2172 	call	_SG_initSprites
                           2173 ;my/on_entering_screen.h:8: if (mode_no_resonators) {
   09A1 3ArB7r02      [13] 2174 	ld	a,(#_mode_no_resonators + 0)
   09A4 B7            [ 4] 2175 	or	a, a
   09A5 28 11         [12] 2176 	jr	Z,00104$
                           2177 ;my/on_entering_screen.h:9: res_disable = 1;
   09A7 21rB0r02      [10] 2178 	ld	hl,#_res_disable + 0
   09AA 36 01         [10] 2179 	ld	(hl), #0x01
                           2180 ;my/on_entering_screen.h:10: if (hrt == HOTSPOT_TYPE_RESONATOR) hrt = 0;
   09AC 3Ar7Cr00      [13] 2181 	ld	a,(#_hrt + 0)
   09AF D6 04         [ 7] 2182 	sub	a, #0x04
   09B1 20 05         [12] 2183 	jr	NZ,00104$
   09B3 21r7Cr00      [10] 2184 	ld	hl,#_hrt + 0
   09B6 36 00         [10] 2185 	ld	(hl), #0x00
   09B8                    2186 00104$:
                           2187 ;mainloop.h:227: gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
   09B8 21r08r00      [10] 2188 	ld	hl,#_gpit + 0
   09BB 36 03         [10] 2189 	ld	(hl), #0x03
   09BD                    2190 00105$:
   09BD 21r08r00      [10] 2191 	ld	hl,#_gpit + 0
   09C0 5E            [ 7] 2192 	ld	e, (hl)
   09C1 21r08r00      [10] 2193 	ld	hl, #_gpit+0
   09C4 35            [11] 2194 	dec	(hl)
   09C5 7B            [ 4] 2195 	ld	a,e
   09C6 B7            [ 4] 2196 	or	a, a
   09C7 28 1E         [12] 2197 	jr	Z,00107$
   09C9 3Er42         [ 7] 2198 	ld	a,#<(_en_spr_id)
   09CB 21r08r00      [10] 2199 	ld	hl,#_gpit
   09CE 86            [ 7] 2200 	add	a, (hl)
   09CF 5F            [ 4] 2201 	ld	e,a
   09D0 3Es02         [ 7] 2202 	ld	a,#>(_en_spr_id)
   09D2 CE 00         [ 7] 2203 	adc	a, #0x00
   09D4 57            [ 4] 2204 	ld	d,a
   09D5 FD 21r11r02   [14] 2205 	ld	iy,#_en_s
   09D9 ED 4Br08r00   [20] 2206 	ld	bc,(_gpit)
   09DD 06 00         [ 7] 2207 	ld	b,#0x00
   09DF FD 09         [15] 2208 	add	iy, bc
   09E1 FD 7E 00      [19] 2209 	ld	a, 0 (iy)
   09E4 12            [ 7] 2210 	ld	(de),a
   09E5 18 D6         [12] 2211 	jr	00105$
   09E7                    2212 00107$:
                           2213 ;mainloop.h:229: prx = px >> FIXBITS; pry = py >> FIXBITS;
   09E7 2Ar4Ar00      [16] 2214 	ld	hl,(_px)
   09EA CB 2C         [ 8] 2215 	sra	h
   09EC CB 1D         [ 8] 2216 	rr	l
   09EE CB 2C         [ 8] 2217 	sra	h
   09F0 CB 1D         [ 8] 2218 	rr	l
   09F2 CB 2C         [ 8] 2219 	sra	h
   09F4 CB 1D         [ 8] 2220 	rr	l
   09F6 CB 2C         [ 8] 2221 	sra	h
   09F8 CB 1D         [ 8] 2222 	rr	l
   09FA CB 2C         [ 8] 2223 	sra	h
   09FC CB 1D         [ 8] 2224 	rr	l
   09FE CB 2C         [ 8] 2225 	sra	h
   0A00 CB 1D         [ 8] 2226 	rr	l
   0A02 FD 21r52r00   [14] 2227 	ld	iy,#_prx
   0A06 FD 75 00      [19] 2228 	ld	0 (iy),l
   0A09 2Ar4Cr00      [16] 2229 	ld	hl,(_py)
   0A0C CB 2C         [ 8] 2230 	sra	h
   0A0E CB 1D         [ 8] 2231 	rr	l
   0A10 CB 2C         [ 8] 2232 	sra	h
   0A12 CB 1D         [ 8] 2233 	rr	l
   0A14 CB 2C         [ 8] 2234 	sra	h
   0A16 CB 1D         [ 8] 2235 	rr	l
   0A18 CB 2C         [ 8] 2236 	sra	h
   0A1A CB 1D         [ 8] 2237 	rr	l
   0A1C CB 2C         [ 8] 2238 	sra	h
   0A1E CB 1D         [ 8] 2239 	rr	l
   0A20 CB 2C         [ 8] 2240 	sra	h
   0A22 CB 1D         [ 8] 2241 	rr	l
   0A24 FD 21r53r00   [14] 2242 	ld	iy,#_pry
   0A28 FD 75 00      [19] 2243 	ld	0 (iy),l
                           2244 ;mainloop.h:234: player_move ();
   0A2B CDr00r00      [17] 2245 	call	_player_move
                           2246 ;mainloop.h:235: enems_move ();
   0A2E CDr00r00      [17] 2247 	call	_enems_move
                           2248 ;mainloop.h:237: if (hrt) hotspots_paint ();
   0A31 3Ar7Cr00      [13] 2249 	ld	a,(#_hrt + 0)
   0A34 B7            [ 4] 2250 	or	a, a
   0A35 28 03         [12] 2251 	jr	Z,00109$
   0A37 CDr35r02      [17] 2252 	call	_hotspots_paint
   0A3A                    2253 00109$:
                           2254 ;mainloop.h:252: hud_update ();
   0A3A CDrDBr02      [17] 2255 	call	_hud_update
                           2256 ;mainloop.h:253: UNSAFE_SG_copySpritestoSAT ();
   0A3D CDr00r00      [17] 2257 	call	_UNSAFE_SG_copySpritestoSAT
                           2258 ;mainloop.h:254: update_list [update_index] = 0xff;
   0A40 3Ar94r00      [13] 2259 	ld	a,(#_update_index + 0)
   0A43 C6r95         [ 7] 2260 	add	a, #<(_update_list)
   0A45 6F            [ 4] 2261 	ld	l, a
   0A46 3E 00         [ 7] 2262 	ld	a, #0x00
   0A48 CEs00         [ 7] 2263 	adc	a, #>(_update_list)
   0A4A 67            [ 4] 2264 	ld	h, a
   0A4B 36 FF         [10] 2265 	ld	(hl),#0xFF
                           2266 ;mainloop.h:255: SG_doUpdateList ();
   0A4D CDr00r00      [17] 2267 	call	_SG_doUpdateList
                           2268 ;mainloop.h:256: clear_update_list ();	
   0A50 CDr00r00      [17] 2269 	call	_clear_update_list
                           2270 ;mainloop.h:257: SG_displayOn ();
   0A53 21 40 01      [10] 2271 	ld	hl,#0x0140
   0A56 E5            [11] 2272 	push	hl
   0A57 CDr00r00      [17] 2273 	call	_SG_VDPturnOnFeature
   0A5A F1            [10] 2274 	pop	af
   0A5B C9            [10] 2275 	ret
                           2276 ;mainloop.h:260: void game_loop (void) {
                           2277 ;	---------------------------------
                           2278 ; Function game_loop
                           2279 ; ---------------------------------
   0A5C                    2280 _game_loop::
                           2281 ;mainloop.h:267: clear_update_list ();
   0A5C CDr00r00      [17] 2282 	call	_clear_update_list
                           2283 ;mainloop.h:270: on_pant = 99; ft = 1; fade_delay = 1;
   0A5F 21rBBr01      [10] 2284 	ld	hl,#_on_pant + 0
   0A62 36 63         [10] 2285 	ld	(hl), #0x63
   0A64 21r7Er00      [10] 2286 	ld	hl,#_ft + 0
   0A67 36 01         [10] 2287 	ld	(hl), #0x01
   0A69 21rF6r00      [10] 2288 	ld	hl,#_fade_delay + 0
   0A6C 36 01         [10] 2289 	ld	(hl), #0x01
                           2290 ;mainloop.h:274: SG_displayOn ();
   0A6E 21 40 01      [10] 2291 	ld	hl,#0x0140
   0A71 E5            [11] 2292 	push	hl
   0A72 CDr00r00      [17] 2293 	call	_SG_VDPturnOnFeature
   0A75 F1            [10] 2294 	pop	af
                           2295 ;mainloop.h:285: ntsc_frame = level_reset = warp_to_level = 0; 
   0A76 21rC1r01      [10] 2296 	ld	hl,#_warp_to_level + 0
   0A79 36 00         [10] 2297 	ld	(hl), #0x00
   0A7B 21rC2r01      [10] 2298 	ld	hl,#_level_reset + 0
   0A7E 36 00         [10] 2299 	ld	(hl), #0x00
   0A80 21r93r00      [10] 2300 	ld	hl,#_ntsc_frame + 0
   0A83 36 00         [10] 2301 	ld	(hl), #0x00
                           2302 ;mainloop.h:286: ticker = 50;
   0A85 21r1Fr00      [10] 2303 	ld	hl,#_ticker + 0
   0A88 36 32         [10] 2304 	ld	(hl), #0x32
                           2305 ;mainloop.h:288: while (1) {
   0A8A                    2306 00167$:
                           2307 ;mainloop.h:295: hud_update ();
   0A8A CDrDBr02      [17] 2308 	call	_hud_update
                           2309 ;mainloop.h:299: if (pkill) player_kill ();
   0A8D 3Ar6Br00      [13] 2310 	ld	a,(#_pkill + 0)
   0A90 B7            [ 4] 2311 	or	a, a
   0A91 28 03         [12] 2312 	jr	Z,00102$
   0A93 CDr00r00      [17] 2313 	call	_player_kill
   0A96                    2314 00102$:
                           2315 ;mainloop.h:300: if (game_over || level_reset) break;			
   0A96 3ArC0r01      [13] 2316 	ld	a,(#_game_over + 0)
   0A99 B7            [ 4] 2317 	or	a, a
   0A9A C2r00r0D      [10] 2318 	jp	NZ,00168$
   0A9D 3ArC2r01      [13] 2319 	ld	a,(#_level_reset + 0)
   0AA0 B7            [ 4] 2320 	or	a, a
   0AA1 C2r00r0D      [10] 2321 	jp	NZ,00168$
                           2322 ;mainloop.h:306: flick_override = 0;
   0AA4 21rC3r01      [10] 2323 	ld	hl,#_flick_override + 0
   0AA7 36 00         [10] 2324 	ld	(hl), #0x00
                           2325 ;mainloop.h:309: flickscreen_do_horizontal ();
   0AA9 CDr7Cr06      [17] 2326 	call	_flickscreen_do_horizontal
                           2327 ;mainloop.h:310: flickscreen_do_vertical ();
   0AAC CDrC7r06      [17] 2328 	call	_flickscreen_do_vertical
                           2329 ;mainloop.h:316: if (on_pant != n_pant) {
   0AAF 3ArBBr01      [13] 2330 	ld	a,(#_on_pant + 0)
   0AB2 FD 21rBAr01   [14] 2331 	ld	iy,#_n_pant
   0AB6 FD 96 00      [19] 2332 	sub	a, 0 (iy)
   0AB9 28 09         [12] 2333 	jr	Z,00109$
                           2334 ;mainloop.h:317: prepare_scr ();
   0ABB CDr60r09      [17] 2335 	call	_prepare_scr
                           2336 ;mainloop.h:318: on_pant = n_pant;
   0ABE 3ArBAr01      [13] 2337 	ld	a,(#_n_pant + 0)
   0AC1 32rBBr01      [13] 2338 	ld	(#_on_pant + 0),a
   0AC4                    2339 00109$:
                           2340 ;mainloop.h:337: SG_waitForVBlank ();
   0AC4 CDr00r00      [17] 2341 	call	_SG_waitForVBlank
                           2342 ;mainloop.h:338: UNSAFE_SG_copySpritestoSAT ();
   0AC7 CDr00r00      [17] 2343 	call	_UNSAFE_SG_copySpritestoSAT
                           2344 ;mainloop.h:339: update_list [update_index] = 0xff;
   0ACA 3Er95         [ 7] 2345 	ld	a,#<(_update_list)
   0ACC 21r94r00      [10] 2346 	ld	hl,#_update_index
   0ACF 86            [ 7] 2347 	add	a, (hl)
   0AD0 6F            [ 4] 2348 	ld	l, a
   0AD1 3Es00         [ 7] 2349 	ld	a, #>(_update_list)
   0AD3 CE 00         [ 7] 2350 	adc	a, #0x00
   0AD5 67            [ 4] 2351 	ld	h, a
   0AD6 36 FF         [10] 2352 	ld	(hl),#0xFF
                           2353 ;mainloop.h:340: SG_doUpdateList ();
   0AD8 CDr00r00      [17] 2354 	call	_SG_doUpdateList
                           2355 ;mainloop.h:341: clear_update_list ();
   0ADB CDr00r00      [17] 2356 	call	_clear_update_list
                           2357 ;mainloop.h:345: pad_read ();
   0ADE CDr00r00      [17] 2358 	call	_pad_read
                           2359 ;mainloop.h:346: a_button = (pad_this_frame & PAD_A);
   0AE1 3Ar06r00      [13] 2360 	ld	a,(#_pad_this_frame + 0)
   0AE4 E6 20         [ 7] 2361 	and	a, #0x20
   0AE6 67            [ 4] 2362 	ld	h,a
   0AE7 FD 21r59r00   [14] 2363 	ld	iy,#_a_button
   0AEB FD 74 00      [19] 2364 	ld	0 (iy),h
                           2365 ;mainloop.h:347: b_button = (pad_this_frame & PAD_B);
   0AEE 3Ar06r00      [13] 2366 	ld	a,(#_pad_this_frame + 0)
   0AF1 E6 10         [ 7] 2367 	and	a, #0x10
   0AF3 67            [ 4] 2368 	ld	h,a
   0AF4 FD 21r5Ar00   [14] 2369 	ld	iy,#_b_button
   0AF8 FD 74 00      [19] 2370 	ld	0 (iy),h
                           2371 ;mainloop.h:351: ntsc_frame ++; if (ntsc_frame == 6) ntsc_frame = 0;
   0AFB 21r93r00      [10] 2372 	ld	hl, #_ntsc_frame+0
   0AFE 34            [11] 2373 	inc	(hl)
   0AFF 3Ar93r00      [13] 2374 	ld	a,(#_ntsc_frame + 0)
   0B02 D6 06         [ 7] 2375 	sub	a, #0x06
   0B04 20 05         [12] 2376 	jr	NZ,00111$
   0B06 21r93r00      [10] 2377 	ld	hl,#_ntsc_frame + 0
   0B09 36 00         [10] 2378 	ld	(hl), #0x00
   0B0B                    2379 00111$:
                           2380 ;mainloop.h:353: if (paused == 0 && (ntsc == 0 || ntsc_frame)) {
   0B0B 3ArBEr01      [13] 2381 	ld	a,(#_paused + 0)
   0B0E B7            [ 4] 2382 	or	a, a
   0B0F C2rDCr0C      [10] 2383 	jp	NZ,00159$
   0B12 3Ar92r00      [13] 2384 	ld	a,(#_ntsc + 0)
   0B15 B7            [ 4] 2385 	or	a, a
   0B16 28 07         [12] 2386 	jr	Z,00158$
   0B18 3Ar93r00      [13] 2387 	ld	a,(#_ntsc_frame + 0)
   0B1B B7            [ 4] 2388 	or	a, a
   0B1C CArDCr0C      [10] 2389 	jp	Z,00159$
   0B1F                    2390 00158$:
                           2391 ;mainloop.h:354: SG_initSprites ();
   0B1F CDr00r00      [17] 2392 	call	_SG_initSprites
                           2393 ;mainloop.h:357: if (ticker) -- ticker; else ticker = 50;
   0B22 3Ar1Fr00      [13] 2394 	ld	a,(#_ticker + 0)
   0B25 B7            [ 4] 2395 	or	a, a
   0B26 28 09         [12] 2396 	jr	Z,00113$
   0B28 FD 21r1Fr00   [14] 2397 	ld	iy,#_ticker
   0B2C FD 35 00      [23] 2398 	dec	0 (iy)
   0B2F 18 08         [12] 2399 	jr	00114$
   0B31                    2400 00113$:
   0B31 FD 21r1Fr00   [14] 2401 	ld	iy,#_ticker
   0B35 FD 36 00 32   [19] 2402 	ld	0 (iy),#0x32
   0B39                    2403 00114$:
                           2404 ;mainloop.h:358: half_life ^= 1;
   0B39 3ArBCr01      [13] 2405 	ld	a,(#_half_life + 0)
   0B3C EE 01         [ 7] 2406 	xor	a, #0x01
   0B3E FD 21rBCr01   [14] 2407 	ld	iy,#_half_life
   0B42 FD 77 00      [19] 2408 	ld	0 (iy),a
                           2409 ;mainloop.h:359: ++ frame_counter;
   0B45 FD 21rBDr01   [14] 2410 	ld	iy,#_frame_counter
   0B49 FD 34 00      [23] 2411 	inc	0 (iy)
                           2412 ;mainloop/hotspots.h:6: if (hrt) {
   0B4C 3Ar7Cr00      [13] 2413 	ld	a,(#_hrt + 0)
   0B4F B7            [ 4] 2414 	or	a, a
   0B50 CAr06r0C      [10] 2415 	jp	Z,00131$
                           2416 ;mainloop/hotspots.h:7: if (collide_in (prx + 4, pry + 8, hrx, hry)) {
   0B53 3Ar53r00      [13] 2417 	ld	a,(#_pry + 0)
   0B56 C6 08         [ 7] 2418 	add	a, #0x08
   0B58 47            [ 4] 2419 	ld	b,a
   0B59 21r52r00      [10] 2420 	ld	hl,#_prx + 0
   0B5C 56            [ 7] 2421 	ld	d, (hl)
   0B5D 14            [ 4] 2422 	inc	d
   0B5E 14            [ 4] 2423 	inc	d
   0B5F 14            [ 4] 2424 	inc	d
   0B60 14            [ 4] 2425 	inc	d
   0B61 3Ar7Br00      [13] 2426 	ld	a,(_hry)
   0B64 F5            [11] 2427 	push	af
   0B65 33            [ 6] 2428 	inc	sp
   0B66 3Ar7Ar00      [13] 2429 	ld	a,(_hrx)
   0B69 F5            [11] 2430 	push	af
   0B6A 33            [ 6] 2431 	inc	sp
   0B6B 4A            [ 4] 2432 	ld	c, d
   0B6C C5            [11] 2433 	push	bc
   0B6D CDr00r00      [17] 2434 	call	_collide_in
   0B70 F1            [10] 2435 	pop	af
   0B71 F1            [10] 2436 	pop	af
   0B72 7D            [ 4] 2437 	ld	a,l
   0B73 B7            [ 4] 2438 	or	a, a
   0B74 CAr06r0C      [10] 2439 	jp	Z,00131$
                           2440 ;mainloop/hotspots.h:9: if (hrt == HOTSPOT_TYPE_RESONATOR) {
   0B77 3Ar7Cr00      [13] 2441 	ld	a,(#_hrt + 0)
   0B7A D6 04         [ 7] 2442 	sub	a, #0x04
   0B7C 20 3A         [12] 2443 	jr	NZ,00126$
                           2444 ;mainloop/hotspots.h:10: if (pvy > 0 && pry < hry) {
   0B7E AF            [ 4] 2445 	xor	a, a
   0B7F FD 21r50r00   [14] 2446 	ld	iy,#_pvy
   0B83 FD BE 00      [19] 2447 	cp	a, 0 (iy)
   0B86 FD 21r50r00   [14] 2448 	ld	iy,#_pvy
   0B8A FD 9E 01      [19] 2449 	sbc	a, 1 (iy)
   0B8D E2r92r0B      [10] 2450 	jp	PO, 00309$
   0B90 EE 80         [ 7] 2451 	xor	a, #0x80
   0B92                    2452 00309$:
   0B92 F2r06r0C      [10] 2453 	jp	P,00131$
   0B95 21r7Br00      [10] 2454 	ld	hl,#_hry
   0B98 3Ar53r00      [13] 2455 	ld	a,(#_pry + 0)
   0B9B 96            [ 7] 2456 	sub	a, (hl)
   0B9C 30 68         [12] 2457 	jr	NC,00131$
                           2458 ;mainloop/hotspots.h:11: if (res_on == 0) {
   0B9E 3ArB1r02      [13] 2459 	ld	a,(#_res_on + 0)
   0BA1 B7            [ 4] 2460 	or	a, a
   0BA2 20 62         [12] 2461 	jr	NZ,00131$
                           2462 ;mainloop/hotspots.h:12: res_on = 1; res_ct = 9; res_subct = 50;
   0BA4 21rB1r02      [10] 2463 	ld	hl,#_res_on + 0
   0BA7 36 01         [10] 2464 	ld	(hl), #0x01
   0BA9 21rB2r02      [10] 2465 	ld	hl,#_res_ct + 0
   0BAC 36 09         [10] 2466 	ld	(hl), #0x09
   0BAE 21rB3r02      [10] 2467 	ld	hl,#_res_subct + 0
   0BB1 36 32         [10] 2468 	ld	(hl), #0x32
                           2469 ;mainloop/hotspots.h:13: jump_start ();
   0BB3 CDr00r00      [17] 2470 	call	_jump_start
   0BB6 18 4E         [12] 2471 	jr	00131$
   0BB8                    2472 00126$:
                           2473 ;mainloop/hotspots.h:128: rda = 0;
   0BB8 FD 21r18r00   [14] 2474 	ld	iy,#_rda
   0BBC FD 36 00 00   [19] 2475 	ld	0 (iy),#0x00
                           2476 ;mainloop/hotspots.h:129: switch (hrt) {
   0BC0 3Ar7Cr00      [13] 2477 	ld	a,(#_hrt + 0)
   0BC3 FE 02         [ 7] 2478 	cp	a,#0x02
   0BC5 28 06         [12] 2479 	jr	Z,00120$
   0BC7 D6 03         [ 7] 2480 	sub	a, #0x03
   0BC9 28 13         [12] 2481 	jr	Z,00121$
   0BCB 18 20         [12] 2482 	jr	00122$
                           2483 ;mainloop/hotspots.h:151: case HOTSPOT_TYPE_KEYS:
   0BCD                    2484 00120$:
                           2485 ;mainloop/hotspots.h:152: ++ pkeys;
   0BCD FD 21r70r00   [14] 2486 	ld	iy,#_pkeys
   0BD1 FD 34 00      [23] 2487 	inc	0 (iy)
                           2488 ;mainloop/hotspots.h:153: rda = SFX_OBJECT;
   0BD4 FD 21r18r00   [14] 2489 	ld	iy,#_rda
   0BD8 FD 36 00 02   [19] 2490 	ld	0 (iy),#0x02
                           2491 ;mainloop/hotspots.h:154: break;
   0BDC 18 0F         [12] 2492 	jr	00122$
                           2493 ;mainloop/hotspots.h:156: case HOTSPOT_TYPE_REFILL:
   0BDE                    2494 00121$:
                           2495 ;mainloop/hotspots.h:157: plife += PLAYER_REFILL;
   0BDE FD 21r6Fr00   [14] 2496 	ld	iy,#_plife
   0BE2 FD 34 00      [23] 2497 	inc	0 (iy)
                           2498 ;mainloop/hotspots.h:161: rda = SFX_USE;
   0BE5 FD 21r18r00   [14] 2499 	ld	iy,#_rda
   0BE9 FD 36 00 03   [19] 2500 	ld	0 (iy),#0x03
                           2501 ;mainloop/hotspots.h:191: }
   0BED                    2502 00122$:
                           2503 ;mainloop/hotspots.h:192: if (rda) {
   0BED 3Ar18r00      [13] 2504 	ld	a,(#_rda + 0)
   0BF0 B7            [ 4] 2505 	or	a, a
   0BF1 28 13         [12] 2506 	jr	Z,00131$
                           2507 ;mainloop/hotspots.h:194: hrt = 0;
   0BF3 21r7Cr00      [10] 2508 	ld	hl,#_hrt + 0
   0BF6 36 00         [10] 2509 	ld	(hl), #0x00
                           2510 ;mainloop/hotspots.h:195: hact [n_pant] = 0;
   0BF8 3ErCC         [ 7] 2511 	ld	a,#<(_hact)
   0BFA 21rBAr01      [10] 2512 	ld	hl,#_n_pant
   0BFD 86            [ 7] 2513 	add	a, (hl)
   0BFE 5F            [ 4] 2514 	ld	e,a
   0BFF 3Es01         [ 7] 2515 	ld	a,#>(_hact)
   0C01 CE 00         [ 7] 2516 	adc	a, #0x00
   0C03 57            [ 4] 2517 	ld	d,a
   0C04 AF            [ 4] 2518 	xor	a, a
   0C05 12            [ 7] 2519 	ld	(de),a
   0C06                    2520 00131$:
                           2521 ;mainloop.h:379: if (!warp_to_level) {
   0C06 3ArC1r01      [13] 2522 	ld	a,(#_warp_to_level + 0)
   0C09 B7            [ 4] 2523 	or	a, a
   0C0A 20 03         [12] 2524 	jr	NZ,00133$
                           2525 ;mainloop.h:380: player_move ();
   0C0C CDr00r00      [17] 2526 	call	_player_move
   0C0F                    2527 00133$:
                           2528 ;my/extra_checks.h:14: if (c_max_enems == pkilled) {
   0C0F 3ArB9r01      [13] 2529 	ld	a,(#_c_max_enems + 0)
   0C12 FD 21r73r00   [14] 2530 	ld	iy,#_pkilled
   0C16 FD 96 00      [19] 2531 	sub	a, 0 (iy)
   0C19 20 17         [12] 2532 	jr	NZ,00139$
                           2533 ;my/extra_checks.h:16: en_cttouched [0] == 0 &&
   0C1B 3Ar1Dr02      [13] 2534 	ld	a, (#_en_cttouched + 0)
   0C1E B7            [ 4] 2535 	or	a, a
   0C1F 20 11         [12] 2536 	jr	NZ,00139$
                           2537 ;my/extra_checks.h:17: en_cttouched [1] == 0 &&
   0C21 3Ar1Er02      [13] 2538 	ld	a, (#_en_cttouched + 1)
   0C24 B7            [ 4] 2539 	or	a, a
   0C25 20 0B         [12] 2540 	jr	NZ,00139$
                           2541 ;my/extra_checks.h:18: en_cttouched [2] == 0
   0C27 3Ar1Fr02      [13] 2542 	ld	a, (#_en_cttouched + 2)
   0C2A B7            [ 4] 2543 	or	a, a
   0C2B 20 05         [12] 2544 	jr	NZ,00139$
                           2545 ;my/extra_checks.h:19: ) win_level = 1;
   0C2D 21rBFr01      [10] 2546 	ld	hl,#_win_level + 0
   0C30 36 01         [10] 2547 	ld	(hl), #0x01
   0C32                    2548 00139$:
                           2549 ;mainloop/win_level_condition.h:10: win_level
   0C32 3ArBFr01      [13] 2550 	ld	a,(#_win_level + 0)
   0C35 B7            [ 4] 2551 	or	a, a
   0C36 28 0E         [12] 2552 	jr	Z,00141$
                           2553 ;mainloop/win_level_condition.h:23: PSGStop ();
   0C38 CDr00r00      [17] 2554 	call	_PSGStop
                           2555 ;mainloop/win_level_condition.h:24: delay (50);
   0C3B 3E 32         [ 7] 2556 	ld	a,#0x32
   0C3D F5            [11] 2557 	push	af
   0C3E 33            [ 6] 2558 	inc	sp
   0C3F CDr00r00      [17] 2559 	call	_delay
   0C42 33            [ 6] 2560 	inc	sp
                           2561 ;mainloop/win_level_condition.h:25: break;
   0C43 C3r00r0D      [10] 2562 	jp	00168$
   0C46                    2563 00141$:
                           2564 ;mainloop.h:417: cur_stp = SG_getStp (); 
   0C46 CDr00r00      [17] 2565 	call	_SG_getStp
   0C49 22r27r00      [16] 2566 	ld	(_cur_stp),hl
                           2567 ;mainloop.h:418: if (!warp_to_level)	player_render ();
   0C4C 3ArC1r01      [13] 2568 	ld	a,(#_warp_to_level + 0)
   0C4F B7            [ 4] 2569 	or	a, a
   0C50 20 03         [12] 2570 	jr	NZ,00143$
   0C52 CDr00r00      [17] 2571 	call	_player_render
   0C55                    2572 00143$:
                           2573 ;mainloop.h:422: enems_move ();
   0C55 CDr00r00      [17] 2574 	call	_enems_move
                           2575 ;mainloop.h:426: if (warp_to_level) {
   0C58 3ArC1r01      [13] 2576 	ld	a,(#_warp_to_level + 0)
   0C5B B7            [ 4] 2577 	or	a, a
   0C5C 28 09         [12] 2578 	jr	Z,00145$
                           2579 ;mainloop.h:427: update_cycle (); PSGStop (); break;
   0C5E CDr00r00      [17] 2580 	call	_update_cycle
   0C61 CDr00r00      [17] 2581 	call	_PSGStop
   0C64 C3r00r0D      [10] 2582 	jp	00168$
   0C67                    2583 00145$:
                           2584 ;mainloop/resonators.h:5: if (res_on) {
   0C67 3ArB1r02      [13] 2585 	ld	a,(#_res_on + 0)
   0C6A B7            [ 4] 2586 	or	a, a
   0C6B 28 40         [12] 2587 	jr	Z,00153$
                           2588 ;mainloop/resonators.h:7: gp_addr = ((RESONATOR_COUNTER_Y << 5) | RESONATOR_COUNTER_X) + PNTADDRESS;
   0C6D 21 3D 18      [10] 2589 	ld	hl,#0x183D
   0C70 22r12r00      [16] 2590 	ld	(_gp_addr),hl
                           2591 ;mainloop/resonators.h:8: _n = 16 + res_ct; 
   0C73 21r02r00      [10] 2592 	ld	hl,#__n
   0C76 3ArB2r02      [13] 2593 	ld	a,(#_res_ct + 0)
   0C79 C6 10         [ 7] 2594 	add	a, #0x10
   0C7B 77            [ 7] 2595 	ld	(hl),a
                           2596 ;mainloop/resonators.h:9: ul_putc ();
   0C7C CDr00r00      [17] 2597 	call	_ul_putc
                           2598 ;mainloop/resonators.h:12: if (res_subct) -- res_subct; else {
   0C7F 3ArB3r02      [13] 2599 	ld	a,(#_res_subct + 0)
   0C82 B7            [ 4] 2600 	or	a, a
   0C83 28 09         [12] 2601 	jr	Z,00150$
   0C85 FD 21rB3r02   [14] 2602 	ld	iy,#_res_subct
   0C89 FD 35 00      [23] 2603 	dec	0 (iy)
   0C8C 18 1F         [12] 2604 	jr	00153$
   0C8E                    2605 00150$:
                           2606 ;mainloop/resonators.h:13: res_subct = 50;
   0C8E FD 21rB3r02   [14] 2607 	ld	iy,#_res_subct
   0C92 FD 36 00 32   [19] 2608 	ld	0 (iy),#0x32
                           2609 ;mainloop/resonators.h:14: if (res_ct) { 
   0C96 3ArB2r02      [13] 2610 	ld	a,(#_res_ct + 0)
   0C99 B7            [ 4] 2611 	or	a, a
   0C9A 28 09         [12] 2612 	jr	Z,00147$
                           2613 ;mainloop/resonators.h:15: -- res_ct; 
   0C9C FD 21rB2r02   [14] 2614 	ld	iy,#_res_ct
   0CA0 FD 35 00      [23] 2615 	dec	0 (iy)
   0CA3 18 08         [12] 2616 	jr	00153$
   0CA5                    2617 00147$:
                           2618 ;mainloop/resonators.h:18: res_on = 0;
   0CA5 FD 21rB1r02   [14] 2619 	ld	iy,#_res_on
   0CA9 FD 36 00 00   [19] 2620 	ld	0 (iy),#0x00
   0CAD                    2621 00153$:
                           2622 ;mainloop.h:438: if (hrt) hotspots_paint ();
   0CAD 3Ar7Cr00      [13] 2623 	ld	a,(#_hrt + 0)
   0CB0 B7            [ 4] 2624 	or	a, a
   0CB1 28 03         [12] 2625 	jr	Z,00155$
   0CB3 CDr35r02      [17] 2626 	call	_hotspots_paint
   0CB6                    2627 00155$:
                           2628 ;mainloop/no.h:5: if (no_ct) {
   0CB6 3ArCAr01      [13] 2629 	ld	a,(#_no_ct + 0)
   0CB9 B7            [ 4] 2630 	or	a, a
   0CBA 28 1D         [12] 2631 	jr	Z,00157$
                           2632 ;mainloop/no.h:6: -- no_ct;
   0CBC FD 21rCAr01   [14] 2633 	ld	iy,#_no_ct
   0CC0 FD 35 00      [23] 2634 	dec	0 (iy)
                           2635 ;mainloop/no.h:9: NO_METASPRITE
   0CC3 11r00r00      [10] 2636 	ld	de,#_ss_it_06
                           2637 ;mainloop/no.h:8: prx + NO_OFFS_X, pry + NO_OFFS_Y + SPRITE_ADJUST,
   0CC6 3Ar53r00      [13] 2638 	ld	a,(#_pry + 0)
   0CC9 C6 E3         [ 7] 2639 	add	a, #0xE3
   0CCB 67            [ 4] 2640 	ld	h,a
   0CCC D5            [11] 2641 	push	de
   0CCD E5            [11] 2642 	push	hl
   0CCE 33            [ 6] 2643 	inc	sp
   0CCF 3Ar52r00      [13] 2644 	ld	a,(_prx)
   0CD2 F5            [11] 2645 	push	af
   0CD3 33            [ 6] 2646 	inc	sp
   0CD4 CDr00r00      [17] 2647 	call	_SG_addMetaSprite1x1
   0CD7 F1            [10] 2648 	pop	af
   0CD8 F1            [10] 2649 	pop	af
   0CD9                    2650 00157$:
                           2651 ;mainloop.h:467: chac_chacs_do ();
   0CD9 CDr00r00      [17] 2652 	call	_chac_chacs_do
   0CDC                    2653 00159$:
                           2654 ;mainloop/cheat.h:5: if ((pad0 & (PAD_B|PAD_SELECT|PAD_UP)) == (PAD_B|PAD_SELECT|PAD_UP)) break;
   0CDC 3Ar04r00      [13] 2655 	ld	a,(#_pad0 + 0)
   0CDF E6 31         [ 7] 2656 	and	a, #0x31
   0CE1 2E 00         [ 7] 2657 	ld	l, #0x00
   0CE3 D6 31         [ 7] 2658 	sub	a,#0x31
   0CE5 20 03         [12] 2659 	jr	NZ,00314$
   0CE7 B5            [ 4] 2660 	or	a,l
   0CE8 28 16         [12] 2661 	jr	Z,00168$
   0CEA                    2662 00314$:
   0CEA CDr00r00      [17] 2663 	call	_SG_queryPauseRequested
   0CED CB 45         [ 8] 2664 	bit	0,l
   0CEF CAr8Ar0A      [10] 2665 	jp	Z,00167$
                           2666 ;mainloop/pause.h:6: SG_resetPauseRequest ();
   0CF2 CDr00r00      [17] 2667 	call	_SG_resetPauseRequest
                           2668 ;mainloop/pause.h:7: paused ^= 1;
   0CF5 3ArBEr01      [13] 2669 	ld	a,(#_paused + 0)
   0CF8 EE 01         [ 7] 2670 	xor	a, #0x01
   0CFA 32rBEr01      [13] 2671 	ld	(#_paused + 0),a
   0CFD C3r8Ar0A      [10] 2672 	jp	00167$
   0D00                    2673 00168$:
                           2674 ;mainloop.h:484: SG_displayOff ();
   0D00 21 40 01      [10] 2675 	ld	hl,#0x0140
   0D03 E5            [11] 2676 	push	hl
   0D04 CDr00r00      [17] 2677 	call	_SG_VDPturnOffFeature
   0D07 F1            [10] 2678 	pop	af
                           2679 ;mainloop.h:485: SG_initSprites ();
   0D08 CDr00r00      [17] 2680 	call	_SG_initSprites
                           2681 ;mainloop.h:486: UNSAFE_SG_copySpritestoSAT ();	
   0D0B C3r00r00      [10] 2682 	jp  _UNSAFE_SG_copySpritestoSAT
                           2683 ;game.c:110: void main(void) {
                           2684 ;	---------------------------------
                           2685 ; Function main
                           2686 ; ---------------------------------
   0D0E                    2687 _main::
                           2688 ;game.c:111: SG_displayOff ();
   0D0E 21 40 01      [10] 2689 	ld	hl,#0x0140
   0D11 E5            [11] 2690 	push	hl
   0D12 CDr00r00      [17] 2691 	call	_SG_VDPturnOffFeature
                           2692 ;game.c:112: SG_setSpriteMode (SG_SPRITEMODE_LARGE);
   0D15 26 01         [ 7] 2693 	ld	h,#0x01
   0D17 E3            [19] 2694 	ex	(sp),hl
   0D18 33            [ 6] 2695 	inc	sp
   0D19 CDr00r00      [17] 2696 	call	_SG_setSpriteMode
   0D1C 33            [ 6] 2697 	inc	sp
                           2698 ;game.c:113: SG_setUpdateList (update_list);
   0D1D 21r95r00      [10] 2699 	ld	hl,#_update_list+0
   0D20 E5            [11] 2700 	push	hl
   0D21 CDr00r00      [17] 2701 	call	_SG_setUpdateList
   0D24 F1            [10] 2702 	pop	af
                           2703 ;game.c:114: first_game = 1;
   0D25 21rB7r01      [10] 2704 	ld	hl,#_first_game + 0
   0D28 36 01         [10] 2705 	ld	(hl), #0x01
                           2706 ;game.c:120: unpack_bg_patterns (tsfont_patterns_c, tsfont_colours_c, 0, 7);
   0D2A 11r00r00      [10] 2707 	ld	de,#_tsfont_colours_c+0
   0D2D 01r00r00      [10] 2708 	ld	bc,#_tsfont_patterns_c+0
   0D30 3E 07         [ 7] 2709 	ld	a,#0x07
   0D32 F5            [11] 2710 	push	af
   0D33 33            [ 6] 2711 	inc	sp
   0D34 21 00 00      [10] 2712 	ld	hl,#0x0000
   0D37 E5            [11] 2713 	push	hl
   0D38 D5            [11] 2714 	push	de
   0D39 C5            [11] 2715 	push	bc
   0D3A CDr00r00      [17] 2716 	call	_unpack_bg_patterns
   0D3D 21 07 00      [10] 2717 	ld	hl,#7
   0D40 39            [11] 2718 	add	hl,sp
   0D41 F9            [ 6] 2719 	ld	sp,hl
                           2720 ;game.c:122: credits ();
   0D42 CDrA4r05      [17] 2721 	call	_credits
                           2722 ;game.c:125: aPLib_depack_VRAM (SGT_BASE, ss_fixed_patterns_c);
   0D45 21r00r00      [10] 2723 	ld	hl,#_ss_fixed_patterns_c+0
   0D48 E5            [11] 2724 	push	hl
   0D49 21 00 38      [10] 2725 	ld	hl,#0x3800
   0D4C E5            [11] 2726 	push	hl
   0D4D CDr00r00      [17] 2727 	call	_aPLib_depack_VRAM
   0D50 F1            [10] 2728 	pop	af
   0D51 F1            [10] 2729 	pop	af
                           2730 ;game.c:127: mode_no_resonators = 0;
   0D52 21rB7r02      [10] 2731 	ld	hl,#_mode_no_resonators + 0
   0D55 36 00         [10] 2732 	ld	(hl), #0x00
                           2733 ;game.c:128: while (1) {	
   0D57                    2734 00110$:
                           2735 ;game.c:129: title ();
   0D57 CDr8Fr03      [17] 2736 	call	_title
                           2737 ;game.c:131: level = 0;
   0D5A 21rB8r01      [10] 2738 	ld	hl,#_level + 0
   0D5D 36 00         [10] 2739 	ld	(hl), #0x00
                           2740 ;game.c:132: plife = PLAYER_LIFE;
   0D5F 21r6Fr00      [10] 2741 	ld	hl,#_plife + 0
   0D62 36 05         [10] 2742 	ld	(hl), #0x05
                           2743 ;game.c:136: while (1) {
   0D64                    2744 00107$:
                           2745 ;game.c:137: pres (scr_level);
   0D64 21r35r05      [10] 2746 	ld	hl,#_scr_level
   0D67 E5            [11] 2747 	push	hl
   0D68 CDr75r03      [17] 2748 	call	_pres
   0D6B F1            [10] 2749 	pop	af
                           2750 ;game.c:138: game_init (); 
   0D6C CDr6Ar07      [17] 2751 	call	_game_init
                           2752 ;game.c:139: game_loop ();
   0D6F CDr5Cr0A      [17] 2753 	call	_game_loop
                           2754 ;game.c:141: if (game_over) {
   0D72 3ArC0r01      [13] 2755 	ld	a,(#_game_over + 0)
   0D75 B7            [ 4] 2756 	or	a, a
   0D76 28 0A         [12] 2757 	jr	Z,00104$
                           2758 ;game.c:142: pres (scr_game_over);
   0D78 21rA1r04      [10] 2759 	ld	hl,#_scr_game_over
   0D7B E5            [11] 2760 	push	hl
   0D7C CDr75r03      [17] 2761 	call	_pres
   0D7F F1            [10] 2762 	pop	af
                           2763 ;game.c:143: break;
   0D80 18 13         [12] 2764 	jr	00108$
   0D82                    2765 00104$:
                           2766 ;game.c:145: level ++;
   0D82 21rB8r01      [10] 2767 	ld	hl, #_level+0
   0D85 34            [11] 2768 	inc	(hl)
                           2769 ;game.c:146: if (level == MAX_LEVELS) {
   0D86 3ArB8r01      [13] 2770 	ld	a,(#_level + 0)
   0D89 D6 03         [ 7] 2771 	sub	a, #0x03
   0D8B 20 D7         [12] 2772 	jr	NZ,00107$
                           2773 ;game.c:147: pres (scr_the_end);
   0D8D 21rBFr04      [10] 2774 	ld	hl,#_scr_the_end
   0D90 E5            [11] 2775 	push	hl
   0D91 CDr75r03      [17] 2776 	call	_pres
   0D94 F1            [10] 2777 	pop	af
                           2778 ;game.c:148: break;
   0D95                    2779 00108$:
                           2780 ;game.c:153: first_game = 0;
   0D95 21rB7r01      [10] 2781 	ld	hl,#_first_game + 0
   0D98 36 00         [10] 2782 	ld	(hl), #0x00
   0D9A 18 BB         [12] 2783 	jr	00110$
                           2784 	.area _CODE
                           2785 	.area _INITIALIZER
                           2786 	.area _CABS (ABS)
