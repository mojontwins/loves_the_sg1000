                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.2 #9293 (MINGW32)
                              4 ; This file was generated Wed Oct 31 22:58:45 2018
                              5 ;--------------------------------------------------------
                              6 	.module game
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _game_loop
                             14 	.globl _prepare_scr
                             15 	.globl _game_init
                             16 	.globl _flickscreen_do_vertical
                             17 	.globl _flickscreen_do_horizontal
                             18 	.globl _credits
                             19 	.globl _scr_level
                             20 	.globl _scr_the_end
                             21 	.globl _scr_game_over
                             22 	.globl _title
                             23 	.globl _pres
                             24 	.globl _bat_out
                             25 	.globl _bat_in
                             26 	.globl _hud_update
                             27 	.globl _draw_game_frame
                             28 	.globl _enems_move
                             29 	.globl _enems_load
                             30 	.globl _enems_persistent_deaths_load
                             31 	.globl _enems_persistent_update
                             32 	.globl _enems_persistent_load
                             33 	.globl _player_move
                             34 	.globl _player_kill
                             35 	.globl _player_to_pixels
                             36 	.globl _player_render
                             37 	.globl _player_init
                             38 	.globl _chac_chacs_do
                             39 	.globl _hotspots_create
                             40 	.globl _hotspots_paint
                             41 	.globl _hotspots_load
                             42 	.globl _update_cycle
                             43 	.globl _jump_start
                             44 	.globl _pad_read
                             45 	.globl _collide_in
                             46 	.globl _pr_str
                             47 	.globl _draw_scr
                             48 	.globl _p_t
                             49 	.globl _ul_putc
                             50 	.globl _cls
                             51 	.globl _clear_update_list
                             52 	.globl _unrle
                             53 	.globl _unpack_bg_patterns
                             54 	.globl _memfill
                             55 	.globl _delay
                             56 	.globl _aPLib_depack_VRAM
                             57 	.globl _PSGStop
                             58 	.globl _SG_doUpdateList
                             59 	.globl _SG_setUpdateList
                             60 	.globl _UNSAFE_SG_copySpritestoSAT
                             61 	.globl _SG_resetPauseRequest
                             62 	.globl _SG_queryPauseRequested
                             63 	.globl _SG_getKeysStatus
                             64 	.globl _SG_getStp
                             65 	.globl _SG_addMetaSprite1x1
                             66 	.globl _SG_initSprites
                             67 	.globl _SG_setTile
                             68 	.globl _SG_waitForVBlank
                             69 	.globl _SG_setSpriteMode
                             70 	.globl _SG_VDPturnOffFeature
                             71 	.globl _SG_VDPturnOnFeature
                             72 	.globl _game_mode
                             73 	.globl _mode_no_resonators
                             74 	.globl _shaker_ct
                             75 	.globl _springs_on
                             76 	.globl _cfx
                             77 	.globl _res_subct
                             78 	.globl _res_ct
                             79 	.globl _res_on
                             80 	.globl _res_disable
                             81 	.globl _chac_chacs_queue_write
                             82 	.globl _chac_chacs_queue_read
                             83 	.globl _chac_chacs_queue
                             84 	.globl _chac_chacs_ct
                             85 	.globl _chac_chacs_idlewait
                             86 	.globl _chac_chacs_state
                             87 	.globl _chac_chacs_yx
                             88 	.globl _max_chac_chacs
                             89 	.globl _ep_dead
                             90 	.globl _ep_my
                             91 	.globl _ep_mx
                             92 	.globl _ep_y
                             93 	.globl _ep_x
                             94 	.globl _en_spr_id
                             95 	.globl _enf_vy
                             96 	.globl _enf_y
                             97 	.globl _enf_vx
                             98 	.globl _enf_x
                             99 	.globl _en_spr_x_mod
                            100 	.globl _en_ct
                            101 	.globl _en_status
                            102 	.globl _en_life
                            103 	.globl _en_cttouched
                            104 	.globl _en_flags
                            105 	.globl _en_state
                            106 	.globl _en_facing
                            107 	.globl _en_s
                            108 	.globl _en_my
                            109 	.globl _en_mx
                            110 	.globl _en_y2
                            111 	.globl _en_x2
                            112 	.globl _en_y1
                            113 	.globl _en_x1
                            114 	.globl _en_y
                            115 	.globl _en_x
                            116 	.globl _en_t
                            117 	.globl _flags
                            118 	.globl _lkact
                            119 	.globl _hact
                            120 	.globl _pctfr
                            121 	.globl _no_ct
                            122 	.globl _oam_index_player
                            123 	.globl _okilled
                            124 	.globl _oammo
                            125 	.globl _oobjs
                            126 	.globl _okeys
                            127 	.globl _olife
                            128 	.globl _flick_override
                            129 	.globl _level_reset
                            130 	.globl _warp_to_level
                            131 	.globl _game_over
                            132 	.globl _win_level
                            133 	.globl _paused
                            134 	.globl _frame_counter
                            135 	.globl _half_life
                            136 	.globl _on_pant
                            137 	.globl _n_pant
                            138 	.globl _c_max_enems
                            139 	.globl _level
                            140 	.globl _first_game
                            141 	.globl _map_buff
                            142 	.globl _fade_delay
                            143 	.globl _fader
                            144 	.globl _update_list
                            145 	.globl _update_index
                            146 	.globl _ntsc_frame
                            147 	.globl _ntsc
                            148 	.globl _c_max_bolts
                            149 	.globl _c_hotspots
                            150 	.globl _c_enems
                            151 	.globl _c_locks
                            152 	.globl _c_decos
                            153 	.globl _c_map
                            154 	.globl _spr_enems
                            155 	.globl _c_behs
                            156 	.globl _c_ts_tmaps
                            157 	.globl _c_map_size
                            158 	.globl _c_map_h
                            159 	.globl _c_map_w
                            160 	.globl _ft
                            161 	.globl _do_process_breakable
                            162 	.globl _hrt
                            163 	.globl _hry
                            164 	.globl _hrx
                            165 	.globl _py_safe
                            166 	.globl _px_safe
                            167 	.globl _n_pant_safe
                            168 	.globl _pfiring
                            169 	.globl _pkilled
                            170 	.globl _pammo
                            171 	.globl _pobjs
                            172 	.globl _pkeys
                            173 	.globl _plife
                            174 	.globl _pcontinues
                            175 	.globl _pnotsafe
                            176 	.globl _pice
                            177 	.globl _pkill
                            178 	.globl _pry_old
                            179 	.globl _prx_old
                            180 	.globl _hith
                            181 	.globl _hitv
                            182 	.globl _pgtmy
                            183 	.globl _pgtmx
                            184 	.globl _phit
                            185 	.globl _pbouncing
                            186 	.globl _pflickering
                            187 	.globl _oppossee
                            188 	.globl _ppossee
                            189 	.globl _pgotten
                            190 	.globl _pctj
                            191 	.globl _pj
                            192 	.globl _b_button
                            193 	.globl _a_button
                            194 	.globl _psprid
                            195 	.globl _pfr
                            196 	.globl _pfacing
                            197 	.globl _pcy
                            198 	.globl _pcx
                            199 	.globl _pry
                            200 	.globl _prx
                            201 	.globl _pvy
                            202 	.globl _pvx
                            203 	.globl _py
                            204 	.globl _px
                            205 	.globl _vertical_engine_type
                            206 	.globl _en_sg_2
                            207 	.globl _en_sg_1
                            208 	.globl __enf_vy
                            209 	.globl __enf_vx
                            210 	.globl __enf_y
                            211 	.globl __enf_x
                            212 	.globl __en_state
                            213 	.globl __en_facing
                            214 	.globl __en_ct
                            215 	.globl __en_my
                            216 	.globl __en_mx
                            217 	.globl __en_y2
                            218 	.globl __en_x2
                            219 	.globl __en_y1
                            220 	.globl __en_x1
                            221 	.globl __en_y
                            222 	.globl __en_x
                            223 	.globl __en_s
                            224 	.globl __en_t
                            225 	.globl _pregotten
                            226 	.globl _en_is_alive
                            227 	.globl _touched
                            228 	.globl _en_spr
                            229 	.globl _en_colly
                            230 	.globl _en_collx
                            231 	.globl _en_fr
                            232 	.globl _en_offs
                            233 	.globl _en_initial
                            234 	.globl _cur_stp
                            235 	.globl _caux
                            236 	.globl _cy2
                            237 	.globl _cy1
                            238 	.globl _cx2
                            239 	.globl _cx1
                            240 	.globl _at2
                            241 	.globl _at1
                            242 	.globl _ticker
                            243 	.globl _rdct
                            244 	.globl _rds
                            245 	.globl _rdm
                            246 	.globl _rdd
                            247 	.globl _rdc
                            248 	.globl _rdb
                            249 	.globl _rda
                            250 	.globl _rdit
                            251 	.globl _rdt
                            252 	.globl _rdy
                            253 	.globl _rdx
                            254 	.globl _gp_addr
                            255 	.globl _gp_ram
                            256 	.globl _gp_tmap
                            257 	.globl _gp_gen
                            258 	.globl _rds16
                            259 	.globl _gpjt
                            260 	.globl _gpit
                            261 	.globl _pad_this_frame
                            262 	.globl _pad0
                            263 	.globl __t
                            264 	.globl __n
                            265 	.globl __y
                            266 	.globl __x
                            267 	.globl _levelnames
                            268 	.globl _level2name
                            269 	.globl _level1name
                            270 	.globl _level0name
                            271 	.globl _l_music
                            272 	.globl _l_hotspots
                            273 	.globl _l_enems
                            274 	.globl _l_n_bolts
                            275 	.globl _l_locks
                            276 	.globl _l_decos
                            277 	.globl _l_map
                            278 	.globl _l_spr_enems
                            279 	.globl _l_spr_patterns
                            280 	.globl _l_behs
                            281 	.globl _l_ts_tmaps
                            282 	.globl _l_ts_colours
                            283 	.globl _l_ts_patterns
                            284 	.globl _l_player_max_enems
                            285 	.globl _l_player_max_objects
                            286 	.globl _l_map_h
                            287 	.globl _l_map_w
                            288 	.globl _l_ini_y
                            289 	.globl _l_ini_x
                            290 	.globl _l_scr_ini
                            291 	.globl _spr_hs
                            292 	.globl _spr_enems2
                            293 	.globl _spr_enems1
                            294 	.globl _spr_enems0
                            295 	.globl _spr_player
                            296 	.globl _behs2
                            297 	.globl _behs1
                            298 	.globl _behs0
                            299 	.globl _jitter
                            300 	.globl _bits
                            301 	.globl _chac_chacs_t3
                            302 	.globl _chac_chacs_t2
                            303 	.globl _chac_chacs_t1
                            304 	.globl _chac_chacs_times
                            305 ;--------------------------------------------------------
                            306 ; special function registers
                            307 ;--------------------------------------------------------
                     00BF   308 _VDPControlPort	=	0x00bf
                     00BF   309 _VDPStatusPort	=	0x00bf
                     00BE   310 _VDPDataPort	=	0x00be
                     007E   311 _VDPVCounterPort	=	0x007e
                     007F   312 _VDPHCounterPort	=	0x007f
                     00DC   313 _IOPortL	=	0x00dc
                     00DD   314 _IOPortH	=	0x00dd
                            315 ;--------------------------------------------------------
                            316 ; ram data
                            317 ;--------------------------------------------------------
                            318 	.area _DATA
   0000                     319 __x::
   0000                     320 	.ds 1
   0001                     321 __y::
   0001                     322 	.ds 1
   0002                     323 __n::
   0002                     324 	.ds 1
   0003                     325 __t::
   0003                     326 	.ds 1
   0004                     327 _pad0::
   0004                     328 	.ds 2
   0006                     329 _pad_this_frame::
   0006                     330 	.ds 2
   0008                     331 _gpit::
   0008                     332 	.ds 1
   0009                     333 _gpjt::
   0009                     334 	.ds 1
   000A                     335 _rds16::
   000A                     336 	.ds 2
   000C                     337 _gp_gen::
   000C                     338 	.ds 2
   000E                     339 _gp_tmap::
   000E                     340 	.ds 2
   0010                     341 _gp_ram::
   0010                     342 	.ds 2
   0012                     343 _gp_addr::
   0012                     344 	.ds 2
   0014                     345 _rdx::
   0014                     346 	.ds 1
   0015                     347 _rdy::
   0015                     348 	.ds 1
   0016                     349 _rdt::
   0016                     350 	.ds 1
   0017                     351 _rdit::
   0017                     352 	.ds 1
   0018                     353 _rda::
   0018                     354 	.ds 1
   0019                     355 _rdb::
   0019                     356 	.ds 1
   001A                     357 _rdc::
   001A                     358 	.ds 1
   001B                     359 _rdd::
   001B                     360 	.ds 1
   001C                     361 _rdm::
   001C                     362 	.ds 1
   001D                     363 _rds::
   001D                     364 	.ds 1
   001E                     365 _rdct::
   001E                     366 	.ds 1
   001F                     367 _ticker::
   001F                     368 	.ds 1
   0020                     369 _at1::
   0020                     370 	.ds 1
   0021                     371 _at2::
   0021                     372 	.ds 1
   0022                     373 _cx1::
   0022                     374 	.ds 1
   0023                     375 _cx2::
   0023                     376 	.ds 1
   0024                     377 _cy1::
   0024                     378 	.ds 1
   0025                     379 _cy2::
   0025                     380 	.ds 1
   0026                     381 _caux::
   0026                     382 	.ds 1
   0027                     383 _cur_stp::
   0027                     384 	.ds 2
   0029                     385 _en_initial::
   0029                     386 	.ds 1
   002A                     387 _en_offs::
   002A                     388 	.ds 1
   002B                     389 _en_fr::
   002B                     390 	.ds 1
   002C                     391 _en_collx::
   002C                     392 	.ds 1
   002D                     393 _en_colly::
   002D                     394 	.ds 1
   002E                     395 _en_spr::
   002E                     396 	.ds 1
   002F                     397 _touched::
   002F                     398 	.ds 1
   0030                     399 _en_is_alive::
   0030                     400 	.ds 1
   0031                     401 _pregotten::
   0031                     402 	.ds 1
   0032                     403 __en_t::
   0032                     404 	.ds 1
   0033                     405 __en_s::
   0033                     406 	.ds 1
   0034                     407 __en_x::
   0034                     408 	.ds 1
   0035                     409 __en_y::
   0035                     410 	.ds 1
   0036                     411 __en_x1::
   0036                     412 	.ds 1
   0037                     413 __en_y1::
   0037                     414 	.ds 1
   0038                     415 __en_x2::
   0038                     416 	.ds 1
   0039                     417 __en_y2::
   0039                     418 	.ds 1
   003A                     419 __en_mx::
   003A                     420 	.ds 1
   003B                     421 __en_my::
   003B                     422 	.ds 1
   003C                     423 __en_ct::
   003C                     424 	.ds 1
   003D                     425 __en_facing::
   003D                     426 	.ds 1
   003E                     427 __en_state::
   003E                     428 	.ds 1
   003F                     429 __enf_x::
   003F                     430 	.ds 2
   0041                     431 __enf_y::
   0041                     432 	.ds 2
   0043                     433 __enf_vx::
   0043                     434 	.ds 2
   0045                     435 __enf_vy::
   0045                     436 	.ds 2
   0047                     437 _en_sg_1::
   0047                     438 	.ds 1
   0048                     439 _en_sg_2::
   0048                     440 	.ds 1
   0049                     441 _vertical_engine_type::
   0049                     442 	.ds 1
   004A                     443 _px::
   004A                     444 	.ds 2
   004C                     445 _py::
   004C                     446 	.ds 2
   004E                     447 _pvx::
   004E                     448 	.ds 2
   0050                     449 _pvy::
   0050                     450 	.ds 2
   0052                     451 _prx::
   0052                     452 	.ds 1
   0053                     453 _pry::
   0053                     454 	.ds 1
   0054                     455 _pcx::
   0054                     456 	.ds 1
   0055                     457 _pcy::
   0055                     458 	.ds 1
   0056                     459 _pfacing::
   0056                     460 	.ds 1
   0057                     461 _pfr::
   0057                     462 	.ds 1
   0058                     463 _psprid::
   0058                     464 	.ds 1
   0059                     465 _a_button::
   0059                     466 	.ds 1
   005A                     467 _b_button::
   005A                     468 	.ds 1
   005B                     469 _pj::
   005B                     470 	.ds 1
   005C                     471 _pctj::
   005C                     472 	.ds 1
   005D                     473 _pgotten::
   005D                     474 	.ds 1
   005E                     475 _ppossee::
   005E                     476 	.ds 1
   005F                     477 _oppossee::
   005F                     478 	.ds 1
   0060                     479 _pflickering::
   0060                     480 	.ds 1
   0061                     481 _pbouncing::
   0061                     482 	.ds 1
   0062                     483 _phit::
   0062                     484 	.ds 1
   0063                     485 _pgtmx::
   0063                     486 	.ds 2
   0065                     487 _pgtmy::
   0065                     488 	.ds 2
   0067                     489 _hitv::
   0067                     490 	.ds 1
   0068                     491 _hith::
   0068                     492 	.ds 1
   0069                     493 _prx_old::
   0069                     494 	.ds 1
   006A                     495 _pry_old::
   006A                     496 	.ds 1
   006B                     497 _pkill::
   006B                     498 	.ds 1
   006C                     499 _pice::
   006C                     500 	.ds 1
   006D                     501 _pnotsafe::
   006D                     502 	.ds 1
   006E                     503 _pcontinues::
   006E                     504 	.ds 1
   006F                     505 _plife::
   006F                     506 	.ds 1
   0070                     507 _pkeys::
   0070                     508 	.ds 1
   0071                     509 _pobjs::
   0071                     510 	.ds 1
   0072                     511 _pammo::
   0072                     512 	.ds 1
   0073                     513 _pkilled::
   0073                     514 	.ds 1
   0074                     515 _pfiring::
   0074                     516 	.ds 1
   0075                     517 _n_pant_safe::
   0075                     518 	.ds 1
   0076                     519 _px_safe::
   0076                     520 	.ds 2
   0078                     521 _py_safe::
   0078                     522 	.ds 2
   007A                     523 _hrx::
   007A                     524 	.ds 1
   007B                     525 _hry::
   007B                     526 	.ds 1
   007C                     527 _hrt::
   007C                     528 	.ds 1
   007D                     529 _do_process_breakable::
   007D                     530 	.ds 1
   007E                     531 _ft::
   007E                     532 	.ds 1
   007F                     533 _c_map_w::
   007F                     534 	.ds 1
   0080                     535 _c_map_h::
   0080                     536 	.ds 1
   0081                     537 _c_map_size::
   0081                     538 	.ds 1
   0082                     539 _c_ts_tmaps::
   0082                     540 	.ds 2
   0084                     541 _c_behs::
   0084                     542 	.ds 2
   0086                     543 _spr_enems::
   0086                     544 	.ds 2
   0088                     545 _c_map::
   0088                     546 	.ds 2
   008A                     547 _c_decos::
   008A                     548 	.ds 1
   008B                     549 _c_locks::
   008B                     550 	.ds 2
   008D                     551 _c_enems::
   008D                     552 	.ds 2
   008F                     553 _c_hotspots::
   008F                     554 	.ds 2
   0091                     555 _c_max_bolts::
   0091                     556 	.ds 1
   0092                     557 _ntsc::
   0092                     558 	.ds 1
   0093                     559 _ntsc_frame::
   0093                     560 	.ds 1
   0094                     561 _update_index::
   0094                     562 	.ds 1
   0095                     563 _update_list::
   0095                     564 	.ds 96
   00F5                     565 _fader::
   00F5                     566 	.ds 1
   00F6                     567 _fade_delay::
   00F6                     568 	.ds 1
   00F7                     569 _map_buff::
   00F7                     570 	.ds 192
   01B7                     571 _first_game::
   01B7                     572 	.ds 1
   01B8                     573 _level::
   01B8                     574 	.ds 1
   01B9                     575 _c_max_enems::
   01B9                     576 	.ds 1
   01BA                     577 _n_pant::
   01BA                     578 	.ds 1
   01BB                     579 _on_pant::
   01BB                     580 	.ds 1
   01BC                     581 _half_life::
   01BC                     582 	.ds 1
   01BD                     583 _frame_counter::
   01BD                     584 	.ds 1
   01BE                     585 _paused::
   01BE                     586 	.ds 1
   01BF                     587 _win_level::
   01BF                     588 	.ds 1
   01C0                     589 _game_over::
   01C0                     590 	.ds 1
   01C1                     591 _warp_to_level::
   01C1                     592 	.ds 1
   01C2                     593 _level_reset::
   01C2                     594 	.ds 1
   01C3                     595 _flick_override::
   01C3                     596 	.ds 1
   01C4                     597 _olife::
   01C4                     598 	.ds 1
   01C5                     599 _okeys::
   01C5                     600 	.ds 1
   01C6                     601 _oobjs::
   01C6                     602 	.ds 1
   01C7                     603 _oammo::
   01C7                     604 	.ds 1
   01C8                     605 _okilled::
   01C8                     606 	.ds 1
   01C9                     607 _oam_index_player::
   01C9                     608 	.ds 1
   01CA                     609 _no_ct::
   01CA                     610 	.ds 1
   01CB                     611 _pctfr::
   01CB                     612 	.ds 1
   01CC                     613 _hact::
   01CC                     614 	.ds 24
   01E4                     615 _lkact::
   01E4                     616 	.ds 16
   01F4                     617 _flags::
   01F4                     618 	.ds 2
   01F6                     619 _en_t::
   01F6                     620 	.ds 3
   01F9                     621 _en_x::
   01F9                     622 	.ds 3
   01FC                     623 _en_y::
   01FC                     624 	.ds 3
   01FF                     625 _en_x1::
   01FF                     626 	.ds 3
   0202                     627 _en_y1::
   0202                     628 	.ds 3
   0205                     629 _en_x2::
   0205                     630 	.ds 3
   0208                     631 _en_y2::
   0208                     632 	.ds 3
   020B                     633 _en_mx::
   020B                     634 	.ds 3
   020E                     635 _en_my::
   020E                     636 	.ds 3
   0211                     637 _en_s::
   0211                     638 	.ds 3
   0214                     639 _en_facing::
   0214                     640 	.ds 3
   0217                     641 _en_state::
   0217                     642 	.ds 3
   021A                     643 _en_flags::
   021A                     644 	.ds 3
   021D                     645 _en_cttouched::
   021D                     646 	.ds 3
   0220                     647 _en_life::
   0220                     648 	.ds 3
   0223                     649 _en_status::
   0223                     650 	.ds 3
   0226                     651 _en_ct::
   0226                     652 	.ds 3
   0229                     653 _en_spr_x_mod::
   0229                     654 	.ds 1
   022A                     655 _enf_x::
   022A                     656 	.ds 6
   0230                     657 _enf_vx::
   0230                     658 	.ds 6
   0236                     659 _enf_y::
   0236                     660 	.ds 6
   023C                     661 _enf_vy::
   023C                     662 	.ds 6
   0242                     663 _en_spr_id::
   0242                     664 	.ds 3
   0245                     665 _ep_x::
   0245                     666 	.ds 72
   028D                     667 _ep_y::
   028D                     668 	.ds 72
   02D5                     669 _ep_mx::
   02D5                     670 	.ds 72
   031D                     671 _ep_my::
   031D                     672 	.ds 72
   0365                     673 _ep_dead::
   0365                     674 	.ds 72
   03AD                     675 _max_chac_chacs::
   03AD                     676 	.ds 1
   03AE                     677 _chac_chacs_yx::
   03AE                     678 	.ds 4
   03B2                     679 _chac_chacs_state::
   03B2                     680 	.ds 4
   03B6                     681 _chac_chacs_idlewait::
   03B6                     682 	.ds 4
   03BA                     683 _chac_chacs_ct::
   03BA                     684 	.ds 4
   03BE                     685 _chac_chacs_queue::
   03BE                     686 	.ds 16
   03CE                     687 _chac_chacs_queue_read::
   03CE                     688 	.ds 1
   03CF                     689 _chac_chacs_queue_write::
   03CF                     690 	.ds 1
   03D0                     691 _res_disable::
   03D0                     692 	.ds 1
   03D1                     693 _res_on::
   03D1                     694 	.ds 1
   03D2                     695 _res_ct::
   03D2                     696 	.ds 1
   03D3                     697 _res_subct::
   03D3                     698 	.ds 1
   03D4                     699 _cfx::
   03D4                     700 	.ds 1
   03D5                     701 _springs_on::
   03D5                     702 	.ds 1
   03D6                     703 _shaker_ct::
   03D6                     704 	.ds 1
   03D7                     705 _mode_no_resonators::
   03D7                     706 	.ds 1
   03D8                     707 _game_mode::
   03D8                     708 	.ds 1
                            709 ;--------------------------------------------------------
                            710 ; ram data
                            711 ;--------------------------------------------------------
                            712 	.area _INITIALIZED
                            713 ;--------------------------------------------------------
                            714 ; absolute external ram data
                            715 ;--------------------------------------------------------
                            716 	.area _DABS (ABS)
                            717 ;--------------------------------------------------------
                            718 ; global & static initialisations
                            719 ;--------------------------------------------------------
                            720 	.area _HOME
                            721 	.area _GSINIT
                            722 	.area _GSFINAL
                            723 	.area _GSINIT
                            724 ;--------------------------------------------------------
                            725 ; Home
                            726 ;--------------------------------------------------------
                            727 	.area _HOME
                            728 	.area _HOME
                            729 ;--------------------------------------------------------
                            730 ; code
                            731 ;--------------------------------------------------------
                            732 	.area _CODE
                            733 ;engine/hotspots.h:7: void hotspots_load (void) {
                            734 ;	---------------------------------
                            735 ; Function hotspots_load
                            736 ; ---------------------------------
   0000                     737 _hotspots_load::
                            738 ;engine/hotspots.h:9: gp_gen = (unsigned char *) c_hotspots;
   0000 2Ar8Fr00      [16]  739 	ld	hl,(_c_hotspots)
   0003 22r0Cr00      [16]  740 	ld	(_gp_gen),hl
                            741 ;engine/hotspots.h:11: for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
   0006 21r08r00      [10]  742 	ld	hl,#_gpit + 0
   0009 36 00         [10]  743 	ld	(hl), #0x00
   000B 11rCCr01      [10]  744 	ld	de,#_hact+0
   000E                     745 00102$:
                            746 ;engine/hotspots.h:16: hact [gpit] = 1;
   000E 2Ar08r00      [16]  747 	ld	hl,(_gpit)
   0011 26 00         [ 7]  748 	ld	h,#0x00
   0013 19            [11]  749 	add	hl,de
   0014 36 01         [10]  750 	ld	(hl),#0x01
                            751 ;engine/hotspots.h:11: for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
   0016 21r08r00      [10]  752 	ld	hl, #_gpit+0
   0019 34            [11]  753 	inc	(hl)
   001A 3Ar08r00      [13]  754 	ld	a,(#_gpit + 0)
   001D D6 18         [ 7]  755 	sub	a, #0x18
   001F 38 ED         [12]  756 	jr	C,00102$
   0021 C9            [10]  757 	ret
   0022                     758 _chac_chacs_times:
   0022 00                  759 	.db #0x00	; 0
   0023 10                  760 	.db #0x10	; 16
   0024 01                  761 	.db #0x01	; 1
   0025 32                  762 	.db #0x32	; 50	'2'
   0026 01                  763 	.db #0x01	; 1
   0027 01                  764 	.db #0x01	; 1
   0028                     765 _chac_chacs_t1:
   0028 26                  766 	.db #0x26	; 38
   0029 20                  767 	.db #0x20	; 32
   002A 22                  768 	.db #0x22	; 34
   002B 25                  769 	.db #0x25	; 37
   002C 22                  770 	.db #0x22	; 34
   002D 20                  771 	.db #0x20	; 32
   002E                     772 _chac_chacs_t2:
   002E 26                  773 	.db #0x26	; 38
   002F 26                  774 	.db #0x26	; 38
   0030 26                  775 	.db #0x26	; 38
   0031 24                  776 	.db #0x24	; 36
   0032 26                  777 	.db #0x26	; 38
   0033 26                  778 	.db #0x26	; 38
   0034                     779 _chac_chacs_t3:
   0034 26                  780 	.db #0x26	; 38
   0035 21                  781 	.db #0x21	; 33
   0036 23                  782 	.db #0x23	; 35
   0037 25                  783 	.db #0x25	; 37
   0038 23                  784 	.db #0x23	; 35
   0039 21                  785 	.db #0x21	; 33
   003A                     786 _bits:
   003A 01                  787 	.db #0x01	; 1
   003B 02                  788 	.db #0x02	; 2
   003C 04                  789 	.db #0x04	; 4
   003D 08                  790 	.db #0x08	; 8
   003E 10                  791 	.db #0x10	; 16
   003F 20                  792 	.db #0x20	; 32
   0040 40                  793 	.db #0x40	; 64
   0041 80                  794 	.db #0x80	; 128
   0042                     795 _jitter:
   0042 00                  796 	.db #0x00	; 0
   0043 01                  797 	.db #0x01	; 1
   0044 01                  798 	.db #0x01	; 1
   0045 00                  799 	.db #0x00	; 0
   0046 00                  800 	.db #0x00	; 0
   0047 01                  801 	.db #0x01	; 1
   0048 00                  802 	.db #0x00	; 0
   0049 01                  803 	.db #0x01	; 1
   004A 01                  804 	.db #0x01	; 1
   004B 00                  805 	.db #0x00	; 0
   004C 00                  806 	.db #0x00	; 0
   004D 00                  807 	.db #0x00	; 0
   004E 01                  808 	.db #0x01	; 1
   004F 00                  809 	.db #0x00	; 0
   0050 01                  810 	.db #0x01	; 1
   0051 01                  811 	.db #0x01	; 1
   0052                     812 _behs0:
   0052 00                  813 	.db #0x00	; 0
   0053 00                  814 	.db #0x00	; 0
   0054 00                  815 	.db #0x00	; 0
   0055 00                  816 	.db #0x00	; 0
   0056 08                  817 	.db #0x08	; 8
   0057 08                  818 	.db #0x08	; 8
   0058 08                  819 	.db #0x08	; 8
   0059 08                  820 	.db #0x08	; 8
   005A 00                  821 	.db #0x00	; 0
   005B 08                  822 	.db #0x08	; 8
   005C 00                  823 	.db #0x00	; 0
   005D 00                  824 	.db #0x00	; 0
   005E 01                  825 	.db #0x01	; 1
   005F 08                  826 	.db #0x08	; 8
   0060 04                  827 	.db #0x04	; 4
   0061 0A                  828 	.db #0x0A	; 10
   0062 00                  829 	.db #0x00	; 0
   0063 00                  830 	.db #0x00	; 0
   0064 00                  831 	.db #0x00	; 0
   0065 00                  832 	.db #0x00	; 0
   0066 08                  833 	.db #0x08	; 8
   0067 08                  834 	.db #0x08	; 8
   0068 08                  835 	.db #0x08	; 8
   0069 08                  836 	.db #0x08	; 8
   006A 00                  837 	.db #0x00	; 0
   006B 08                  838 	.db #0x08	; 8
   006C 00                  839 	.db #0x00	; 0
   006D 00                  840 	.db #0x00	; 0
   006E 01                  841 	.db #0x01	; 1
   006F 08                  842 	.db #0x08	; 8
   0070 04                  843 	.db #0x04	; 4
   0071 0A                  844 	.db #0x0A	; 10
   0072                     845 _behs1:
   0072 00                  846 	.db #0x00	; 0
   0073 00                  847 	.db #0x00	; 0
   0074 00                  848 	.db #0x00	; 0
   0075 00                  849 	.db #0x00	; 0
   0076 08                  850 	.db #0x08	; 8
   0077 04                  851 	.db #0x04	; 4
   0078 08                  852 	.db #0x08	; 8
   0079 04                  853 	.db #0x04	; 4
   007A 28                  854 	.db #0x28	; 40
   007B 29                  855 	.db #0x29	; 41
   007C 01                  856 	.db #0x01	; 1
   007D 01                  857 	.db #0x01	; 1
   007E 01                  858 	.db #0x01	; 1
   007F 08                  859 	.db #0x08	; 8
   0080 08                  860 	.db #0x08	; 8
   0081 0A                  861 	.db #0x0A	; 10
   0082 00                  862 	.db #0x00	; 0
   0083 00                  863 	.db #0x00	; 0
   0084 00                  864 	.db #0x00	; 0
   0085 00                  865 	.db #0x00	; 0
   0086 08                  866 	.db #0x08	; 8
   0087 04                  867 	.db #0x04	; 4
   0088 08                  868 	.db #0x08	; 8
   0089 04                  869 	.db #0x04	; 4
   008A 28                  870 	.db #0x28	; 40
   008B 29                  871 	.db #0x29	; 41
   008C 01                  872 	.db #0x01	; 1
   008D 01                  873 	.db #0x01	; 1
   008E 01                  874 	.db #0x01	; 1
   008F 08                  875 	.db #0x08	; 8
   0090 08                  876 	.db #0x08	; 8
   0091 08                  877 	.db #0x08	; 8
   0092                     878 _behs2:
   0092 00                  879 	.db #0x00	; 0
   0093 08                  880 	.db #0x08	; 8
   0094 00                  881 	.db #0x00	; 0
   0095 00                  882 	.db #0x00	; 0
   0096 08                  883 	.db #0x08	; 8
   0097 08                  884 	.db #0x08	; 8
   0098 08                  885 	.db #0x08	; 8
   0099 08                  886 	.db #0x08	; 8
   009A 00                  887 	.db #0x00	; 0
   009B 08                  888 	.db #0x08	; 8
   009C 04                  889 	.db #0x04	; 4
   009D 08                  890 	.db #0x08	; 8
   009E 01                  891 	.db #0x01	; 1
   009F 01                  892 	.db #0x01	; 1
   00A0 08                  893 	.db #0x08	; 8
   00A1 0A                  894 	.db #0x0A	; 10
   00A2 00                  895 	.db #0x00	; 0
   00A3 08                  896 	.db #0x08	; 8
   00A4 00                  897 	.db #0x00	; 0
   00A5 00                  898 	.db #0x00	; 0
   00A6 08                  899 	.db #0x08	; 8
   00A7 08                  900 	.db #0x08	; 8
   00A8 08                  901 	.db #0x08	; 8
   00A9 08                  902 	.db #0x08	; 8
   00AA 00                  903 	.db #0x00	; 0
   00AB 08                  904 	.db #0x08	; 8
   00AC 04                  905 	.db #0x04	; 4
   00AD 08                  906 	.db #0x08	; 8
   00AE 01                  907 	.db #0x01	; 1
   00AF 01                  908 	.db #0x01	; 1
   00B0 08                  909 	.db #0x08	; 8
   00B1 0A                  910 	.db #0x0A	; 10
   00B2 00                  911 	.db #0x00	; 0
   00B3 00                  912 	.db #0x00	; 0
   00B4 01                  913 	.db #0x01	; 1
   00B5 01                  914 	.db #0x01	; 1
   00B6 01                  915 	.db #0x01	; 1
   00B7 01                  916 	.db #0x01	; 1
   00B8 00                  917 	.db #0x00	; 0
   00B9                     918 _spr_player:
   00B9r00r00               919 	.dw _ss_pl_00
   00BBr00r00               920 	.dw _ss_pl_00
   00BDr00r00               921 	.dw _ss_pl_01
   00BFr00r00               922 	.dw _ss_pl_00
   00C1r00r00               923 	.dw _ss_pl_02
   00C3r00r00               924 	.dw _ss_pl_03
   00C5 00 00               925 	.dw #0x0000
   00C7 00 00               926 	.dw #0x0000
   00C9r00r00               927 	.dw _ss_pl_04
   00CBr00r00               928 	.dw _ss_pl_04
   00CDr00r00               929 	.dw _ss_pl_06
   00CFr00r00               930 	.dw _ss_pl_04
   00D1r00r00               931 	.dw _ss_pl_05
   00D3r00r00               932 	.dw _ss_pl_07
   00D5 00 00               933 	.dw #0x0000
   00D7 00 00               934 	.dw #0x0000
   00D9                     935 _spr_enems0:
   00D9r00r00               936 	.dw _ss_en_0_00
   00DBr00r00               937 	.dw _ss_en_0_01
   00DD 00 00               938 	.dw #0x0000
   00DF 00 00               939 	.dw #0x0000
   00E1r00r00               940 	.dw _ss_en_0_02
   00E3r00r00               941 	.dw _ss_en_0_03
   00E5 00 00               942 	.dw #0x0000
   00E7 00 00               943 	.dw #0x0000
   00E9r00r00               944 	.dw _ss_en_0_04
   00EBr00r00               945 	.dw _ss_en_0_05
   00ED 00 00               946 	.dw #0x0000
   00EF 00 00               947 	.dw #0x0000
   00F1r00r00               948 	.dw _ss_en_0_06
   00F3r00r00               949 	.dw _ss_en_0_07
   00F5 00 00               950 	.dw #0x0000
   00F7 00 00               951 	.dw #0x0000
   00F9r00r00               952 	.dw _ss_en_0_08
   00FBr00r00               953 	.dw _ss_en_0_09
   00FD 00 00               954 	.dw #0x0000
   00FF 00 00               955 	.dw #0x0000
   0101r00r00               956 	.dw _ss_en_0_0a
   0103r00r00               957 	.dw _ss_en_0_0b
   0105 00 00               958 	.dw #0x0000
   0107 00 00               959 	.dw #0x0000
   0109r00r00               960 	.dw _ss_plat_00
   010Br00r00               961 	.dw _ss_plat_01
   010D 00 00               962 	.dw #0x0000
   010F 00 00               963 	.dw #0x0000
   0111r00r00               964 	.dw _ss_plat_00
   0113r00r00               965 	.dw _ss_plat_01
   0115 00 00               966 	.dw #0x0000
   0117 00 00               967 	.dw #0x0000
   0119r00r00               968 	.dw _ss_fanty_00
   011Br00r00               969 	.dw _ss_fanty_01
   011D 00 00               970 	.dw #0x0000
   011F 00 00               971 	.dw #0x0000
   0121r00r00               972 	.dw _ss_fanty_02
   0123r00r00               973 	.dw _ss_fanty_03
   0125 00 00               974 	.dw #0x0000
   0127 00 00               975 	.dw #0x0000
   0129r00r00               976 	.dw _ss_it_04
   012B                     977 _spr_enems1:
   012Br00r00               978 	.dw _ss_en_1_00
   012Dr00r00               979 	.dw _ss_en_1_01
   012F 00 00               980 	.dw #0x0000
   0131 00 00               981 	.dw #0x0000
   0133r00r00               982 	.dw _ss_en_1_02
   0135r00r00               983 	.dw _ss_en_1_03
   0137 00 00               984 	.dw #0x0000
   0139 00 00               985 	.dw #0x0000
   013Br00r00               986 	.dw _ss_en_1_04
   013Dr00r00               987 	.dw _ss_en_1_05
   013F 00 00               988 	.dw #0x0000
   0141 00 00               989 	.dw #0x0000
   0143r00r00               990 	.dw _ss_en_1_06
   0145r00r00               991 	.dw _ss_en_1_07
   0147 00 00               992 	.dw #0x0000
   0149 00 00               993 	.dw #0x0000
   014Br00r00               994 	.dw _ss_en_1_08
   014Dr00r00               995 	.dw _ss_en_1_09
   014F 00 00               996 	.dw #0x0000
   0151 00 00               997 	.dw #0x0000
   0153r00r00               998 	.dw _ss_en_1_0a
   0155r00r00               999 	.dw _ss_en_1_0b
   0157 00 00              1000 	.dw #0x0000
   0159 00 00              1001 	.dw #0x0000
   015Br00r00              1002 	.dw _ss_plat_00
   015Dr00r00              1003 	.dw _ss_plat_01
   015F 00 00              1004 	.dw #0x0000
   0161 00 00              1005 	.dw #0x0000
   0163r00r00              1006 	.dw _ss_plat_00
   0165r00r00              1007 	.dw _ss_plat_01
   0167 00 00              1008 	.dw #0x0000
   0169 00 00              1009 	.dw #0x0000
   016Br00r00              1010 	.dw _ss_fanty_00
   016Dr00r00              1011 	.dw _ss_fanty_01
   016F 00 00              1012 	.dw #0x0000
   0171 00 00              1013 	.dw #0x0000
   0173r00r00              1014 	.dw _ss_fanty_02
   0175r00r00              1015 	.dw _ss_fanty_03
   0177 00 00              1016 	.dw #0x0000
   0179 00 00              1017 	.dw #0x0000
   017Br00r00              1018 	.dw _ss_it_04
   017D                    1019 _spr_enems2:
   017Dr00r00              1020 	.dw _ss_en_2_00
   017Fr00r00              1021 	.dw _ss_en_2_01
   0181 00 00              1022 	.dw #0x0000
   0183 00 00              1023 	.dw #0x0000
   0185r00r00              1024 	.dw _ss_en_2_02
   0187r00r00              1025 	.dw _ss_en_2_03
   0189 00 00              1026 	.dw #0x0000
   018B 00 00              1027 	.dw #0x0000
   018Dr00r00              1028 	.dw _ss_en_2_04
   018Fr00r00              1029 	.dw _ss_en_2_05
   0191 00 00              1030 	.dw #0x0000
   0193 00 00              1031 	.dw #0x0000
   0195r00r00              1032 	.dw _ss_en_2_06
   0197r00r00              1033 	.dw _ss_en_2_07
   0199 00 00              1034 	.dw #0x0000
   019B 00 00              1035 	.dw #0x0000
   019Dr00r00              1036 	.dw _ss_en_2_08
   019Fr00r00              1037 	.dw _ss_en_2_09
   01A1 00 00              1038 	.dw #0x0000
   01A3 00 00              1039 	.dw #0x0000
   01A5r00r00              1040 	.dw _ss_en_2_08
   01A7r00r00              1041 	.dw _ss_en_2_09
   01A9 00 00              1042 	.dw #0x0000
   01AB 00 00              1043 	.dw #0x0000
   01ADr00r00              1044 	.dw _ss_plat_00
   01AFr00r00              1045 	.dw _ss_plat_01
   01B1 00 00              1046 	.dw #0x0000
   01B3 00 00              1047 	.dw #0x0000
   01B5r00r00              1048 	.dw _ss_plat_00
   01B7r00r00              1049 	.dw _ss_plat_01
   01B9 00 00              1050 	.dw #0x0000
   01BB 00 00              1051 	.dw #0x0000
   01BDr00r00              1052 	.dw _ss_fanty_00
   01BFr00r00              1053 	.dw _ss_fanty_01
   01C1 00 00              1054 	.dw #0x0000
   01C3 00 00              1055 	.dw #0x0000
   01C5r00r00              1056 	.dw _ss_fanty_02
   01C7r00r00              1057 	.dw _ss_fanty_03
   01C9 00 00              1058 	.dw #0x0000
   01CB 00 00              1059 	.dw #0x0000
   01CDr00r00              1060 	.dw _ss_it_04
   01CF                    1061 _spr_hs:
   01CF 00 00              1062 	.dw #0x0000
   01D1 00 00              1063 	.dw #0x0000
   01D3r00r00              1064 	.dw _ss_it_01
   01D5r00r00              1065 	.dw _ss_it_00
   01D7r00r00              1066 	.dw _ss_it_02
   01D9r00r00              1067 	.dw _ss_it_03
   01DB                    1068 _l_scr_ini:
   01DB 14                 1069 	.db #0x14	; 20
   01DC 14                 1070 	.db #0x14	; 20
   01DD 08                 1071 	.db #0x08	; 8
   01DE                    1072 _l_ini_x:
   01DE 02                 1073 	.db #0x02	; 2
   01DF 02                 1074 	.db #0x02	; 2
   01E0 02                 1075 	.db #0x02	; 2
   01E1                    1076 _l_ini_y:
   01E1 07                 1077 	.db #0x07	; 7
   01E2 0A                 1078 	.db #0x0A	; 10
   01E3 03                 1079 	.db #0x03	; 3
   01E4                    1080 _l_map_w:
   01E4 04                 1081 	.db #0x04	; 4
   01E5 04                 1082 	.db #0x04	; 4
   01E6 08                 1083 	.db #0x08	; 8
   01E7                    1084 _l_map_h:
   01E7 06                 1085 	.db #0x06	; 6
   01E8 06                 1086 	.db #0x06	; 6
   01E9 03                 1087 	.db #0x03	; 3
   01EA                    1088 _l_player_max_objects:
   01EA 00                 1089 	.db #0x00	; 0
   01EB 00                 1090 	.db #0x00	; 0
   01EC 00                 1091 	.db #0x00	; 0
   01ED                    1092 _l_player_max_enems:
   01ED 36                 1093 	.db #0x36	; 54	'6'
   01EE 31                 1094 	.db #0x31	; 49	'1'
   01EF 2E                 1095 	.db #0x2E	; 46
   01F0                    1096 _l_ts_patterns:
   01F0r00r00              1097 	.dw _ts0_patterns_c
   01F2r00r00              1098 	.dw _ts1_patterns_c
   01F4r00r00              1099 	.dw _ts2_patterns_c
   01F6                    1100 _l_ts_colours:
   01F6r00r00              1101 	.dw _ts0_colours_c
   01F8r00r00              1102 	.dw _ts1_colours_c
   01FAr00r00              1103 	.dw _ts2_colours_c
   01FC                    1104 _l_ts_tmaps:
   01FCr00r00              1105 	.dw _ts0_tmaps
   01FEr00r00              1106 	.dw _ts1_tmaps
   0200r00r00              1107 	.dw _ts2_tmaps
   0202                    1108 _l_behs:
   0202r52r00              1109 	.dw _behs0
   0204r72r00              1110 	.dw _behs1
   0206r92r00              1111 	.dw _behs2
   0208                    1112 _l_spr_patterns:
   0208r00r00              1113 	.dw _ss_en_0_patterns_c
   020Ar00r00              1114 	.dw _ss_en_1_patterns_c
   020Cr00r00              1115 	.dw _ss_en_2_patterns_c
   020E                    1116 _l_spr_enems:
   020ErD9r00              1117 	.dw _spr_enems0
   0210r2Br01              1118 	.dw _spr_enems1
   0212r7Dr01              1119 	.dw _spr_enems2
   0214                    1120 _l_map:
   0214r00r00              1121 	.dw _map_0
   0216r00r00              1122 	.dw _map_1
   0218r00r00              1123 	.dw _map_2
   021A                    1124 _l_decos:
   021A 00                 1125 	.db #0x00	; 0
   021B 01                 1126 	.db #0x01	; 1
   021C 01                 1127 	.db #0x01	; 1
   021D                    1128 _l_locks:
   021Dr00r00              1129 	.dw _map_0_locks
   021Fr00r00              1130 	.dw _map_1_locks
   0221r00r00              1131 	.dw _map_2_locks
   0223                    1132 _l_n_bolts:
   0223 02                 1133 	.db #0x02	; 2
   0224 01                 1134 	.db #0x01	; 1
   0225 02                 1135 	.db #0x02	; 2
   0226                    1136 _l_enems:
   0226r00r00              1137 	.dw _enems_0
   0228r00r00              1138 	.dw _enems_1
   022Ar00r00              1139 	.dw _enems_2
   022C                    1140 _l_hotspots:
   022Cr00r00              1141 	.dw _hotspots_0
   022Er00r00              1142 	.dw _hotspots_1
   0230r00r00              1143 	.dw _hotspots_2
   0232                    1144 _l_music:
   0232 00                 1145 	.db #0x00	; 0
   0233 01                 1146 	.db #0x01	; 1
   0234 02                 1147 	.db #0x02	; 2
                           1148 ;engine/hotspots.h:20: void hotspots_paint (void) {
                           1149 ;	---------------------------------
                           1150 ; Function hotspots_paint
                           1151 ; ---------------------------------
   0235                    1152 _hotspots_paint::
                           1153 ;engine/hotspots.h:30: rda = hrt;
   0235 3Ar7Cr00      [13] 1154 	ld	a,(#_hrt + 0)
   0238 32r18r00      [13] 1155 	ld	(#_rda + 0),a
                           1156 ;engine/hotspots.h:33: if (hrt == HOTSPOT_TYPE_RESONATOR && res_on) rda = HOTSPOT_TYPE_RESONATOR_ON;
   023B 3Ar7Cr00      [13] 1157 	ld	a,(#_hrt + 0)
   023E D6 04         [ 7] 1158 	sub	a, #0x04
   0240 20 0B         [12] 1159 	jr	NZ,00102$
   0242 3ArD1r03      [13] 1160 	ld	a,(#_res_on + 0)
   0245 B7            [ 4] 1161 	or	a, a
   0246 28 05         [12] 1162 	jr	Z,00102$
   0248 21r18r00      [10] 1163 	ld	hl,#_rda + 0
   024B 36 05         [10] 1164 	ld	(hl), #0x05
   024D                    1165 00102$:
                           1166 ;engine/hotspots.h:38: spr_hs [rda]
   024D 11rCFr01      [10] 1167 	ld	de,#_spr_hs+0
   0250 FD 21r18r00   [14] 1168 	ld	iy,#_rda
   0254 FD 6E 00      [19] 1169 	ld	l,0 (iy)
   0257 26 00         [ 7] 1170 	ld	h,#0x00
   0259 29            [11] 1171 	add	hl, hl
   025A 19            [11] 1172 	add	hl,de
   025B 5E            [ 7] 1173 	ld	e,(hl)
   025C 23            [ 6] 1174 	inc	hl
   025D 56            [ 7] 1175 	ld	d,(hl)
                           1176 ;engine/hotspots.h:37: hrx, hry + SPRITE_ADJUST, 
   025E 3Ar7Br00      [13] 1177 	ld	a,(#_hry + 0)
   0261 C6 F7         [ 7] 1178 	add	a, #0xF7
   0263 67            [ 4] 1179 	ld	h,a
   0264 D5            [11] 1180 	push	de
   0265 E5            [11] 1181 	push	hl
   0266 33            [ 6] 1182 	inc	sp
   0267 3Ar7Ar00      [13] 1183 	ld	a,(_hrx)
   026A F5            [11] 1184 	push	af
   026B 33            [ 6] 1185 	inc	sp
   026C CDr00r00      [17] 1186 	call	_SG_addMetaSprite1x1
   026F F1            [10] 1187 	pop	af
   0270 F1            [10] 1188 	pop	af
   0271 C9            [10] 1189 	ret
                           1190 ;engine/hotspots.h:42: void hotspots_create (void) {
                           1191 ;	---------------------------------
                           1192 ; Function hotspots_create
                           1193 ; ---------------------------------
   0272                    1194 _hotspots_create::
                           1195 ;engine/hotspots.h:54: gp_gen = (unsigned char *) (c_hotspots + (n_pant << 1));
   0272 FD 21rBAr01   [14] 1196 	ld	iy,#_n_pant
   0276 FD 6E 00      [19] 1197 	ld	l,0 (iy)
   0279 26 00         [ 7] 1198 	ld	h,#0x00
   027B 29            [11] 1199 	add	hl, hl
   027C 55            [ 4] 1200 	ld	d,l
   027D 5C            [ 4] 1201 	ld	e,h
   027E 21r0Cr00      [10] 1202 	ld	hl,#_gp_gen
   0281 3Ar8Fr00      [13] 1203 	ld	a,(#_c_hotspots + 0)
   0284 82            [ 4] 1204 	add	a, d
   0285 77            [ 7] 1205 	ld	(hl),a
   0286 3Ar90r00      [13] 1206 	ld	a,(#_c_hotspots + 1)
   0289 8B            [ 4] 1207 	adc	a, e
   028A 23            [ 6] 1208 	inc	hl
   028B 77            [ 7] 1209 	ld	(hl),a
                           1210 ;engine/hotspots.h:55: hrt = *gp_gen ++; rda = *gp_gen; 
   028C 2Ar0Cr00      [16] 1211 	ld	hl,(_gp_gen)
   028F 7E            [ 7] 1212 	ld	a,(hl)
   0290 32r7Cr00      [13] 1213 	ld	(#_hrt + 0),a
   0293 21r0Cr00      [10] 1214 	ld	hl, #_gp_gen+0
   0296 34            [11] 1215 	inc	(hl)
   0297 20 04         [12] 1216 	jr	NZ,00115$
   0299 21r0Dr00      [10] 1217 	ld	hl, #_gp_gen+1
   029C 34            [11] 1218 	inc	(hl)
   029D                    1219 00115$:
   029D 2Ar0Cr00      [16] 1220 	ld	hl,(_gp_gen)
   02A0 7E            [ 7] 1221 	ld	a,(hl)
   02A1 32r18r00      [13] 1222 	ld	(#_rda + 0),a
                           1223 ;engine/hotspots.h:56: if (hrt && hact [n_pant]) {
   02A4 3Ar7Cr00      [13] 1224 	ld	a,(#_hrt + 0)
   02A7 B7            [ 4] 1225 	or	a, a
   02A8 28 22         [12] 1226 	jr	Z,00102$
   02AA 11rCCr01      [10] 1227 	ld	de,#_hact+0
   02AD 2ArBAr01      [16] 1228 	ld	hl,(_n_pant)
   02B0 26 00         [ 7] 1229 	ld	h,#0x00
   02B2 19            [11] 1230 	add	hl,de
   02B3 7E            [ 7] 1231 	ld	a,(hl)
   02B4 B7            [ 4] 1232 	or	a, a
   02B5 28 15         [12] 1233 	jr	Z,00102$
                           1234 ;engine/hotspots.h:57: hry = rda & 0xf0; hrx = rda << 4;
   02B7 3Ar18r00      [13] 1235 	ld	a,(#_rda + 0)
   02BA E6 F0         [ 7] 1236 	and	a, #0xF0
   02BC 32r7Br00      [13] 1237 	ld	(#_hry + 0),a
   02BF 3Ar18r00      [13] 1238 	ld	a,(#_rda + 0)
   02C2 07            [ 4] 1239 	rlca
   02C3 07            [ 4] 1240 	rlca
   02C4 07            [ 4] 1241 	rlca
   02C5 07            [ 4] 1242 	rlca
   02C6 E6 F0         [ 7] 1243 	and	a,#0xF0
   02C8 32r7Ar00      [13] 1244 	ld	(#_hrx + 0),a
   02CB C9            [10] 1245 	ret
   02CC                    1246 00102$:
                           1247 ;engine/hotspots.h:58: } else hrt = 0;
   02CC 21r7Cr00      [10] 1248 	ld	hl,#_hrt + 0
   02CF 36 00         [10] 1249 	ld	(hl), #0x00
   02D1 C9            [10] 1250 	ret
                           1251 ;engine/../my/game_frame.h:7: void draw_game_frame (void) {
                           1252 ;	---------------------------------
                           1253 ; Function draw_game_frame
                           1254 ; ---------------------------------
   02D2                    1255 _draw_game_frame::
                           1256 ;engine/../my/game_frame.h:8: gp_gen = hud_rle; unrle ();
   02D2 21r00r00      [10] 1257 	ld	hl,#_hud_rle+0
   02D5 22r0Cr00      [16] 1258 	ld	(_gp_gen),hl
   02D8 C3r00r00      [10] 1259 	jp  _unrle
                           1260 ;engine/frame.h:9: void hud_update (void) {
                           1261 ;	---------------------------------
                           1262 ; Function hud_update
                           1263 ; ---------------------------------
   02DB                    1264 _hud_update::
                           1265 ;engine/frame.h:12: if (okilled != pkilled) {
   02DB 3ArC8r01      [13] 1266 	ld	a,(#_okilled + 0)
   02DE FD 21r73r00   [14] 1267 	ld	iy,#_pkilled
   02E2 FD 96 00      [19] 1268 	sub	a, 0 (iy)
   02E5 28 24         [12] 1269 	jr	Z,00102$
                           1270 ;engine/frame.h:13: okilled = pkilled;
   02E7 3Ar73r00      [13] 1271 	ld	a,(#_pkilled + 0)
   02EA 32rC8r01      [13] 1272 	ld	(#_okilled + 0),a
                           1273 ;engine/frame.h:14: _x = KILLED_X; _y = KILLED_Y; _n = c_max_enems - pkilled; p_t ();
   02ED 21r00r00      [10] 1274 	ld	hl,#__x + 0
   02F0 36 15         [10] 1275 	ld	(hl), #0x15
   02F2 21r01r00      [10] 1276 	ld	hl,#__y + 0
   02F5 36 01         [10] 1277 	ld	(hl), #0x01
   02F7 21r73r00      [10] 1278 	ld	hl,#_pkilled
   02FA D5            [11] 1279 	push	de
   02FB FD 21r02r00   [14] 1280 	ld	iy,#__n
   02FF FD E5         [15] 1281 	push	iy
   0301 D1            [10] 1282 	pop	de
   0302 3ArB9r01      [13] 1283 	ld	a,(#_c_max_enems + 0)
   0305 96            [ 7] 1284 	sub	a, (hl)
   0306 12            [ 7] 1285 	ld	(de),a
   0307 D1            [10] 1286 	pop	de
   0308 CDr00r00      [17] 1287 	call	_p_t
   030B                    1288 00102$:
                           1289 ;engine/frame.h:32: if (okeys != pkeys) {
   030B 3ArC5r01      [13] 1290 	ld	a,(#_okeys + 0)
   030E FD 21r70r00   [14] 1291 	ld	iy,#_pkeys
   0312 FD 96 00      [19] 1292 	sub	a, 0 (iy)
   0315 28 19         [12] 1293 	jr	Z,00104$
                           1294 ;engine/frame.h:33: okeys = pkeys;
   0317 21r70r00      [10] 1295 	ld	hl,#_pkeys + 0
   031A 56            [ 7] 1296 	ld	d, (hl)
   031B 21rC5r01      [10] 1297 	ld	hl,#_okeys + 0
   031E 72            [ 7] 1298 	ld	(hl), d
                           1299 ;engine/frame.h:34: _x = KEYS_X; _y = KEYS_Y; _n = pkeys; p_t ();
   031F 21r00r00      [10] 1300 	ld	hl,#__x + 0
   0322 36 0C         [10] 1301 	ld	(hl), #0x0C
   0324 21r01r00      [10] 1302 	ld	hl,#__y + 0
   0327 36 01         [10] 1303 	ld	(hl), #0x01
   0329 21r02r00      [10] 1304 	ld	hl,#__n + 0
   032C 72            [ 7] 1305 	ld	(hl), d
   032D CDr00r00      [17] 1306 	call	_p_t
   0330                    1307 00104$:
                           1308 ;engine/frame.h:39: if (olife != plife) {
   0330 3ArC4r01      [13] 1309 	ld	a,(#_olife + 0)
   0333 FD 21r6Fr00   [14] 1310 	ld	iy,#_plife
   0337 FD 96 00      [19] 1311 	sub	a, 0 (iy)
   033A C8            [11] 1312 	ret	Z
                           1313 ;engine/frame.h:40: olife = plife;
   033B 21r6Fr00      [10] 1314 	ld	hl,#_plife + 0
   033E 56            [ 7] 1315 	ld	d, (hl)
   033F 21rC4r01      [10] 1316 	ld	hl,#_olife + 0
   0342 72            [ 7] 1317 	ld	(hl), d
                           1318 ;engine/frame.h:41: _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
   0343 21r00r00      [10] 1319 	ld	hl,#__x + 0
   0346 36 04         [10] 1320 	ld	(hl), #0x04
   0348 21r01r00      [10] 1321 	ld	hl,#__y + 0
   034B 36 01         [10] 1322 	ld	(hl), #0x01
   034D 21r02r00      [10] 1323 	ld	hl,#__n + 0
   0350 72            [ 7] 1324 	ld	(hl), d
   0351 C3r00r00      [10] 1325 	jp  _p_t
                           1326 ;my/pres.h:6: void bat_in (void) {
                           1327 ;	---------------------------------
                           1328 ; Function bat_in
                           1329 ; ---------------------------------
   0354                    1330 _bat_in::
                           1331 ;my/pres.h:7: SG_displayOn ();
   0354 21 40 01      [10] 1332 	ld	hl,#0x0140
   0357 E5            [11] 1333 	push	hl
   0358 CDr00r00      [17] 1334 	call	_SG_VDPturnOnFeature
   035B F1            [10] 1335 	pop	af
                           1336 ;my/pres.h:8: while (SG_getKeysStatus ());
   035C                    1337 00101$:
   035C CDr00r00      [17] 1338 	call	_SG_getKeysStatus
   035F 7C            [ 4] 1339 	ld	a,h
   0360 B5            [ 4] 1340 	or	a,l
   0361 20 F9         [12] 1341 	jr	NZ,00101$
   0363 C9            [10] 1342 	ret
                           1343 ;my/pres.h:11: void bat_out (void) {
                           1344 ;	---------------------------------
                           1345 ; Function bat_out
                           1346 ; ---------------------------------
   0364                    1347 _bat_out::
                           1348 ;my/pres.h:12: PSGStop ();
   0364 CDr00r00      [17] 1349 	call	_PSGStop
                           1350 ;my/pres.h:13: SG_displayOff ();
   0367 21 40 01      [10] 1351 	ld	hl,#0x0140
   036A E5            [11] 1352 	push	hl
   036B CDr00r00      [17] 1353 	call	_SG_VDPturnOffFeature
   036E F1            [10] 1354 	pop	af
                           1355 ;my/pres.h:14: SG_initSprites ();
   036F CDr00r00      [17] 1356 	call	_SG_initSprites
                           1357 ;my/pres.h:15: UNSAFE_SG_copySpritestoSAT ();	
   0372 C3r00r00      [10] 1358 	jp  _UNSAFE_SG_copySpritestoSAT
                           1359 ;my/pres.h:18: void pres (void (*func) (void)) {
                           1360 ;	---------------------------------
                           1361 ; Function pres
                           1362 ; ---------------------------------
   0375                    1363 _pres::
                           1364 ;my/pres.h:19: cls ();
   0375 CDr00r00      [17] 1365 	call	_cls
                           1366 ;my/pres.h:20: (*func) ();
   0378 C1            [10] 1367 	pop	bc
   0379 E1            [10] 1368 	pop	hl
   037A E5            [11] 1369 	push	hl
   037B C5            [11] 1370 	push	bc
   037C CDr00r00      [17] 1371 	call	___sdcc_call_hl
                           1372 ;my/pres.h:21: bat_in ();
   037F CDr54r03      [17] 1373 	call	_bat_in
                           1374 ;my/pres.h:22: while (1) {
   0382                    1375 00104$:
                           1376 ;my/pres.h:23: pad_read ();
   0382 CDr00r00      [17] 1377 	call	_pad_read
                           1378 ;my/pres.h:24: if (pad_this_frame & (PAD_A|PAD_B|PAD_START)) break;
   0385 3Ar06r00      [13] 1379 	ld	a,(#_pad_this_frame + 0)
   0388 E6 30         [ 7] 1380 	and	a, #0x30
   038A 28 F6         [12] 1381 	jr	Z,00104$
                           1382 ;my/pres.h:26: bat_out ();
   038C C3r64r03      [10] 1383 	jp  _bat_out
                           1384 ;my/pres.h:29: void title (void) {
                           1385 ;	---------------------------------
                           1386 ; Function title
                           1387 ; ---------------------------------
   038F                    1388 _title::
                           1389 ;my/pres.h:30: unpack_bg_patterns (tstitle_patterns_c, tstitle_colours_c, 64*8, 7);
   038F 11r00r00      [10] 1390 	ld	de,#_tstitle_patterns_c
   0392 3E 07         [ 7] 1391 	ld	a,#0x07
   0394 F5            [11] 1392 	push	af
   0395 33            [ 6] 1393 	inc	sp
   0396 21 00 02      [10] 1394 	ld	hl,#0x0200
   0399 E5            [11] 1395 	push	hl
   039A 21r00r00      [10] 1396 	ld	hl,#_tstitle_colours_c
   039D E5            [11] 1397 	push	hl
   039E D5            [11] 1398 	push	de
   039F CDr00r00      [17] 1399 	call	_unpack_bg_patterns
   03A2 21 07 00      [10] 1400 	ld	hl,#7
   03A5 39            [11] 1401 	add	hl,sp
   03A6 F9            [ 6] 1402 	ld	sp,hl
                           1403 ;my/pres.h:31: gp_gen = title_rle; unrle ();
   03A7 21r00r00      [10] 1404 	ld	hl,#_title_rle+0
   03AA 22r0Cr00      [16] 1405 	ld	(_gp_gen),hl
   03AD CDr00r00      [17] 1406 	call	_unrle
                           1407 ;my/pres.h:33: _x = 7; _y = 12; pr_str ("SELECT AND PUSH 1!");
   03B0 21r00r00      [10] 1408 	ld	hl,#__x + 0
   03B3 36 07         [10] 1409 	ld	(hl), #0x07
   03B5 21r01r00      [10] 1410 	ld	hl,#__y + 0
   03B8 36 0C         [10] 1411 	ld	(hl), #0x0C
   03BA 21r62r04      [10] 1412 	ld	hl,#___str_0
   03BD E5            [11] 1413 	push	hl
   03BE CDr00r00      [17] 1414 	call	_pr_str
   03C1 F1            [10] 1415 	pop	af
                           1416 ;my/pres.h:35: _x = 12; _y = 16; pr_str ("RESONATORS");
   03C2 21r00r00      [10] 1417 	ld	hl,#__x + 0
   03C5 36 0C         [10] 1418 	ld	(hl), #0x0C
   03C7 21r01r00      [10] 1419 	ld	hl,#__y + 0
   03CA 36 10         [10] 1420 	ld	(hl), #0x10
   03CC 21r75r04      [10] 1421 	ld	hl,#___str_1
   03CF E5            [11] 1422 	push	hl
   03D0 CDr00r00      [17] 1423 	call	_pr_str
   03D3 F1            [10] 1424 	pop	af
                           1425 ;my/pres.h:36: _y = 18; pr_str ("EASY MODE");
   03D4 21r01r00      [10] 1426 	ld	hl,#__y + 0
   03D7 36 12         [10] 1427 	ld	(hl), #0x12
   03D9 21r80r04      [10] 1428 	ld	hl,#___str_2
   03DC E5            [11] 1429 	push	hl
   03DD CDr00r00      [17] 1430 	call	_pr_str
   03E0 F1            [10] 1431 	pop	af
                           1432 ;my/pres.h:38: _x = 5; _y = 23; pr_str ("@ 2018 THE MOJON TWINS");
   03E1 21r00r00      [10] 1433 	ld	hl,#__x + 0
   03E4 36 05         [10] 1434 	ld	(hl), #0x05
   03E6 21r01r00      [10] 1435 	ld	hl,#__y + 0
   03E9 36 17         [10] 1436 	ld	(hl), #0x17
   03EB 21r8Ar04      [10] 1437 	ld	hl,#___str_3
   03EE E5            [11] 1438 	push	hl
   03EF CDr00r00      [17] 1439 	call	_pr_str
   03F2 F1            [10] 1440 	pop	af
                           1441 ;my/pres.h:40: bat_in ();
   03F3 CDr54r03      [17] 1442 	call	_bat_in
                           1443 ;my/pres.h:42: while (1) {
   03F6                    1444 00113$:
                           1445 ;my/pres.h:43: update_cycle ();
   03F6 CDr00r00      [17] 1446 	call	_update_cycle
                           1447 ;my/pres.h:44: SG_addMetaSprite1x1 (82, 122 + (mode_no_resonators << 4), ss_pl_00);
   03F9 21r00r00      [10] 1448 	ld	hl,#_ss_pl_00
   03FC 3ArD7r03      [13] 1449 	ld	a,(#_mode_no_resonators + 0)
   03FF 07            [ 4] 1450 	rlca
   0400 07            [ 4] 1451 	rlca
   0401 07            [ 4] 1452 	rlca
   0402 07            [ 4] 1453 	rlca
   0403 E6 F0         [ 7] 1454 	and	a,#0xF0
   0405 C6 7A         [ 7] 1455 	add	a, #0x7A
   0407 E5            [11] 1456 	push	hl
   0408 57            [ 4] 1457 	ld	d,a
   0409 1E 52         [ 7] 1458 	ld	e,#0x52
   040B D5            [11] 1459 	push	de
   040C CDr00r00      [17] 1460 	call	_SG_addMetaSprite1x1
   040F F1            [10] 1461 	pop	af
   0410 F1            [10] 1462 	pop	af
                           1463 ;my/pres.h:45: pad_read ();
   0411 CDr00r00      [17] 1464 	call	_pad_read
                           1465 ;my/pres.h:46: rda = mode_no_resonators;
   0414 3ArD7r03      [13] 1466 	ld	a,(#_mode_no_resonators + 0)
   0417 32r18r00      [13] 1467 	ld	(#_rda + 0),a
                           1468 ;my/pres.h:47: if (pad_this_frame & PAD_DOWN) {
   041A 21r06r00      [10] 1469 	ld	hl,#_pad_this_frame+0
   041D CB 4E         [12] 1470 	bit	1, (hl)
   041F 28 10         [12] 1471 	jr	Z,00104$
                           1472 ;my/pres.h:48: ++ mode_no_resonators; if (mode_no_resonators == 2) mode_no_resonators = 0;
   0421 21rD7r03      [10] 1473 	ld	hl, #_mode_no_resonators+0
   0424 34            [11] 1474 	inc	(hl)
   0425 3ArD7r03      [13] 1475 	ld	a,(#_mode_no_resonators + 0)
   0428 D6 02         [ 7] 1476 	sub	a, #0x02
   042A 20 05         [12] 1477 	jr	NZ,00104$
   042C 21rD7r03      [10] 1478 	ld	hl,#_mode_no_resonators + 0
   042F 36 00         [10] 1479 	ld	(hl), #0x00
   0431                    1480 00104$:
                           1481 ;my/pres.h:50: if (pad_this_frame & PAD_UP) {
   0431 21r06r00      [10] 1482 	ld	hl,#_pad_this_frame+0
   0434 CB 46         [12] 1483 	bit	0, (hl)
   0436 28 11         [12] 1484 	jr	Z,00109$
                           1485 ;my/pres.h:51: if (mode_no_resonators) -- mode_no_resonators; else mode_no_resonators = 1;
   0438 3ArD7r03      [13] 1486 	ld	a,(#_mode_no_resonators + 0)
   043B B7            [ 4] 1487 	or	a, a
   043C 28 06         [12] 1488 	jr	Z,00106$
   043E 21rD7r03      [10] 1489 	ld	hl, #_mode_no_resonators+0
   0441 35            [11] 1490 	dec	(hl)
   0442 18 05         [12] 1491 	jr	00109$
   0444                    1492 00106$:
   0444 21rD7r03      [10] 1493 	ld	hl,#_mode_no_resonators + 0
   0447 36 01         [10] 1494 	ld	(hl), #0x01
   0449                    1495 00109$:
                           1496 ;my/pres.h:54: if (pad_this_frame & PAD_1) break;
   0449 21r06r00      [10] 1497 	ld	hl,#_pad_this_frame+0
   044C CB 66         [12] 1498 	bit	4, (hl)
   044E 28 A6         [12] 1499 	jr	Z,00113$
                           1500 ;my/pres.h:60: plife = mode_no_resonators ? 5 : 3;
   0450 3ArD7r03      [13] 1501 	ld	a,(#_mode_no_resonators + 0)
   0453 B7            [ 4] 1502 	or	a, a
   0454 28 04         [12] 1503 	jr	Z,00117$
   0456 3E 05         [ 7] 1504 	ld	a,#0x05
   0458 18 02         [12] 1505 	jr	00118$
   045A                    1506 00117$:
   045A 3E 03         [ 7] 1507 	ld	a,#0x03
   045C                    1508 00118$:
   045C 32r6Fr00      [13] 1509 	ld	(#_plife + 0),a
                           1510 ;my/pres.h:62: bat_out ();
   045F C3r64r03      [10] 1511 	jp  _bat_out
   0462                    1512 ___str_0:
   0462 53 45 4C 45 43 54  1513 	.ascii "SELECT AND PUSH 1!"
        20 41 4E 44 20 50
        55 53 48 20 31 21
   0474 00                 1514 	.db 0x00
   0475                    1515 ___str_1:
   0475 52 45 53 4F 4E 41  1516 	.ascii "RESONATORS"
        54 4F 52 53
   047F 00                 1517 	.db 0x00
   0480                    1518 ___str_2:
   0480 45 41 53 59 20 4D  1519 	.ascii "EASY MODE"
        4F 44 45
   0489 00                 1520 	.db 0x00
   048A                    1521 ___str_3:
   048A 40 20 32 30 31 38  1522 	.ascii "@ 2018 THE MOJON TWINS"
        20 54 48 45 20 4D
        4F 4A 4F 4E 20 54
        57 49 4E 53
   04A0 00                 1523 	.db 0x00
                           1524 ;my/pres.h:65: void scr_game_over (void) {
                           1525 ;	---------------------------------
                           1526 ; Function scr_game_over
                           1527 ; ---------------------------------
   04A1                    1528 _scr_game_over::
                           1529 ;my/pres.h:66: _x = 11; _y = 15; pr_str ("GAME OVER!");
   04A1 21r00r00      [10] 1530 	ld	hl,#__x + 0
   04A4 36 0B         [10] 1531 	ld	(hl), #0x0B
   04A6 21r01r00      [10] 1532 	ld	hl,#__y + 0
   04A9 36 0F         [10] 1533 	ld	(hl), #0x0F
   04AB 21rB4r04      [10] 1534 	ld	hl,#___str_4
   04AE E5            [11] 1535 	push	hl
   04AF CDr00r00      [17] 1536 	call	_pr_str
   04B2 F1            [10] 1537 	pop	af
   04B3 C9            [10] 1538 	ret
   04B4                    1539 ___str_4:
   04B4 47 41 4D 45 20 4F  1540 	.ascii "GAME OVER!"
        56 45 52 21
   04BE 00                 1541 	.db 0x00
                           1542 ;my/pres.h:69: void scr_the_end (void) {
                           1543 ;	---------------------------------
                           1544 ; Function scr_the_end
                           1545 ; ---------------------------------
   04BF                    1546 _scr_the_end::
                           1547 ;my/pres.h:70: _x = 6; _y = 6; pr_str (" CHERIL VANQUISHED%    ALL ZOMBIES%AND RETURNED SAFELY%   TO THE BOSQUE");
   04BF 21r00r00      [10] 1548 	ld	hl,#__x + 0
   04C2 36 06         [10] 1549 	ld	(hl), #0x06
   04C4 21r01r00      [10] 1550 	ld	hl,#__y + 0
   04C7 36 06         [10] 1551 	ld	(hl), #0x06
   04C9 21rE4r04      [10] 1552 	ld	hl,#___str_5
   04CC E5            [11] 1553 	push	hl
   04CD CDr00r00      [17] 1554 	call	_pr_str
   04D0 F1            [10] 1555 	pop	af
                           1556 ;my/pres.h:72: _x = 12; _y = 25; pr_str ("THE  END");
   04D1 21r00r00      [10] 1557 	ld	hl,#__x + 0
   04D4 36 0C         [10] 1558 	ld	(hl), #0x0C
   04D6 21r01r00      [10] 1559 	ld	hl,#__y + 0
   04D9 36 19         [10] 1560 	ld	(hl), #0x19
   04DB 21r2Cr05      [10] 1561 	ld	hl,#___str_6
   04DE E5            [11] 1562 	push	hl
   04DF CDr00r00      [17] 1563 	call	_pr_str
   04E2 F1            [10] 1564 	pop	af
   04E3 C9            [10] 1565 	ret
   04E4                    1566 ___str_5:
   04E4 20 43 48 45 52 49  1567 	.ascii " CHERIL VANQUISHED%    ALL ZOMBIES%AND RETURNED SAFELY%   TO"
        4C 20 56 41 4E 51
        55 49 53 48 45 44
        25 20 20 20 20 41
        4C 4C 20 5A 4F 4D
        42 49 45 53 25 41
        4E 44 20 52 45 54
        55 52 4E 45 44 20
        53 41 46 45 4C 59
        25 20 20 20 54 4F
   0520 20 54 48 45 20 42  1568 	.ascii " THE BOSQUE"
        4F 53 51 55 45
   052B 00                 1569 	.db 0x00
   052C                    1570 ___str_6:
   052C 54 48 45 20 20 45  1571 	.ascii "THE  END"
        4E 44
   0534 00                 1572 	.db 0x00
                           1573 ;my/pres.h:80: void scr_level (void) {
                           1574 ;	---------------------------------
                           1575 ; Function scr_level
                           1576 ; ---------------------------------
   0535                    1577 _scr_level::
                           1578 ;my/pres.h:81: _x = 12; _y = 14; pr_str ("LEVEL 0"); SG_setTile (17+level);
   0535 21r00r00      [10] 1579 	ld	hl,#__x + 0
   0538 36 0C         [10] 1580 	ld	(hl), #0x0C
   053A 21r01r00      [10] 1581 	ld	hl,#__y + 0
   053D 36 0E         [10] 1582 	ld	(hl), #0x0E
   053F 21r9Cr05      [10] 1583 	ld	hl,#___str_7
   0542 E5            [11] 1584 	push	hl
   0543 CDr00r00      [17] 1585 	call	_pr_str
   0546 F1            [10] 1586 	pop	af
   0547 3ArB8r01      [13] 1587 	ld	a,(#_level + 0)
   054A C6 11         [ 7] 1588 	add	a, #0x11
   054C F5            [11] 1589 	push	af
   054D 33            [ 6] 1590 	inc	sp
   054E CDr00r00      [17] 1591 	call	_SG_setTile
   0551 33            [ 6] 1592 	inc	sp
                           1593 ;my/pres.h:82: _x = 10; _y = 16; pr_str (levelnames [level]);
   0552 21r00r00      [10] 1594 	ld	hl,#__x + 0
   0555 36 0A         [10] 1595 	ld	(hl), #0x0A
   0557 21r01r00      [10] 1596 	ld	hl,#__y + 0
   055A 36 10         [10] 1597 	ld	(hl), #0x10
   055C FD 21rB8r01   [14] 1598 	ld	iy,#_level
   0560 FD 6E 00      [19] 1599 	ld	l,0 (iy)
   0563 26 00         [ 7] 1600 	ld	h,#0x00
   0565 29            [11] 1601 	add	hl, hl
   0566 11r96r05      [10] 1602 	ld	de,#_levelnames
   0569 19            [11] 1603 	add	hl,de
   056A 5E            [ 7] 1604 	ld	e,(hl)
   056B 23            [ 6] 1605 	inc	hl
   056C 56            [ 7] 1606 	ld	d,(hl)
   056D D5            [11] 1607 	push	de
   056E CDr00r00      [17] 1608 	call	_pr_str
   0571 F1            [10] 1609 	pop	af
   0572 C9            [10] 1610 	ret
   0573                    1611 _level0name:
   0573 20 20 54 48 45 20  1612 	.ascii "  THE CITY"
        43 49 54 59
   057D 00                 1613 	.db 0x00
   057E                    1614 _level1name:
   057E 54 48 45 20 46 41  1615 	.ascii "THE FACTORY"
        43 54 4F 52 59
   0589 00                 1616 	.db 0x00
   058A                    1617 _level2name:
   058A 20 54 48 45 20 46  1618 	.ascii " THE FOREST"
        4F 52 45 53 54
   0595 00                 1619 	.db 0x00
   0596                    1620 _levelnames:
   0596r73r05              1621 	.dw _level0name
   0598r7Er05              1622 	.dw _level1name
   059Ar8Ar05              1623 	.dw _level2name
   059C                    1624 ___str_7:
   059C 4C 45 56 45 4C 20  1625 	.ascii "LEVEL 0"
        30
   05A3 00                 1626 	.db 0x00
                           1627 ;my/pres.h:85: void credits (void) {
                           1628 ;	---------------------------------
                           1629 ; Function credits
                           1630 ; ---------------------------------
   05A4                    1631 _credits::
                           1632 ;my/pres.h:86: cls ();
   05A4 CDr00r00      [17] 1633 	call	_cls
                           1634 ;my/pres.h:87: rds16 = 0; rdy = 240;
   05A7 21 00 00      [10] 1635 	ld	hl,#0x0000
   05AA 22r0Ar00      [16] 1636 	ld	(_rds16),hl
   05AD 21r15r00      [10] 1637 	ld	hl,#_rdy + 0
   05B0 36 F0         [10] 1638 	ld	(hl), #0xF0
                           1639 ;my/pres.h:89: _x = 0; _y = 18; 
   05B2 21r00r00      [10] 1640 	ld	hl,#__x + 0
   05B5 36 00         [10] 1641 	ld	(hl), #0x00
   05B7 21r01r00      [10] 1642 	ld	hl,#__y + 0
   05BA 36 12         [10] 1643 	ld	(hl), #0x12
                           1644 ;my/pres.h:90: pr_str ("     CHERIL PERIL CLASSIC%%         ORIGINAL GAME%     @ 2011 THE MOJON TWINS%       REPROGRAMMED GAME%     @ 2018 THE MOJON TWINS");
   05BC 21rF9r05      [10] 1645 	ld	hl,#___str_11+0
   05BF E5            [11] 1646 	push	hl
   05C0 CDr00r00      [17] 1647 	call	_pr_str
                           1648 ;my/pres.h:92: SG_displayOn ();
   05C3 21 40 01      [10] 1649 	ld	hl, #0x0140
   05C6 E3            [19] 1650 	ex	(sp),hl
   05C7 CDr00r00      [17] 1651 	call	_SG_VDPturnOnFeature
   05CA F1            [10] 1652 	pop	af
                           1653 ;my/pres.h:94: while (!(SG_getKeysStatus () & PAD_START) && rds16 < 300) {
   05CB                    1654 00102$:
   05CB CDr00r00      [17] 1655 	call	_SG_getKeysStatus
   05CE CB 65         [ 8] 1656 	bit	4, l
   05D0 20 1E         [12] 1657 	jr	NZ,00104$
   05D2 3Ar0Ar00      [13] 1658 	ld	a,(#_rds16 + 0)
   05D5 D6 2C         [ 7] 1659 	sub	a, #0x2C
   05D7 3Ar0Br00      [13] 1660 	ld	a,(#_rds16 + 1)
   05DA 17            [ 4] 1661 	rla
   05DB 3F            [ 4] 1662 	ccf
   05DC 1F            [ 4] 1663 	rra
   05DD DE 81         [ 7] 1664 	sbc	a, #0x81
   05DF 30 0F         [12] 1665 	jr	NC,00104$
                           1666 ;my/pres.h:97: update_cycle ();
   05E1 CDr00r00      [17] 1667 	call	_update_cycle
                           1668 ;my/pres.h:98: rds16 ++;
   05E4 21r0Ar00      [10] 1669 	ld	hl, #_rds16+0
   05E7 34            [11] 1670 	inc	(hl)
   05E8 20 E1         [12] 1671 	jr	NZ,00102$
   05EA 21r0Br00      [10] 1672 	ld	hl, #_rds16+1
   05ED 34            [11] 1673 	inc	(hl)
   05EE 18 DB         [12] 1674 	jr	00102$
   05F0                    1675 00104$:
                           1676 ;my/pres.h:101: SG_displayOff ();
   05F0 21 40 01      [10] 1677 	ld	hl,#0x0140
   05F3 E5            [11] 1678 	push	hl
   05F4 CDr00r00      [17] 1679 	call	_SG_VDPturnOffFeature
   05F7 F1            [10] 1680 	pop	af
   05F8 C9            [10] 1681 	ret
   05F9                    1682 ___str_11:
   05F9 20 20 20 20 20 43  1683 	.ascii "     CHERIL PERIL CLASSIC%%         ORIGINAL GAME%     @ 201"
        48 45 52 49 4C 20
        50 45 52 49 4C 20
        43 4C 41 53 53 49
        43 25 25 20 20 20
        20 20 20 20 20 20
        4F 52 49 47 49 4E
        41 4C 20 47 41 4D
        45 25 20 20 20 20
        20 40 20 32 30 31
   0635 31 20 54 48 45 20  1684 	.ascii "1 THE MOJON TWINS%       REPROGRAMMED GAME%     @ 2018 THE M"
        4D 4F 4A 4F 4E 20
        54 57 49 4E 53 25
        20 20 20 20 20 20
        20 52 45 50 52 4F
        47 52 41 4D 4D 45
        44 20 47 41 4D 45
        25 20 20 20 20 20
        40 20 32 30 31 38
        20 54 48 45 20 4D
   0671 4F 4A 4F 4E 20 54  1685 	.ascii "OJON TWINS"
        57 49 4E 53
   067B 00                 1686 	.db 0x00
                           1687 ;mainloop/flickscreen.h:7: void flickscreen_do_horizontal (void) {
                           1688 ;	---------------------------------
                           1689 ; Function flickscreen_do_horizontal
                           1690 ; ---------------------------------
   067C                    1691 _flickscreen_do_horizontal::
                           1692 ;mainloop/flickscreen.h:12: (cfx + pvx) < 0
   067C FD 21rD4r03   [14] 1693 	ld	iy,#_cfx
   0680 FD 4E 00      [19] 1694 	ld	c,0 (iy)
   0683 3ArD4r03      [13] 1695 	ld	a,(#_cfx + 0)
   0686 17            [ 4] 1696 	rla
   0687 9F            [ 4] 1697 	sbc	a, a
   0688 47            [ 4] 1698 	ld	b,a
   0689 3Ar4Er00      [13] 1699 	ld	a,(#_pvx + 0)
   068C 81            [ 4] 1700 	add	a, c
   068D 57            [ 4] 1701 	ld	d,a
   068E 3Ar4Fr00      [13] 1702 	ld	a,(#_pvx + 1)
   0691 88            [ 4] 1703 	adc	a, b
   0692 5F            [ 4] 1704 	ld	e,a
                           1705 ;mainloop/flickscreen.h:8: if (prx == 4 && 
   0693 3Ar52r00      [13] 1706 	ld	a,(#_prx + 0)
   0696 D6 04         [ 7] 1707 	sub	a, #0x04
   0698 20 0F         [12] 1708 	jr	NZ,00105$
                           1709 ;mainloop/flickscreen.h:12: (cfx + pvx) < 0
   069A CB 7B         [ 8] 1710 	bit	7, e
   069C 28 0B         [12] 1711 	jr	Z,00105$
                           1712 ;mainloop/flickscreen.h:15: -- n_pant;
   069E 21rBAr01      [10] 1713 	ld	hl, #_n_pant+0
   06A1 35            [11] 1714 	dec	(hl)
                           1715 ;mainloop/flickscreen.h:16: px = 244 << FIXBITS;
   06A2 21 00 3D      [10] 1716 	ld	hl,#0x3D00
   06A5 22r4Ar00      [16] 1717 	ld	(_px),hl
   06A8 C9            [10] 1718 	ret
   06A9                    1719 00105$:
                           1720 ;mainloop/flickscreen.h:17: } else if (prx == 244 && 
   06A9 FD 21r52r00   [14] 1721 	ld	iy,#_prx
   06AD FD 7E 00      [19] 1722 	ld	a,0 (iy)
   06B0 D6 F4         [ 7] 1723 	sub	a, #0xF4
   06B2 C0            [11] 1724 	ret	NZ
                           1725 ;mainloop/flickscreen.h:21: (cfx + pvx) > 0
   06B3 AF            [ 4] 1726 	xor	a, a
   06B4 BA            [ 4] 1727 	cp	a, d
   06B5 9B            [ 4] 1728 	sbc	a, e
   06B6 E2rBBr06      [10] 1729 	jp	PO, 00130$
   06B9 EE 80         [ 7] 1730 	xor	a, #0x80
   06BB                    1731 00130$:
   06BB F0            [11] 1732 	ret	P
                           1733 ;mainloop/flickscreen.h:24: ++ n_pant;
   06BC 21rBAr01      [10] 1734 	ld	hl, #_n_pant+0
   06BF 34            [11] 1735 	inc	(hl)
                           1736 ;mainloop/flickscreen.h:25: px = 4 << FIXBITS;
   06C0 21 00 01      [10] 1737 	ld	hl,#0x0100
   06C3 22r4Ar00      [16] 1738 	ld	(_px),hl
   06C6 C9            [10] 1739 	ret
                           1740 ;mainloop/flickscreen.h:29: void flickscreen_do_vertical (void) {
                           1741 ;	---------------------------------
                           1742 ; Function flickscreen_do_vertical
                           1743 ; ---------------------------------
   06C7                    1744 _flickscreen_do_vertical::
                           1745 ;mainloop/flickscreen.h:42: if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
   06C7 3Ar53r00      [13] 1746 	ld	a,(#_pry + 0)
   06CA B7            [ 4] 1747 	or	a, a
   06CB 20 44         [12] 1748 	jr	NZ,00108$
   06CD 3Ar51r00      [13] 1749 	ld	a,(#_pvy + 1)
   06D0 CB 7F         [ 8] 1750 	bit	7,a
   06D2 28 3D         [12] 1751 	jr	Z,00108$
   06D4 21r7Fr00      [10] 1752 	ld	hl,#_c_map_w
   06D7 3ArBAr01      [13] 1753 	ld	a,(#_n_pant + 0)
   06DA 96            [ 7] 1754 	sub	a, (hl)
   06DB 38 34         [12] 1755 	jr	C,00108$
                           1756 ;mainloop/flickscreen.h:43: n_pant -= c_map_w;
   06DD 21r7Fr00      [10] 1757 	ld	hl,#_c_map_w
   06E0 D5            [11] 1758 	push	de
   06E1 FD 21rBAr01   [14] 1759 	ld	iy,#_n_pant
   06E5 FD E5         [15] 1760 	push	iy
   06E7 D1            [10] 1761 	pop	de
   06E8 1A            [ 7] 1762 	ld	a,(de)
   06E9 96            [ 7] 1763 	sub	a, (hl)
   06EA 12            [ 7] 1764 	ld	(de),a
   06EB D1            [10] 1765 	pop	de
                           1766 ;mainloop/flickscreen.h:44: py = 192 << FIXBITS;
   06EC 21 00 30      [10] 1767 	ld	hl,#0x3000
   06EF 22r4Cr00      [16] 1768 	ld	(_py),hl
                           1769 ;mainloop/flickscreen.h:45: if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
   06F2 3E 60         [ 7] 1770 	ld	a,#0x60
   06F4 FD 21r50r00   [14] 1771 	ld	iy,#_pvy
   06F8 FD BE 00      [19] 1772 	cp	a, 0 (iy)
   06FB 3E FF         [ 7] 1773 	ld	a,#0xFF
   06FD FD 21r50r00   [14] 1774 	ld	iy,#_pvy
   0701 FD 9E 01      [19] 1775 	sbc	a, 1 (iy)
   0704 E2r09r07      [10] 1776 	jp	PO, 00142$
   0707 EE 80         [ 7] 1777 	xor	a, #0x80
   0709                    1778 00142$:
   0709 F0            [11] 1779 	ret	P
   070A 21 60 FF      [10] 1780 	ld	hl,#0xFF60
   070D 22r50r00      [16] 1781 	ld	(_pvy),hl
   0710 C9            [10] 1782 	ret
   0711                    1783 00108$:
                           1784 ;mainloop/flickscreen.h:46: } else if (pry >= 192 && pvy > 0 && n_pant < c_map_size - c_map_w) {
   0711 3Ar53r00      [13] 1785 	ld	a,(#_pry + 0)
   0714 D6 C0         [ 7] 1786 	sub	a, #0xC0
   0716 D8            [11] 1787 	ret	C
   0717 AF            [ 4] 1788 	xor	a, a
   0718 FD 21r50r00   [14] 1789 	ld	iy,#_pvy
   071C FD BE 00      [19] 1790 	cp	a, 0 (iy)
   071F FD 21r50r00   [14] 1791 	ld	iy,#_pvy
   0723 FD 9E 01      [19] 1792 	sbc	a, 1 (iy)
   0726 E2r2Br07      [10] 1793 	jp	PO, 00143$
   0729 EE 80         [ 7] 1794 	xor	a, #0x80
   072B                    1795 00143$:
   072B F0            [11] 1796 	ret	P
   072C 21r81r00      [10] 1797 	ld	hl,#_c_map_size + 0
   072F 5E            [ 7] 1798 	ld	e, (hl)
   0730 16 00         [ 7] 1799 	ld	d,#0x00
   0732 FD 21r7Fr00   [14] 1800 	ld	iy,#_c_map_w
   0736 FD 6E 00      [19] 1801 	ld	l,0 (iy)
   0739 26 00         [ 7] 1802 	ld	h,#0x00
   073B 7B            [ 4] 1803 	ld	a,e
   073C 95            [ 4] 1804 	sub	a, l
   073D 5F            [ 4] 1805 	ld	e,a
   073E 7A            [ 4] 1806 	ld	a,d
   073F 9C            [ 4] 1807 	sbc	a, h
   0740 57            [ 4] 1808 	ld	d,a
   0741 FD 21rBAr01   [14] 1809 	ld	iy,#_n_pant
   0745 FD 66 00      [19] 1810 	ld	h,0 (iy)
   0748 2E 00         [ 7] 1811 	ld	l,#0x00
   074A 7C            [ 4] 1812 	ld	a,h
   074B 93            [ 4] 1813 	sub	a, e
   074C 7D            [ 4] 1814 	ld	a,l
   074D 9A            [ 4] 1815 	sbc	a, d
   074E E2r53r07      [10] 1816 	jp	PO, 00144$
   0751 EE 80         [ 7] 1817 	xor	a, #0x80
   0753                    1818 00144$:
   0753 F0            [11] 1819 	ret	P
                           1820 ;mainloop/flickscreen.h:47: n_pant += c_map_w;
   0754 21r7Fr00      [10] 1821 	ld	hl,#_c_map_w
   0757 D5            [11] 1822 	push	de
   0758 FD 21rBAr01   [14] 1823 	ld	iy,#_n_pant
   075C FD E5         [15] 1824 	push	iy
   075E D1            [10] 1825 	pop	de
   075F 1A            [ 7] 1826 	ld	a,(de)
   0760 86            [ 7] 1827 	add	a, (hl)
   0761 12            [ 7] 1828 	ld	(de),a
   0762 D1            [10] 1829 	pop	de
                           1830 ;mainloop/flickscreen.h:48: py = 0;
   0763 21 00 00      [10] 1831 	ld	hl,#0x0000
   0766 22r4Cr00      [16] 1832 	ld	(_py),hl
   0769 C9            [10] 1833 	ret
                           1834 ;mainloop.h:7: void game_init (void) {
                           1835 ;	---------------------------------
                           1836 ; Function game_init
                           1837 ; ---------------------------------
   076A                    1838 _game_init::
                           1839 ;mainloop.h:9: win_level = game_over = 0;
   076A 21rC0r01      [10] 1840 	ld	hl,#_game_over + 0
   076D 36 00         [10] 1841 	ld	(hl), #0x00
   076F 21rBFr01      [10] 1842 	ld	hl,#_win_level + 0
   0772 36 00         [10] 1843 	ld	(hl), #0x00
   0774 FD 21rB8r01   [14] 1844 	ld	iy,#_level
   0778 FD 6E 00      [19] 1845 	ld	l,0 (iy)
   077B 26 00         [ 7] 1846 	ld	h,#0x00
   077D 29            [11] 1847 	add	hl, hl
   077E 4D            [ 4] 1848 	ld	c, l
   077F 44            [ 4] 1849 	ld	b, h
   0780 21rFCr01      [10] 1850 	ld	hl,#_l_ts_tmaps
   0783 09            [11] 1851 	add	hl,bc
   0784 7E            [ 7] 1852 	ld	a,(hl)
   0785 FD 21r82r00   [14] 1853 	ld	iy,#_c_ts_tmaps
   0789 FD 77 00      [19] 1854 	ld	0 (iy),a
   078C 23            [ 6] 1855 	inc	hl
   078D 7E            [ 7] 1856 	ld	a,(hl)
   078E 32r83r00      [13] 1857 	ld	(#_c_ts_tmaps + 1),a
                           1858 ;mainloop/asset_setup.h:10: c_behs = 		l_behs [level];
   0791 21r02r02      [10] 1859 	ld	hl,#_l_behs
   0794 09            [11] 1860 	add	hl,bc
   0795 7E            [ 7] 1861 	ld	a,(hl)
   0796 FD 21r84r00   [14] 1862 	ld	iy,#_c_behs
   079A FD 77 00      [19] 1863 	ld	0 (iy),a
   079D 23            [ 6] 1864 	inc	hl
   079E 7E            [ 7] 1865 	ld	a,(hl)
   079F 32r85r00      [13] 1866 	ld	(#_c_behs + 1),a
                           1867 ;mainloop/asset_setup.h:11: spr_enems = 	l_spr_enems [level];
   07A2 21r0Er02      [10] 1868 	ld	hl,#_l_spr_enems
   07A5 09            [11] 1869 	add	hl,bc
   07A6 7E            [ 7] 1870 	ld	a,(hl)
   07A7 FD 21r86r00   [14] 1871 	ld	iy,#_spr_enems
   07AB FD 77 00      [19] 1872 	ld	0 (iy),a
   07AE 23            [ 6] 1873 	inc	hl
   07AF 7E            [ 7] 1874 	ld	a,(hl)
   07B0 32r87r00      [13] 1875 	ld	(#_spr_enems + 1),a
                           1876 ;mainloop/asset_setup.h:13: c_map = 		l_map [level];
   07B3 21r14r02      [10] 1877 	ld	hl,#_l_map
   07B6 09            [11] 1878 	add	hl,bc
   07B7 7E            [ 7] 1879 	ld	a,(hl)
   07B8 FD 21r88r00   [14] 1880 	ld	iy,#_c_map
   07BC FD 77 00      [19] 1881 	ld	0 (iy),a
   07BF 23            [ 6] 1882 	inc	hl
   07C0 7E            [ 7] 1883 	ld	a,(hl)
   07C1 32r89r00      [13] 1884 	ld	(#_c_map + 1),a
                           1885 ;mainloop/asset_setup.h:20: c_decos = 	l_decos [level];
   07C4 3Er1A         [ 7] 1886 	ld	a,#<(_l_decos)
   07C6 21rB8r01      [10] 1887 	ld	hl,#_level
   07C9 86            [ 7] 1888 	add	a, (hl)
   07CA 5F            [ 4] 1889 	ld	e,a
   07CB 3Es02         [ 7] 1890 	ld	a,#>(_l_decos)
   07CD CE 00         [ 7] 1891 	adc	a, #0x00
   07CF 57            [ 4] 1892 	ld	d,a
   07D0 1A            [ 7] 1893 	ld	a,(de)
   07D1 32r8Ar00      [13] 1894 	ld	(#_c_decos + 0),a
                           1895 ;mainloop/asset_setup.h:23: c_locks = 	l_locks [level];
   07D4 21r1Dr02      [10] 1896 	ld	hl,#_l_locks
   07D7 09            [11] 1897 	add	hl,bc
   07D8 7E            [ 7] 1898 	ld	a,(hl)
   07D9 FD 21r8Br00   [14] 1899 	ld	iy,#_c_locks
   07DD FD 77 00      [19] 1900 	ld	0 (iy),a
   07E0 23            [ 6] 1901 	inc	hl
   07E1 7E            [ 7] 1902 	ld	a,(hl)
   07E2 32r8Cr00      [13] 1903 	ld	(#_c_locks + 1),a
                           1904 ;mainloop/asset_setup.h:25: l_n_bolts [level];
   07E5 3Er23         [ 7] 1905 	ld	a,#<(_l_n_bolts)
   07E7 21rB8r01      [10] 1906 	ld	hl,#_level
   07EA 86            [ 7] 1907 	add	a, (hl)
   07EB 5F            [ 4] 1908 	ld	e,a
   07EC 3Es02         [ 7] 1909 	ld	a,#>(_l_n_bolts)
   07EE CE 00         [ 7] 1910 	adc	a, #0x00
   07F0 57            [ 4] 1911 	ld	d,a
   07F1 1A            [ 7] 1912 	ld	a,(de)
   07F2 32r91r00      [13] 1913 	ld	(#_c_max_bolts + 0),a
                           1914 ;mainloop/asset_setup.h:28: c_enems = 		l_enems [level];
   07F5 21r26r02      [10] 1915 	ld	hl,#_l_enems
   07F8 09            [11] 1916 	add	hl,bc
   07F9 7E            [ 7] 1917 	ld	a,(hl)
   07FA FD 21r8Dr00   [14] 1918 	ld	iy,#_c_enems
   07FE FD 77 00      [19] 1919 	ld	0 (iy),a
   0801 23            [ 6] 1920 	inc	hl
   0802 7E            [ 7] 1921 	ld	a,(hl)
   0803 32r8Er00      [13] 1922 	ld	(#_c_enems + 1),a
                           1923 ;mainloop/asset_setup.h:29: c_hotspots = 	l_hotspots [level];	
   0806 21r2Cr02      [10] 1924 	ld	hl,#_l_hotspots
   0809 09            [11] 1925 	add	hl,bc
   080A 7E            [ 7] 1926 	ld	a,(hl)
   080B FD 21r8Fr00   [14] 1927 	ld	iy,#_c_hotspots
   080F FD 77 00      [19] 1928 	ld	0 (iy),a
   0812 23            [ 6] 1929 	inc	hl
   0813 7E            [ 7] 1930 	ld	a,(hl)
   0814 32r90r00      [13] 1931 	ld	(#_c_hotspots + 1),a
                           1932 ;mainloop/asset_setup.h:31: c_max_enems = 	l_player_max_enems [level];
   0817 3ErED         [ 7] 1933 	ld	a,#<(_l_player_max_enems)
   0819 21rB8r01      [10] 1934 	ld	hl,#_level
   081C 86            [ 7] 1935 	add	a, (hl)
   081D 5F            [ 4] 1936 	ld	e,a
   081E 3Es01         [ 7] 1937 	ld	a,#>(_l_player_max_enems)
   0820 CE 00         [ 7] 1938 	adc	a, #0x00
   0822 57            [ 4] 1939 	ld	d,a
   0823 1A            [ 7] 1940 	ld	a,(de)
   0824 32rB9r01      [13] 1941 	ld	(#_c_max_enems + 0),a
                           1942 ;mainloop/asset_setup.h:33: c_map_w = 		l_map_w [level];
   0827 3ErE4         [ 7] 1943 	ld	a,#<(_l_map_w)
   0829 21rB8r01      [10] 1944 	ld	hl,#_level
   082C 86            [ 7] 1945 	add	a, (hl)
   082D 5F            [ 4] 1946 	ld	e,a
   082E 3Es01         [ 7] 1947 	ld	a,#>(_l_map_w)
   0830 CE 00         [ 7] 1948 	adc	a, #0x00
   0832 57            [ 4] 1949 	ld	d,a
   0833 1A            [ 7] 1950 	ld	a,(de)
   0834 32r7Fr00      [13] 1951 	ld	(#_c_map_w + 0),a
                           1952 ;mainloop/asset_setup.h:34: c_map_h = 		l_map_h [level];
   0837 3ErE7         [ 7] 1953 	ld	a,#<(_l_map_h)
   0839 21rB8r01      [10] 1954 	ld	hl,#_level
   083C 86            [ 7] 1955 	add	a, (hl)
   083D 5F            [ 4] 1956 	ld	e,a
   083E 3Es01         [ 7] 1957 	ld	a,#>(_l_map_h)
   0840 CE 00         [ 7] 1958 	adc	a, #0x00
   0842 57            [ 4] 1959 	ld	d,a
   0843 1A            [ 7] 1960 	ld	a,(de)
                           1961 ;mainloop/asset_setup.h:84: rda = c_map_h; c_map_size = 0; while (rda --) c_map_size += c_map_w;
   0844 32r80r00      [13] 1962 	ld	(#_c_map_h + 0),a
   0847 32r18r00      [13] 1963 	ld	(#_rda + 0),a
   084A 21r81r00      [10] 1964 	ld	hl,#_c_map_size + 0
   084D 36 00         [10] 1965 	ld	(hl), #0x00
   084F                    1966 00101$:
   084F 21r18r00      [10] 1967 	ld	hl,#_rda + 0
   0852 56            [ 7] 1968 	ld	d, (hl)
   0853 21r18r00      [10] 1969 	ld	hl, #_rda+0
   0856 35            [11] 1970 	dec	(hl)
   0857 7A            [ 4] 1971 	ld	a,d
   0858 B7            [ 4] 1972 	or	a, a
   0859 28 11         [12] 1973 	jr	Z,00103$
   085B 21r7Fr00      [10] 1974 	ld	hl,#_c_map_w
   085E D5            [11] 1975 	push	de
   085F FD 21r81r00   [14] 1976 	ld	iy,#_c_map_size
   0863 FD E5         [15] 1977 	push	iy
   0865 D1            [10] 1978 	pop	de
   0866 1A            [ 7] 1979 	ld	a,(de)
   0867 86            [ 7] 1980 	add	a, (hl)
   0868 12            [ 7] 1981 	ld	(de),a
   0869 D1            [10] 1982 	pop	de
   086A 18 E3         [12] 1983 	jr	00101$
   086C                    1984 00103$:
                           1985 ;my/level_pattern_unpacker.h:3: unpack_bg_patterns (l_ts_patterns [level], l_ts_colours [level], 64*8, 7);
   086C 21rF6r01      [10] 1986 	ld	hl,#_l_ts_colours
   086F 09            [11] 1987 	add	hl,bc
   0870 5E            [ 7] 1988 	ld	e,(hl)
   0871 23            [ 6] 1989 	inc	hl
   0872 56            [ 7] 1990 	ld	d,(hl)
   0873 21rF0r01      [10] 1991 	ld	hl,#_l_ts_patterns
   0876 09            [11] 1992 	add	hl,bc
   0877 4E            [ 7] 1993 	ld	c,(hl)
   0878 23            [ 6] 1994 	inc	hl
   0879 46            [ 7] 1995 	ld	b,(hl)
   087A 3E 07         [ 7] 1996 	ld	a,#0x07
   087C F5            [11] 1997 	push	af
   087D 33            [ 6] 1998 	inc	sp
   087E 21 00 02      [10] 1999 	ld	hl,#0x0200
   0881 E5            [11] 2000 	push	hl
   0882 D5            [11] 2001 	push	de
   0883 C5            [11] 2002 	push	bc
   0884 CDr00r00      [17] 2003 	call	_unpack_bg_patterns
   0887 21 07 00      [10] 2004 	ld	hl,#7
   088A 39            [11] 2005 	add	hl,sp
   088B F9            [ 6] 2006 	ld	sp,hl
                           2007 ;my/level_pattern_unpacker.h:4: aPLib_depack_VRAM (SGT_BASE + 160*8, l_spr_patterns [level]);
   088C FD 21rB8r01   [14] 2008 	ld	iy,#_level
   0890 FD 6E 00      [19] 2009 	ld	l,0 (iy)
   0893 26 00         [ 7] 2010 	ld	h,#0x00
   0895 29            [11] 2011 	add	hl, hl
   0896 11r08r02      [10] 2012 	ld	de,#_l_spr_patterns
   0899 19            [11] 2013 	add	hl,de
   089A 5E            [ 7] 2014 	ld	e,(hl)
   089B 23            [ 6] 2015 	inc	hl
   089C 56            [ 7] 2016 	ld	d,(hl)
   089D D5            [11] 2017 	push	de
   089E 21 00 3D      [10] 2018 	ld	hl,#0x3D00
   08A1 E5            [11] 2019 	push	hl
   08A2 CDr00r00      [17] 2020 	call	_aPLib_depack_VRAM
   08A5 F1            [10] 2021 	pop	af
   08A6 F1            [10] 2022 	pop	af
                           2023 ;mainloop.h:17: cls ();
   08A7 CDr00r00      [17] 2024 	call	_cls
                           2025 ;mainloop.h:19: draw_game_frame ();
   08AA CDrD2r02      [17] 2026 	call	_draw_game_frame
                           2027 ;mainloop.h:22: hotspots_load ();
   08AD CDr00r00      [17] 2028 	call	_hotspots_load
                           2029 ;mainloop.h:25: memfill (lkact, 1, c_max_bolts);
   08B0 21r91r00      [10] 2030 	ld	hl,#_c_max_bolts + 0
   08B3 4E            [ 7] 2031 	ld	c, (hl)
   08B4 06 00         [ 7] 2032 	ld	b,#0x00
   08B6 11rE4r01      [10] 2033 	ld	de,#_lkact
   08B9 C5            [11] 2034 	push	bc
   08BA 3E 01         [ 7] 2035 	ld	a,#0x01
   08BC F5            [11] 2036 	push	af
   08BD 33            [ 6] 2037 	inc	sp
   08BE D5            [11] 2038 	push	de
   08BF CDr00r00      [17] 2039 	call	_memfill
   08C2 F1            [10] 2040 	pop	af
   08C3 F1            [10] 2041 	pop	af
   08C4 33            [ 6] 2042 	inc	sp
                           2043 ;mainloop.h:28: if (!warp_to_level)	{
   08C5 3ArC1r01      [13] 2044 	ld	a,(#_warp_to_level + 0)
   08C8 B7            [ 4] 2045 	or	a, a
   08C9 20 43         [12] 2046 	jr	NZ,00105$
                           2047 ;mainloop.h:29: n_pant = SCR_INI;
   08CB 11rDBr01      [10] 2048 	ld	de,#_l_scr_ini+0
   08CE 2ArB8r01      [16] 2049 	ld	hl,(_level)
   08D1 26 00         [ 7] 2050 	ld	h,#0x00
   08D3 19            [11] 2051 	add	hl,de
   08D4 7E            [ 7] 2052 	ld	a,(hl)
   08D5 32rBAr01      [13] 2053 	ld	(#_n_pant + 0),a
                           2054 ;mainloop.h:30: px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
   08D8 11rDEr01      [10] 2055 	ld	de,#_l_ini_x+0
   08DB 2ArB8r01      [16] 2056 	ld	hl,(_level)
   08DE 26 00         [ 7] 2057 	ld	h,#0x00
   08E0 19            [11] 2058 	add	hl,de
   08E1 6E            [ 7] 2059 	ld	l,(hl)
   08E2 26 00         [ 7] 2060 	ld	h,#0x00
   08E4 29            [11] 2061 	add	hl, hl
   08E5 29            [11] 2062 	add	hl, hl
   08E6 29            [11] 2063 	add	hl, hl
   08E7 29            [11] 2064 	add	hl, hl
   08E8 01 04 00      [10] 2065 	ld	bc,#0x0004
   08EB 09            [11] 2066 	add	hl,bc
   08EC 29            [11] 2067 	add	hl, hl
   08ED 29            [11] 2068 	add	hl, hl
   08EE 29            [11] 2069 	add	hl, hl
   08EF 29            [11] 2070 	add	hl, hl
   08F0 29            [11] 2071 	add	hl, hl
   08F1 29            [11] 2072 	add	hl, hl
   08F2 22r4Ar00      [16] 2073 	ld	(_px),hl
                           2074 ;mainloop.h:31: py = (PLAYER_INI_Y << 4) << FIXBITS;
   08F5 11rE1r01      [10] 2075 	ld	de,#_l_ini_y+0
   08F8 2ArB8r01      [16] 2076 	ld	hl,(_level)
   08FB 26 00         [ 7] 2077 	ld	h,#0x00
   08FD 19            [11] 2078 	add	hl,de
   08FE 6E            [ 7] 2079 	ld	l,(hl)
   08FF 26 00         [ 7] 2080 	ld	h,#0x00
   0901 29            [11] 2081 	add	hl, hl
   0902 29            [11] 2082 	add	hl, hl
   0903 29            [11] 2083 	add	hl, hl
   0904 29            [11] 2084 	add	hl, hl
   0905 29            [11] 2085 	add	hl, hl
   0906 29            [11] 2086 	add	hl, hl
   0907 29            [11] 2087 	add	hl, hl
   0908 29            [11] 2088 	add	hl, hl
   0909 29            [11] 2089 	add	hl, hl
   090A 29            [11] 2090 	add	hl, hl
   090B 22r4Cr00      [16] 2091 	ld	(_py),hl
   090E                    2092 00105$:
                           2093 ;mainloop.h:33: player_to_pixels ();
   090E CDr00r00      [17] 2094 	call	_player_to_pixels
                           2095 ;mainloop.h:34: player_init ();
   0911 CDr00r00      [17] 2096 	call	_player_init
                           2097 ;mainloop.h:37: enems_persistent_load ();
   0914 CDr00r00      [17] 2098 	call	_enems_persistent_load
                           2099 ;mainloop.h:41: enems_persistent_deaths_load ();
   0917 CDr00r00      [17] 2100 	call	_enems_persistent_deaths_load
                           2101 ;mainloop.h:53: pkeys = 0;
   091A 21r70r00      [10] 2102 	ld	hl,#_pkeys + 0
   091D 36 00         [10] 2103 	ld	(hl), #0x00
                           2104 ;mainloop.h:57: res_on = 0;
   091F 21rD1r03      [10] 2105 	ld	hl,#_res_on + 0
   0922 36 00         [10] 2106 	ld	(hl), #0x00
                           2107 ;mainloop.h:58: res_disable = 0;
   0924 21rD0r03      [10] 2108 	ld	hl,#_res_disable + 0
   0927 36 00         [10] 2109 	ld	(hl), #0x00
                           2110 ;mainloop.h:66: no_ct = 0;
   0929 21rCAr01      [10] 2111 	ld	hl,#_no_ct + 0
   092C 36 00         [10] 2112 	ld	(hl), #0x00
                           2113 ;mainloop.h:105: half_life = 0;
   092E 21rBCr01      [10] 2114 	ld	hl,#_half_life + 0
   0931 36 00         [10] 2115 	ld	(hl), #0x00
                           2116 ;mainloop.h:106: frame_counter = 0;
   0933 21rBDr01      [10] 2117 	ld	hl,#_frame_counter + 0
   0936 36 00         [10] 2118 	ld	(hl), #0x00
                           2119 ;mainloop.h:107: olife = oammo = oobjs = okeys = 0xff;
   0938 21rC5r01      [10] 2120 	ld	hl,#_okeys + 0
   093B 36 FF         [10] 2121 	ld	(hl), #0xFF
   093D 21rC6r01      [10] 2122 	ld	hl,#_oobjs + 0
   0940 36 FF         [10] 2123 	ld	(hl), #0xFF
   0942 21rC7r01      [10] 2124 	ld	hl,#_oammo + 0
   0945 36 FF         [10] 2125 	ld	(hl), #0xFF
   0947 21rC4r01      [10] 2126 	ld	hl,#_olife + 0
   094A 36 FF         [10] 2127 	ld	(hl), #0xFF
                           2128 ;mainloop.h:108: okilled = 0xff;
   094C 21rC8r01      [10] 2129 	ld	hl,#_okilled + 0
   094F 36 FF         [10] 2130 	ld	(hl), #0xFF
                           2131 ;my/extra_inits.h:7: springs_on = (level == 1);
   0951 3ArB8r01      [13] 2132 	ld	a,(#_level + 0)
   0954 3D            [ 4] 2133 	dec	a
   0955 20 04         [12] 2134 	jr	NZ,00120$
   0957 3E 01         [ 7] 2135 	ld	a,#0x01
   0959 18 01         [12] 2136 	jr	00121$
   095B                    2137 00120$:
   095B AF            [ 4] 2138 	xor	a,a
   095C                    2139 00121$:
   095C 32rD5r03      [13] 2140 	ld	(#_springs_on + 0),a
   095F C9            [10] 2141 	ret
                           2142 ;mainloop.h:117: void prepare_scr (void) {
                           2143 ;	---------------------------------
                           2144 ; Function prepare_scr
                           2145 ; ---------------------------------
   0960                    2146 _prepare_scr::
                           2147 ;mainloop.h:118: SG_displayOff ();
   0960 21 40 01      [10] 2148 	ld	hl,#0x0140
   0963 E5            [11] 2149 	push	hl
   0964 CDr00r00      [17] 2150 	call	_SG_VDPturnOffFeature
   0967 F1            [10] 2151 	pop	af
                           2152 ;mainloop.h:128: ft = 0;
   0968 FD 21r7Er00   [14] 2153 	ld	iy,#_ft
   096C FD 36 00 00   [19] 2154 	ld	0 (iy),#0x00
                           2155 ;mainloop.h:130: update_list [update_index] = 0xff;
   0970 3Ar94r00      [13] 2156 	ld	a,(#_update_index + 0)
   0973 C6r95         [ 7] 2157 	add	a, #<(_update_list)
   0975 6F            [ 4] 2158 	ld	l, a
   0976 3E 00         [ 7] 2159 	ld	a, #0x00
   0978 CEs00         [ 7] 2160 	adc	a, #>(_update_list)
   097A 67            [ 4] 2161 	ld	h, a
   097B 36 FF         [10] 2162 	ld	(hl),#0xFF
                           2163 ;mainloop.h:131: SG_doUpdateList ();
   097D CDr00r00      [17] 2164 	call	_SG_doUpdateList
                           2165 ;mainloop.h:132: clear_update_list ();
   0980 CDr00r00      [17] 2166 	call	_clear_update_list
                           2167 ;mainloop.h:141: enems_persistent_update ();
   0983 CDr00r00      [17] 2168 	call	_enems_persistent_update
                           2169 ;mainloop.h:144: enems_load ();
   0986 CDr00r00      [17] 2170 	call	_enems_load
                           2171 ;mainloop.h:145: hotspots_create ();	
   0989 CDr72r02      [17] 2172 	call	_hotspots_create
                           2173 ;mainloop.h:162: chac_chacs_queue_write = chac_chacs_queue_read = 0;
   098C 21rCEr03      [10] 2174 	ld	hl,#_chac_chacs_queue_read + 0
   098F 36 00         [10] 2175 	ld	(hl), #0x00
   0991 21rCFr03      [10] 2176 	ld	hl,#_chac_chacs_queue_write + 0
   0994 36 00         [10] 2177 	ld	(hl), #0x00
                           2178 ;mainloop.h:163: max_chac_chacs = 0;
   0996 21rADr03      [10] 2179 	ld	hl,#_max_chac_chacs + 0
   0999 36 00         [10] 2180 	ld	(hl), #0x00
                           2181 ;mainloop.h:172: draw_scr ();
   099B CDr00r00      [17] 2182 	call	_draw_scr
                           2183 ;mainloop.h:210: SG_initSprites ();
   099E CDr00r00      [17] 2184 	call	_SG_initSprites
                           2185 ;my/on_entering_screen.h:8: if (mode_no_resonators) {
   09A1 3ArD7r03      [13] 2186 	ld	a,(#_mode_no_resonators + 0)
   09A4 B7            [ 4] 2187 	or	a, a
   09A5 28 11         [12] 2188 	jr	Z,00104$
                           2189 ;my/on_entering_screen.h:9: res_disable = 1;
   09A7 21rD0r03      [10] 2190 	ld	hl,#_res_disable + 0
   09AA 36 01         [10] 2191 	ld	(hl), #0x01
                           2192 ;my/on_entering_screen.h:10: if (hrt == HOTSPOT_TYPE_RESONATOR) hrt = 0;
   09AC 3Ar7Cr00      [13] 2193 	ld	a,(#_hrt + 0)
   09AF D6 04         [ 7] 2194 	sub	a, #0x04
   09B1 20 05         [12] 2195 	jr	NZ,00104$
   09B3 21r7Cr00      [10] 2196 	ld	hl,#_hrt + 0
   09B6 36 00         [10] 2197 	ld	(hl), #0x00
   09B8                    2198 00104$:
                           2199 ;mainloop.h:227: gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
   09B8 21r08r00      [10] 2200 	ld	hl,#_gpit + 0
   09BB 36 03         [10] 2201 	ld	(hl), #0x03
   09BD                    2202 00105$:
   09BD 21r08r00      [10] 2203 	ld	hl,#_gpit + 0
   09C0 5E            [ 7] 2204 	ld	e, (hl)
   09C1 21r08r00      [10] 2205 	ld	hl, #_gpit+0
   09C4 35            [11] 2206 	dec	(hl)
   09C5 7B            [ 4] 2207 	ld	a,e
   09C6 B7            [ 4] 2208 	or	a, a
   09C7 28 1E         [12] 2209 	jr	Z,00107$
   09C9 3Er42         [ 7] 2210 	ld	a,#<(_en_spr_id)
   09CB 21r08r00      [10] 2211 	ld	hl,#_gpit
   09CE 86            [ 7] 2212 	add	a, (hl)
   09CF 5F            [ 4] 2213 	ld	e,a
   09D0 3Es02         [ 7] 2214 	ld	a,#>(_en_spr_id)
   09D2 CE 00         [ 7] 2215 	adc	a, #0x00
   09D4 57            [ 4] 2216 	ld	d,a
   09D5 FD 21r11r02   [14] 2217 	ld	iy,#_en_s
   09D9 ED 4Br08r00   [20] 2218 	ld	bc,(_gpit)
   09DD 06 00         [ 7] 2219 	ld	b,#0x00
   09DF FD 09         [15] 2220 	add	iy, bc
   09E1 FD 7E 00      [19] 2221 	ld	a, 0 (iy)
   09E4 12            [ 7] 2222 	ld	(de),a
   09E5 18 D6         [12] 2223 	jr	00105$
   09E7                    2224 00107$:
                           2225 ;mainloop.h:229: prx = px >> FIXBITS; pry = py >> FIXBITS;
   09E7 2Ar4Ar00      [16] 2226 	ld	hl,(_px)
   09EA CB 2C         [ 8] 2227 	sra	h
   09EC CB 1D         [ 8] 2228 	rr	l
   09EE CB 2C         [ 8] 2229 	sra	h
   09F0 CB 1D         [ 8] 2230 	rr	l
   09F2 CB 2C         [ 8] 2231 	sra	h
   09F4 CB 1D         [ 8] 2232 	rr	l
   09F6 CB 2C         [ 8] 2233 	sra	h
   09F8 CB 1D         [ 8] 2234 	rr	l
   09FA CB 2C         [ 8] 2235 	sra	h
   09FC CB 1D         [ 8] 2236 	rr	l
   09FE CB 2C         [ 8] 2237 	sra	h
   0A00 CB 1D         [ 8] 2238 	rr	l
   0A02 FD 21r52r00   [14] 2239 	ld	iy,#_prx
   0A06 FD 75 00      [19] 2240 	ld	0 (iy),l
   0A09 2Ar4Cr00      [16] 2241 	ld	hl,(_py)
   0A0C CB 2C         [ 8] 2242 	sra	h
   0A0E CB 1D         [ 8] 2243 	rr	l
   0A10 CB 2C         [ 8] 2244 	sra	h
   0A12 CB 1D         [ 8] 2245 	rr	l
   0A14 CB 2C         [ 8] 2246 	sra	h
   0A16 CB 1D         [ 8] 2247 	rr	l
   0A18 CB 2C         [ 8] 2248 	sra	h
   0A1A CB 1D         [ 8] 2249 	rr	l
   0A1C CB 2C         [ 8] 2250 	sra	h
   0A1E CB 1D         [ 8] 2251 	rr	l
   0A20 CB 2C         [ 8] 2252 	sra	h
   0A22 CB 1D         [ 8] 2253 	rr	l
   0A24 FD 21r53r00   [14] 2254 	ld	iy,#_pry
   0A28 FD 75 00      [19] 2255 	ld	0 (iy),l
                           2256 ;mainloop.h:234: player_move ();
   0A2B CDr00r00      [17] 2257 	call	_player_move
                           2258 ;mainloop.h:235: enems_move ();
   0A2E CDr00r00      [17] 2259 	call	_enems_move
                           2260 ;mainloop.h:237: if (hrt) hotspots_paint ();
   0A31 3Ar7Cr00      [13] 2261 	ld	a,(#_hrt + 0)
   0A34 B7            [ 4] 2262 	or	a, a
   0A35 28 03         [12] 2263 	jr	Z,00109$
   0A37 CDr35r02      [17] 2264 	call	_hotspots_paint
   0A3A                    2265 00109$:
                           2266 ;mainloop.h:252: hud_update ();
   0A3A CDrDBr02      [17] 2267 	call	_hud_update
                           2268 ;mainloop.h:253: UNSAFE_SG_copySpritestoSAT ();
   0A3D CDr00r00      [17] 2269 	call	_UNSAFE_SG_copySpritestoSAT
                           2270 ;mainloop.h:254: update_list [update_index] = 0xff;
   0A40 3Ar94r00      [13] 2271 	ld	a,(#_update_index + 0)
   0A43 C6r95         [ 7] 2272 	add	a, #<(_update_list)
   0A45 6F            [ 4] 2273 	ld	l, a
   0A46 3E 00         [ 7] 2274 	ld	a, #0x00
   0A48 CEs00         [ 7] 2275 	adc	a, #>(_update_list)
   0A4A 67            [ 4] 2276 	ld	h, a
   0A4B 36 FF         [10] 2277 	ld	(hl),#0xFF
                           2278 ;mainloop.h:255: SG_doUpdateList ();
   0A4D CDr00r00      [17] 2279 	call	_SG_doUpdateList
                           2280 ;mainloop.h:256: clear_update_list ();	
   0A50 CDr00r00      [17] 2281 	call	_clear_update_list
                           2282 ;mainloop.h:257: SG_displayOn ();
   0A53 21 40 01      [10] 2283 	ld	hl,#0x0140
   0A56 E5            [11] 2284 	push	hl
   0A57 CDr00r00      [17] 2285 	call	_SG_VDPturnOnFeature
   0A5A F1            [10] 2286 	pop	af
   0A5B C9            [10] 2287 	ret
                           2288 ;mainloop.h:260: void game_loop (void) {
                           2289 ;	---------------------------------
                           2290 ; Function game_loop
                           2291 ; ---------------------------------
   0A5C                    2292 _game_loop::
                           2293 ;mainloop.h:267: clear_update_list ();
   0A5C CDr00r00      [17] 2294 	call	_clear_update_list
                           2295 ;mainloop.h:270: on_pant = 99; ft = 1; fade_delay = 1;
   0A5F 21rBBr01      [10] 2296 	ld	hl,#_on_pant + 0
   0A62 36 63         [10] 2297 	ld	(hl), #0x63
   0A64 21r7Er00      [10] 2298 	ld	hl,#_ft + 0
   0A67 36 01         [10] 2299 	ld	(hl), #0x01
   0A69 21rF6r00      [10] 2300 	ld	hl,#_fade_delay + 0
   0A6C 36 01         [10] 2301 	ld	(hl), #0x01
                           2302 ;mainloop.h:274: SG_displayOn ();
   0A6E 21 40 01      [10] 2303 	ld	hl,#0x0140
   0A71 E5            [11] 2304 	push	hl
   0A72 CDr00r00      [17] 2305 	call	_SG_VDPturnOnFeature
   0A75 F1            [10] 2306 	pop	af
                           2307 ;mainloop.h:285: ntsc_frame = level_reset = warp_to_level = 0; 
   0A76 21rC1r01      [10] 2308 	ld	hl,#_warp_to_level + 0
   0A79 36 00         [10] 2309 	ld	(hl), #0x00
   0A7B 21rC2r01      [10] 2310 	ld	hl,#_level_reset + 0
   0A7E 36 00         [10] 2311 	ld	(hl), #0x00
   0A80 21r93r00      [10] 2312 	ld	hl,#_ntsc_frame + 0
   0A83 36 00         [10] 2313 	ld	(hl), #0x00
                           2314 ;mainloop.h:286: ticker = 50;
   0A85 21r1Fr00      [10] 2315 	ld	hl,#_ticker + 0
   0A88 36 32         [10] 2316 	ld	(hl), #0x32
                           2317 ;mainloop.h:288: while (1) {
   0A8A                    2318 00167$:
                           2319 ;mainloop.h:295: hud_update ();
   0A8A CDrDBr02      [17] 2320 	call	_hud_update
                           2321 ;mainloop.h:299: if (pkill) player_kill ();
   0A8D 3Ar6Br00      [13] 2322 	ld	a,(#_pkill + 0)
   0A90 B7            [ 4] 2323 	or	a, a
   0A91 28 03         [12] 2324 	jr	Z,00102$
   0A93 CDr00r00      [17] 2325 	call	_player_kill
   0A96                    2326 00102$:
                           2327 ;mainloop.h:300: if (game_over || level_reset) break;			
   0A96 3ArC0r01      [13] 2328 	ld	a,(#_game_over + 0)
   0A99 B7            [ 4] 2329 	or	a, a
   0A9A C2r00r0D      [10] 2330 	jp	NZ,00168$
   0A9D 3ArC2r01      [13] 2331 	ld	a,(#_level_reset + 0)
   0AA0 B7            [ 4] 2332 	or	a, a
   0AA1 C2r00r0D      [10] 2333 	jp	NZ,00168$
                           2334 ;mainloop.h:306: flick_override = 0;
   0AA4 21rC3r01      [10] 2335 	ld	hl,#_flick_override + 0
   0AA7 36 00         [10] 2336 	ld	(hl), #0x00
                           2337 ;mainloop.h:309: flickscreen_do_horizontal ();
   0AA9 CDr7Cr06      [17] 2338 	call	_flickscreen_do_horizontal
                           2339 ;mainloop.h:310: flickscreen_do_vertical ();
   0AAC CDrC7r06      [17] 2340 	call	_flickscreen_do_vertical
                           2341 ;mainloop.h:316: if (on_pant != n_pant) {
   0AAF 3ArBBr01      [13] 2342 	ld	a,(#_on_pant + 0)
   0AB2 FD 21rBAr01   [14] 2343 	ld	iy,#_n_pant
   0AB6 FD 96 00      [19] 2344 	sub	a, 0 (iy)
   0AB9 28 09         [12] 2345 	jr	Z,00109$
                           2346 ;mainloop.h:317: prepare_scr ();
   0ABB CDr60r09      [17] 2347 	call	_prepare_scr
                           2348 ;mainloop.h:318: on_pant = n_pant;
   0ABE 3ArBAr01      [13] 2349 	ld	a,(#_n_pant + 0)
   0AC1 32rBBr01      [13] 2350 	ld	(#_on_pant + 0),a
   0AC4                    2351 00109$:
                           2352 ;mainloop.h:337: SG_waitForVBlank ();
   0AC4 CDr00r00      [17] 2353 	call	_SG_waitForVBlank
                           2354 ;mainloop.h:338: UNSAFE_SG_copySpritestoSAT ();
   0AC7 CDr00r00      [17] 2355 	call	_UNSAFE_SG_copySpritestoSAT
                           2356 ;mainloop.h:339: update_list [update_index] = 0xff;
   0ACA 3Er95         [ 7] 2357 	ld	a,#<(_update_list)
   0ACC 21r94r00      [10] 2358 	ld	hl,#_update_index
   0ACF 86            [ 7] 2359 	add	a, (hl)
   0AD0 6F            [ 4] 2360 	ld	l, a
   0AD1 3Es00         [ 7] 2361 	ld	a, #>(_update_list)
   0AD3 CE 00         [ 7] 2362 	adc	a, #0x00
   0AD5 67            [ 4] 2363 	ld	h, a
   0AD6 36 FF         [10] 2364 	ld	(hl),#0xFF
                           2365 ;mainloop.h:340: SG_doUpdateList ();
   0AD8 CDr00r00      [17] 2366 	call	_SG_doUpdateList
                           2367 ;mainloop.h:341: clear_update_list ();
   0ADB CDr00r00      [17] 2368 	call	_clear_update_list
                           2369 ;mainloop.h:345: pad_read ();
   0ADE CDr00r00      [17] 2370 	call	_pad_read
                           2371 ;mainloop.h:346: a_button = (pad_this_frame & PAD_A);
   0AE1 3Ar06r00      [13] 2372 	ld	a,(#_pad_this_frame + 0)
   0AE4 E6 20         [ 7] 2373 	and	a, #0x20
   0AE6 67            [ 4] 2374 	ld	h,a
   0AE7 FD 21r59r00   [14] 2375 	ld	iy,#_a_button
   0AEB FD 74 00      [19] 2376 	ld	0 (iy),h
                           2377 ;mainloop.h:347: b_button = (pad_this_frame & PAD_B);
   0AEE 3Ar06r00      [13] 2378 	ld	a,(#_pad_this_frame + 0)
   0AF1 E6 10         [ 7] 2379 	and	a, #0x10
   0AF3 67            [ 4] 2380 	ld	h,a
   0AF4 FD 21r5Ar00   [14] 2381 	ld	iy,#_b_button
   0AF8 FD 74 00      [19] 2382 	ld	0 (iy),h
                           2383 ;mainloop.h:351: ntsc_frame ++; if (ntsc_frame == 6) ntsc_frame = 0;
   0AFB 21r93r00      [10] 2384 	ld	hl, #_ntsc_frame+0
   0AFE 34            [11] 2385 	inc	(hl)
   0AFF 3Ar93r00      [13] 2386 	ld	a,(#_ntsc_frame + 0)
   0B02 D6 06         [ 7] 2387 	sub	a, #0x06
   0B04 20 05         [12] 2388 	jr	NZ,00111$
   0B06 21r93r00      [10] 2389 	ld	hl,#_ntsc_frame + 0
   0B09 36 00         [10] 2390 	ld	(hl), #0x00
   0B0B                    2391 00111$:
                           2392 ;mainloop.h:353: if (paused == 0 && (ntsc == 0 || ntsc_frame)) {
   0B0B 3ArBEr01      [13] 2393 	ld	a,(#_paused + 0)
   0B0E B7            [ 4] 2394 	or	a, a
   0B0F C2rDCr0C      [10] 2395 	jp	NZ,00159$
   0B12 3Ar92r00      [13] 2396 	ld	a,(#_ntsc + 0)
   0B15 B7            [ 4] 2397 	or	a, a
   0B16 28 07         [12] 2398 	jr	Z,00158$
   0B18 3Ar93r00      [13] 2399 	ld	a,(#_ntsc_frame + 0)
   0B1B B7            [ 4] 2400 	or	a, a
   0B1C CArDCr0C      [10] 2401 	jp	Z,00159$
   0B1F                    2402 00158$:
                           2403 ;mainloop.h:354: SG_initSprites ();
   0B1F CDr00r00      [17] 2404 	call	_SG_initSprites
                           2405 ;mainloop.h:357: if (ticker) -- ticker; else ticker = 50;
   0B22 3Ar1Fr00      [13] 2406 	ld	a,(#_ticker + 0)
   0B25 B7            [ 4] 2407 	or	a, a
   0B26 28 09         [12] 2408 	jr	Z,00113$
   0B28 FD 21r1Fr00   [14] 2409 	ld	iy,#_ticker
   0B2C FD 35 00      [23] 2410 	dec	0 (iy)
   0B2F 18 08         [12] 2411 	jr	00114$
   0B31                    2412 00113$:
   0B31 FD 21r1Fr00   [14] 2413 	ld	iy,#_ticker
   0B35 FD 36 00 32   [19] 2414 	ld	0 (iy),#0x32
   0B39                    2415 00114$:
                           2416 ;mainloop.h:358: half_life ^= 1;
   0B39 3ArBCr01      [13] 2417 	ld	a,(#_half_life + 0)
   0B3C EE 01         [ 7] 2418 	xor	a, #0x01
   0B3E FD 21rBCr01   [14] 2419 	ld	iy,#_half_life
   0B42 FD 77 00      [19] 2420 	ld	0 (iy),a
                           2421 ;mainloop.h:359: ++ frame_counter;
   0B45 FD 21rBDr01   [14] 2422 	ld	iy,#_frame_counter
   0B49 FD 34 00      [23] 2423 	inc	0 (iy)
                           2424 ;mainloop/hotspots.h:6: if (hrt) {
   0B4C 3Ar7Cr00      [13] 2425 	ld	a,(#_hrt + 0)
   0B4F B7            [ 4] 2426 	or	a, a
   0B50 CAr06r0C      [10] 2427 	jp	Z,00131$
                           2428 ;mainloop/hotspots.h:7: if (collide_in (prx + 4, pry + 8, hrx, hry)) {
   0B53 3Ar53r00      [13] 2429 	ld	a,(#_pry + 0)
   0B56 C6 08         [ 7] 2430 	add	a, #0x08
   0B58 47            [ 4] 2431 	ld	b,a
   0B59 21r52r00      [10] 2432 	ld	hl,#_prx + 0
   0B5C 56            [ 7] 2433 	ld	d, (hl)
   0B5D 14            [ 4] 2434 	inc	d
   0B5E 14            [ 4] 2435 	inc	d
   0B5F 14            [ 4] 2436 	inc	d
   0B60 14            [ 4] 2437 	inc	d
   0B61 3Ar7Br00      [13] 2438 	ld	a,(_hry)
   0B64 F5            [11] 2439 	push	af
   0B65 33            [ 6] 2440 	inc	sp
   0B66 3Ar7Ar00      [13] 2441 	ld	a,(_hrx)
   0B69 F5            [11] 2442 	push	af
   0B6A 33            [ 6] 2443 	inc	sp
   0B6B 4A            [ 4] 2444 	ld	c, d
   0B6C C5            [11] 2445 	push	bc
   0B6D CDr00r00      [17] 2446 	call	_collide_in
   0B70 F1            [10] 2447 	pop	af
   0B71 F1            [10] 2448 	pop	af
   0B72 7D            [ 4] 2449 	ld	a,l
   0B73 B7            [ 4] 2450 	or	a, a
   0B74 CAr06r0C      [10] 2451 	jp	Z,00131$
                           2452 ;mainloop/hotspots.h:9: if (hrt == HOTSPOT_TYPE_RESONATOR) {
   0B77 3Ar7Cr00      [13] 2453 	ld	a,(#_hrt + 0)
   0B7A D6 04         [ 7] 2454 	sub	a, #0x04
   0B7C 20 3A         [12] 2455 	jr	NZ,00126$
                           2456 ;mainloop/hotspots.h:10: if (pvy > 0 && pry < hry) {
   0B7E AF            [ 4] 2457 	xor	a, a
   0B7F FD 21r50r00   [14] 2458 	ld	iy,#_pvy
   0B83 FD BE 00      [19] 2459 	cp	a, 0 (iy)
   0B86 FD 21r50r00   [14] 2460 	ld	iy,#_pvy
   0B8A FD 9E 01      [19] 2461 	sbc	a, 1 (iy)
   0B8D E2r92r0B      [10] 2462 	jp	PO, 00309$
   0B90 EE 80         [ 7] 2463 	xor	a, #0x80
   0B92                    2464 00309$:
   0B92 F2r06r0C      [10] 2465 	jp	P,00131$
   0B95 21r7Br00      [10] 2466 	ld	hl,#_hry
   0B98 3Ar53r00      [13] 2467 	ld	a,(#_pry + 0)
   0B9B 96            [ 7] 2468 	sub	a, (hl)
   0B9C 30 68         [12] 2469 	jr	NC,00131$
                           2470 ;mainloop/hotspots.h:11: if (res_on == 0) {
   0B9E 3ArD1r03      [13] 2471 	ld	a,(#_res_on + 0)
   0BA1 B7            [ 4] 2472 	or	a, a
   0BA2 20 62         [12] 2473 	jr	NZ,00131$
                           2474 ;mainloop/hotspots.h:12: res_on = 1; res_ct = 9; res_subct = 50;
   0BA4 21rD1r03      [10] 2475 	ld	hl,#_res_on + 0
   0BA7 36 01         [10] 2476 	ld	(hl), #0x01
   0BA9 21rD2r03      [10] 2477 	ld	hl,#_res_ct + 0
   0BAC 36 09         [10] 2478 	ld	(hl), #0x09
   0BAE 21rD3r03      [10] 2479 	ld	hl,#_res_subct + 0
   0BB1 36 32         [10] 2480 	ld	(hl), #0x32
                           2481 ;mainloop/hotspots.h:13: jump_start ();
   0BB3 CDr00r00      [17] 2482 	call	_jump_start
   0BB6 18 4E         [12] 2483 	jr	00131$
   0BB8                    2484 00126$:
                           2485 ;mainloop/hotspots.h:128: rda = 0;
   0BB8 FD 21r18r00   [14] 2486 	ld	iy,#_rda
   0BBC FD 36 00 00   [19] 2487 	ld	0 (iy),#0x00
                           2488 ;mainloop/hotspots.h:129: switch (hrt) {
   0BC0 3Ar7Cr00      [13] 2489 	ld	a,(#_hrt + 0)
   0BC3 FE 02         [ 7] 2490 	cp	a,#0x02
   0BC5 28 06         [12] 2491 	jr	Z,00120$
   0BC7 D6 03         [ 7] 2492 	sub	a, #0x03
   0BC9 28 13         [12] 2493 	jr	Z,00121$
   0BCB 18 20         [12] 2494 	jr	00122$
                           2495 ;mainloop/hotspots.h:151: case HOTSPOT_TYPE_KEYS:
   0BCD                    2496 00120$:
                           2497 ;mainloop/hotspots.h:152: ++ pkeys;
   0BCD FD 21r70r00   [14] 2498 	ld	iy,#_pkeys
   0BD1 FD 34 00      [23] 2499 	inc	0 (iy)
                           2500 ;mainloop/hotspots.h:153: rda = SFX_OBJECT;
   0BD4 FD 21r18r00   [14] 2501 	ld	iy,#_rda
   0BD8 FD 36 00 02   [19] 2502 	ld	0 (iy),#0x02
                           2503 ;mainloop/hotspots.h:154: break;
   0BDC 18 0F         [12] 2504 	jr	00122$
                           2505 ;mainloop/hotspots.h:156: case HOTSPOT_TYPE_REFILL:
   0BDE                    2506 00121$:
                           2507 ;mainloop/hotspots.h:157: plife += PLAYER_REFILL;
   0BDE FD 21r6Fr00   [14] 2508 	ld	iy,#_plife
   0BE2 FD 34 00      [23] 2509 	inc	0 (iy)
                           2510 ;mainloop/hotspots.h:161: rda = SFX_USE;
   0BE5 FD 21r18r00   [14] 2511 	ld	iy,#_rda
   0BE9 FD 36 00 03   [19] 2512 	ld	0 (iy),#0x03
                           2513 ;mainloop/hotspots.h:191: }
   0BED                    2514 00122$:
                           2515 ;mainloop/hotspots.h:192: if (rda) {
   0BED 3Ar18r00      [13] 2516 	ld	a,(#_rda + 0)
   0BF0 B7            [ 4] 2517 	or	a, a
   0BF1 28 13         [12] 2518 	jr	Z,00131$
                           2519 ;mainloop/hotspots.h:194: hrt = 0;
   0BF3 21r7Cr00      [10] 2520 	ld	hl,#_hrt + 0
   0BF6 36 00         [10] 2521 	ld	(hl), #0x00
                           2522 ;mainloop/hotspots.h:195: hact [n_pant] = 0;
   0BF8 3ErCC         [ 7] 2523 	ld	a,#<(_hact)
   0BFA 21rBAr01      [10] 2524 	ld	hl,#_n_pant
   0BFD 86            [ 7] 2525 	add	a, (hl)
   0BFE 5F            [ 4] 2526 	ld	e,a
   0BFF 3Es01         [ 7] 2527 	ld	a,#>(_hact)
   0C01 CE 00         [ 7] 2528 	adc	a, #0x00
   0C03 57            [ 4] 2529 	ld	d,a
   0C04 AF            [ 4] 2530 	xor	a, a
   0C05 12            [ 7] 2531 	ld	(de),a
   0C06                    2532 00131$:
                           2533 ;mainloop.h:379: if (!warp_to_level) {
   0C06 3ArC1r01      [13] 2534 	ld	a,(#_warp_to_level + 0)
   0C09 B7            [ 4] 2535 	or	a, a
   0C0A 20 03         [12] 2536 	jr	NZ,00133$
                           2537 ;mainloop.h:380: player_move ();
   0C0C CDr00r00      [17] 2538 	call	_player_move
   0C0F                    2539 00133$:
                           2540 ;my/extra_checks.h:14: if (c_max_enems == pkilled) {
   0C0F 3ArB9r01      [13] 2541 	ld	a,(#_c_max_enems + 0)
   0C12 FD 21r73r00   [14] 2542 	ld	iy,#_pkilled
   0C16 FD 96 00      [19] 2543 	sub	a, 0 (iy)
   0C19 20 17         [12] 2544 	jr	NZ,00139$
                           2545 ;my/extra_checks.h:16: en_cttouched [0] == 0 &&
   0C1B 3Ar1Dr02      [13] 2546 	ld	a, (#_en_cttouched + 0)
   0C1E B7            [ 4] 2547 	or	a, a
   0C1F 20 11         [12] 2548 	jr	NZ,00139$
                           2549 ;my/extra_checks.h:17: en_cttouched [1] == 0 &&
   0C21 3Ar1Er02      [13] 2550 	ld	a, (#_en_cttouched + 1)
   0C24 B7            [ 4] 2551 	or	a, a
   0C25 20 0B         [12] 2552 	jr	NZ,00139$
                           2553 ;my/extra_checks.h:18: en_cttouched [2] == 0
   0C27 3Ar1Fr02      [13] 2554 	ld	a, (#_en_cttouched + 2)
   0C2A B7            [ 4] 2555 	or	a, a
   0C2B 20 05         [12] 2556 	jr	NZ,00139$
                           2557 ;my/extra_checks.h:19: ) win_level = 1;
   0C2D 21rBFr01      [10] 2558 	ld	hl,#_win_level + 0
   0C30 36 01         [10] 2559 	ld	(hl), #0x01
   0C32                    2560 00139$:
                           2561 ;mainloop/win_level_condition.h:10: win_level
   0C32 3ArBFr01      [13] 2562 	ld	a,(#_win_level + 0)
   0C35 B7            [ 4] 2563 	or	a, a
   0C36 28 0E         [12] 2564 	jr	Z,00141$
                           2565 ;mainloop/win_level_condition.h:23: PSGStop ();
   0C38 CDr00r00      [17] 2566 	call	_PSGStop
                           2567 ;mainloop/win_level_condition.h:24: delay (50);
   0C3B 3E 32         [ 7] 2568 	ld	a,#0x32
   0C3D F5            [11] 2569 	push	af
   0C3E 33            [ 6] 2570 	inc	sp
   0C3F CDr00r00      [17] 2571 	call	_delay
   0C42 33            [ 6] 2572 	inc	sp
                           2573 ;mainloop/win_level_condition.h:25: break;
   0C43 C3r00r0D      [10] 2574 	jp	00168$
   0C46                    2575 00141$:
                           2576 ;mainloop.h:417: cur_stp = SG_getStp (); 
   0C46 CDr00r00      [17] 2577 	call	_SG_getStp
   0C49 22r27r00      [16] 2578 	ld	(_cur_stp),hl
                           2579 ;mainloop.h:418: if (!warp_to_level)	player_render ();
   0C4C 3ArC1r01      [13] 2580 	ld	a,(#_warp_to_level + 0)
   0C4F B7            [ 4] 2581 	or	a, a
   0C50 20 03         [12] 2582 	jr	NZ,00143$
   0C52 CDr00r00      [17] 2583 	call	_player_render
   0C55                    2584 00143$:
                           2585 ;mainloop.h:422: enems_move ();
   0C55 CDr00r00      [17] 2586 	call	_enems_move
                           2587 ;mainloop.h:426: if (warp_to_level) {
   0C58 3ArC1r01      [13] 2588 	ld	a,(#_warp_to_level + 0)
   0C5B B7            [ 4] 2589 	or	a, a
   0C5C 28 09         [12] 2590 	jr	Z,00145$
                           2591 ;mainloop.h:427: update_cycle (); PSGStop (); break;
   0C5E CDr00r00      [17] 2592 	call	_update_cycle
   0C61 CDr00r00      [17] 2593 	call	_PSGStop
   0C64 C3r00r0D      [10] 2594 	jp	00168$
   0C67                    2595 00145$:
                           2596 ;mainloop/resonators.h:5: if (res_on) {
   0C67 3ArD1r03      [13] 2597 	ld	a,(#_res_on + 0)
   0C6A B7            [ 4] 2598 	or	a, a
   0C6B 28 40         [12] 2599 	jr	Z,00153$
                           2600 ;mainloop/resonators.h:7: gp_addr = ((RESONATOR_COUNTER_Y << 5) | RESONATOR_COUNTER_X) + PNTADDRESS;
   0C6D 21 3D 18      [10] 2601 	ld	hl,#0x183D
   0C70 22r12r00      [16] 2602 	ld	(_gp_addr),hl
                           2603 ;mainloop/resonators.h:8: _n = 16 + res_ct; 
   0C73 21r02r00      [10] 2604 	ld	hl,#__n
   0C76 3ArD2r03      [13] 2605 	ld	a,(#_res_ct + 0)
   0C79 C6 10         [ 7] 2606 	add	a, #0x10
   0C7B 77            [ 7] 2607 	ld	(hl),a
                           2608 ;mainloop/resonators.h:9: ul_putc ();
   0C7C CDr00r00      [17] 2609 	call	_ul_putc
                           2610 ;mainloop/resonators.h:12: if (res_subct) -- res_subct; else {
   0C7F 3ArD3r03      [13] 2611 	ld	a,(#_res_subct + 0)
   0C82 B7            [ 4] 2612 	or	a, a
   0C83 28 09         [12] 2613 	jr	Z,00150$
   0C85 FD 21rD3r03   [14] 2614 	ld	iy,#_res_subct
   0C89 FD 35 00      [23] 2615 	dec	0 (iy)
   0C8C 18 1F         [12] 2616 	jr	00153$
   0C8E                    2617 00150$:
                           2618 ;mainloop/resonators.h:13: res_subct = 50;
   0C8E FD 21rD3r03   [14] 2619 	ld	iy,#_res_subct
   0C92 FD 36 00 32   [19] 2620 	ld	0 (iy),#0x32
                           2621 ;mainloop/resonators.h:14: if (res_ct) { 
   0C96 3ArD2r03      [13] 2622 	ld	a,(#_res_ct + 0)
   0C99 B7            [ 4] 2623 	or	a, a
   0C9A 28 09         [12] 2624 	jr	Z,00147$
                           2625 ;mainloop/resonators.h:15: -- res_ct; 
   0C9C FD 21rD2r03   [14] 2626 	ld	iy,#_res_ct
   0CA0 FD 35 00      [23] 2627 	dec	0 (iy)
   0CA3 18 08         [12] 2628 	jr	00153$
   0CA5                    2629 00147$:
                           2630 ;mainloop/resonators.h:18: res_on = 0;
   0CA5 FD 21rD1r03   [14] 2631 	ld	iy,#_res_on
   0CA9 FD 36 00 00   [19] 2632 	ld	0 (iy),#0x00
   0CAD                    2633 00153$:
                           2634 ;mainloop.h:438: if (hrt) hotspots_paint ();
   0CAD 3Ar7Cr00      [13] 2635 	ld	a,(#_hrt + 0)
   0CB0 B7            [ 4] 2636 	or	a, a
   0CB1 28 03         [12] 2637 	jr	Z,00155$
   0CB3 CDr35r02      [17] 2638 	call	_hotspots_paint
   0CB6                    2639 00155$:
                           2640 ;mainloop/no.h:5: if (no_ct) {
   0CB6 3ArCAr01      [13] 2641 	ld	a,(#_no_ct + 0)
   0CB9 B7            [ 4] 2642 	or	a, a
   0CBA 28 1D         [12] 2643 	jr	Z,00157$
                           2644 ;mainloop/no.h:6: -- no_ct;
   0CBC FD 21rCAr01   [14] 2645 	ld	iy,#_no_ct
   0CC0 FD 35 00      [23] 2646 	dec	0 (iy)
                           2647 ;mainloop/no.h:9: NO_METASPRITE
   0CC3 11r00r00      [10] 2648 	ld	de,#_ss_it_06
                           2649 ;mainloop/no.h:8: prx + NO_OFFS_X, pry + NO_OFFS_Y + SPRITE_ADJUST,
   0CC6 3Ar53r00      [13] 2650 	ld	a,(#_pry + 0)
   0CC9 C6 E3         [ 7] 2651 	add	a, #0xE3
   0CCB 67            [ 4] 2652 	ld	h,a
   0CCC D5            [11] 2653 	push	de
   0CCD E5            [11] 2654 	push	hl
   0CCE 33            [ 6] 2655 	inc	sp
   0CCF 3Ar52r00      [13] 2656 	ld	a,(_prx)
   0CD2 F5            [11] 2657 	push	af
   0CD3 33            [ 6] 2658 	inc	sp
   0CD4 CDr00r00      [17] 2659 	call	_SG_addMetaSprite1x1
   0CD7 F1            [10] 2660 	pop	af
   0CD8 F1            [10] 2661 	pop	af
   0CD9                    2662 00157$:
                           2663 ;mainloop.h:467: chac_chacs_do ();
   0CD9 CDr00r00      [17] 2664 	call	_chac_chacs_do
   0CDC                    2665 00159$:
                           2666 ;mainloop/cheat.h:5: if ((pad0 & (PAD_B|PAD_SELECT|PAD_UP)) == (PAD_B|PAD_SELECT|PAD_UP)) break;
   0CDC 3Ar04r00      [13] 2667 	ld	a,(#_pad0 + 0)
   0CDF E6 31         [ 7] 2668 	and	a, #0x31
   0CE1 2E 00         [ 7] 2669 	ld	l, #0x00
   0CE3 D6 31         [ 7] 2670 	sub	a,#0x31
   0CE5 20 03         [12] 2671 	jr	NZ,00314$
   0CE7 B5            [ 4] 2672 	or	a,l
   0CE8 28 16         [12] 2673 	jr	Z,00168$
   0CEA                    2674 00314$:
   0CEA CDr00r00      [17] 2675 	call	_SG_queryPauseRequested
   0CED CB 45         [ 8] 2676 	bit	0,l
   0CEF CAr8Ar0A      [10] 2677 	jp	Z,00167$
                           2678 ;mainloop/pause.h:6: SG_resetPauseRequest ();
   0CF2 CDr00r00      [17] 2679 	call	_SG_resetPauseRequest
                           2680 ;mainloop/pause.h:7: paused ^= 1;
   0CF5 3ArBEr01      [13] 2681 	ld	a,(#_paused + 0)
   0CF8 EE 01         [ 7] 2682 	xor	a, #0x01
   0CFA 32rBEr01      [13] 2683 	ld	(#_paused + 0),a
   0CFD C3r8Ar0A      [10] 2684 	jp	00167$
   0D00                    2685 00168$:
                           2686 ;mainloop.h:484: SG_displayOff ();
   0D00 21 40 01      [10] 2687 	ld	hl,#0x0140
   0D03 E5            [11] 2688 	push	hl
   0D04 CDr00r00      [17] 2689 	call	_SG_VDPturnOffFeature
   0D07 F1            [10] 2690 	pop	af
                           2691 ;mainloop.h:485: SG_initSprites ();
   0D08 CDr00r00      [17] 2692 	call	_SG_initSprites
                           2693 ;mainloop.h:486: UNSAFE_SG_copySpritestoSAT ();	
   0D0B C3r00r00      [10] 2694 	jp  _UNSAFE_SG_copySpritestoSAT
                           2695 ;game.c:110: void main(void) {
                           2696 ;	---------------------------------
                           2697 ; Function main
                           2698 ; ---------------------------------
   0D0E                    2699 _main::
                           2700 ;game.c:111: SG_displayOff ();
   0D0E 21 40 01      [10] 2701 	ld	hl,#0x0140
   0D11 E5            [11] 2702 	push	hl
   0D12 CDr00r00      [17] 2703 	call	_SG_VDPturnOffFeature
                           2704 ;game.c:112: SG_setSpriteMode (SG_SPRITEMODE_LARGE);
   0D15 26 01         [ 7] 2705 	ld	h,#0x01
   0D17 E3            [19] 2706 	ex	(sp),hl
   0D18 33            [ 6] 2707 	inc	sp
   0D19 CDr00r00      [17] 2708 	call	_SG_setSpriteMode
   0D1C 33            [ 6] 2709 	inc	sp
                           2710 ;game.c:113: SG_setUpdateList (update_list);
   0D1D 21r95r00      [10] 2711 	ld	hl,#_update_list+0
   0D20 E5            [11] 2712 	push	hl
   0D21 CDr00r00      [17] 2713 	call	_SG_setUpdateList
   0D24 F1            [10] 2714 	pop	af
                           2715 ;game.c:114: first_game = 1;
   0D25 21rB7r01      [10] 2716 	ld	hl,#_first_game + 0
   0D28 36 01         [10] 2717 	ld	(hl), #0x01
                           2718 ;game.c:120: unpack_bg_patterns (tsfont_patterns_c, tsfont_colours_c, 0, 7);
   0D2A 11r00r00      [10] 2719 	ld	de,#_tsfont_colours_c+0
   0D2D 01r00r00      [10] 2720 	ld	bc,#_tsfont_patterns_c+0
   0D30 3E 07         [ 7] 2721 	ld	a,#0x07
   0D32 F5            [11] 2722 	push	af
   0D33 33            [ 6] 2723 	inc	sp
   0D34 21 00 00      [10] 2724 	ld	hl,#0x0000
   0D37 E5            [11] 2725 	push	hl
   0D38 D5            [11] 2726 	push	de
   0D39 C5            [11] 2727 	push	bc
   0D3A CDr00r00      [17] 2728 	call	_unpack_bg_patterns
   0D3D 21 07 00      [10] 2729 	ld	hl,#7
   0D40 39            [11] 2730 	add	hl,sp
   0D41 F9            [ 6] 2731 	ld	sp,hl
                           2732 ;game.c:122: credits ();
   0D42 CDrA4r05      [17] 2733 	call	_credits
                           2734 ;game.c:125: aPLib_depack_VRAM (SGT_BASE, ss_fixed_patterns_c);
   0D45 21r00r00      [10] 2735 	ld	hl,#_ss_fixed_patterns_c+0
   0D48 E5            [11] 2736 	push	hl
   0D49 21 00 38      [10] 2737 	ld	hl,#0x3800
   0D4C E5            [11] 2738 	push	hl
   0D4D CDr00r00      [17] 2739 	call	_aPLib_depack_VRAM
   0D50 F1            [10] 2740 	pop	af
   0D51 F1            [10] 2741 	pop	af
                           2742 ;game.c:127: mode_no_resonators = 0;
   0D52 21rD7r03      [10] 2743 	ld	hl,#_mode_no_resonators + 0
   0D55 36 00         [10] 2744 	ld	(hl), #0x00
                           2745 ;game.c:128: while (1) {	
   0D57                    2746 00110$:
                           2747 ;game.c:129: title ();
   0D57 CDr8Fr03      [17] 2748 	call	_title
                           2749 ;game.c:131: level = 0;
   0D5A 21rB8r01      [10] 2750 	ld	hl,#_level + 0
   0D5D 36 00         [10] 2751 	ld	(hl), #0x00
                           2752 ;game.c:132: plife = PLAYER_LIFE;
   0D5F 21r6Fr00      [10] 2753 	ld	hl,#_plife + 0
   0D62 36 05         [10] 2754 	ld	(hl), #0x05
                           2755 ;game.c:136: while (1) {
   0D64                    2756 00107$:
                           2757 ;game.c:137: pres (scr_level);
   0D64 21r35r05      [10] 2758 	ld	hl,#_scr_level
   0D67 E5            [11] 2759 	push	hl
   0D68 CDr75r03      [17] 2760 	call	_pres
   0D6B F1            [10] 2761 	pop	af
                           2762 ;game.c:138: game_init (); 
   0D6C CDr6Ar07      [17] 2763 	call	_game_init
                           2764 ;game.c:139: game_loop ();
   0D6F CDr5Cr0A      [17] 2765 	call	_game_loop
                           2766 ;game.c:141: if (game_over) {
   0D72 3ArC0r01      [13] 2767 	ld	a,(#_game_over + 0)
   0D75 B7            [ 4] 2768 	or	a, a
   0D76 28 0A         [12] 2769 	jr	Z,00104$
                           2770 ;game.c:142: pres (scr_game_over);
   0D78 21rA1r04      [10] 2771 	ld	hl,#_scr_game_over
   0D7B E5            [11] 2772 	push	hl
   0D7C CDr75r03      [17] 2773 	call	_pres
   0D7F F1            [10] 2774 	pop	af
                           2775 ;game.c:143: break;
   0D80 18 13         [12] 2776 	jr	00108$
   0D82                    2777 00104$:
                           2778 ;game.c:145: level ++;
   0D82 21rB8r01      [10] 2779 	ld	hl, #_level+0
   0D85 34            [11] 2780 	inc	(hl)
                           2781 ;game.c:146: if (level == MAX_LEVELS) {
   0D86 3ArB8r01      [13] 2782 	ld	a,(#_level + 0)
   0D89 D6 03         [ 7] 2783 	sub	a, #0x03
   0D8B 20 D7         [12] 2784 	jr	NZ,00107$
                           2785 ;game.c:147: pres (scr_the_end);
   0D8D 21rBFr04      [10] 2786 	ld	hl,#_scr_the_end
   0D90 E5            [11] 2787 	push	hl
   0D91 CDr75r03      [17] 2788 	call	_pres
   0D94 F1            [10] 2789 	pop	af
                           2790 ;game.c:148: break;
   0D95                    2791 00108$:
                           2792 ;game.c:153: first_game = 0;
   0D95 21rB7r01      [10] 2793 	ld	hl,#_first_game + 0
   0D98 36 00         [10] 2794 	ld	(hl), #0x00
   0D9A 18 BB         [12] 2795 	jr	00110$
                           2796 	.area _CODE
                           2797 	.area _INITIALIZER
                           2798 	.area _CABS (ABS)
