                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.2 #9293 (MINGW32)
                              4 ; This file was generated Fri Nov 02 19:01:08 2018
                              5 ;--------------------------------------------------------
                              6 	.module game
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _game_loop
                             14 	.globl _prepare_scr
                             15 	.globl _game_init
                             16 	.globl _flickscreen_do_vertical
                             17 	.globl _flickscreen_do_horizontal
                             18 	.globl _credits
                             19 	.globl _scr_level
                             20 	.globl _scr_the_end
                             21 	.globl _scr_game_over
                             22 	.globl _title
                             23 	.globl _pres
                             24 	.globl _bat_out
                             25 	.globl _bat_in
                             26 	.globl _hud_update
                             27 	.globl _draw_game_frame
                             28 	.globl _enems_move
                             29 	.globl _enems_load
                             30 	.globl _enems_persistent_deaths_load
                             31 	.globl _enems_persistent_update
                             32 	.globl _enems_persistent_load
                             33 	.globl _player_move
                             34 	.globl _player_kill
                             35 	.globl _player_to_pixels
                             36 	.globl _player_render
                             37 	.globl _player_init
                             38 	.globl _chac_chacs_do
                             39 	.globl _hotspots_create
                             40 	.globl _hotspots_paint
                             41 	.globl _hotspots_load
                             42 	.globl _update_cycle
                             43 	.globl _jump_start
                             44 	.globl _pad_read
                             45 	.globl _collide_in
                             46 	.globl _pr_str
                             47 	.globl _draw_scr
                             48 	.globl _p_t
                             49 	.globl _ul_putc
                             50 	.globl _cls
                             51 	.globl _clear_update_list
                             52 	.globl _unrle
                             53 	.globl _unpack_bg_patterns
                             54 	.globl _memfill
                             55 	.globl _delay
                             56 	.globl _aPLib_depack_VRAM
                             57 	.globl _PSGSFXStop
                             58 	.globl _PSGSFXPlay
                             59 	.globl _PSGStop
                             60 	.globl _PSGPlay
                             61 	.globl _SG_doUpdateList
                             62 	.globl _SG_setUpdateList
                             63 	.globl _SMS_VDPType
                             64 	.globl _SG_copySpritestoSAT
                             65 	.globl _SG_resetPauseRequest
                             66 	.globl _SG_queryPauseRequested
                             67 	.globl _SG_getKeysStatus
                             68 	.globl _SG_getStp
                             69 	.globl _SG_addMetaSprite1x1
                             70 	.globl _SG_initSprites
                             71 	.globl _SG_setTile
                             72 	.globl _SG_waitForVBlank
                             73 	.globl _SG_setSpriteMode
                             74 	.globl _SG_VDPturnOffFeature
                             75 	.globl _SG_VDPturnOnFeature
                             76 	.globl _game_mode
                             77 	.globl _mode_no_resonators
                             78 	.globl _shaker_ct
                             79 	.globl _springs_on
                             80 	.globl _cfx
                             81 	.globl _res_subct
                             82 	.globl _res_ct
                             83 	.globl _res_on
                             84 	.globl _res_disable
                             85 	.globl _chac_chacs_queue_write
                             86 	.globl _chac_chacs_queue_read
                             87 	.globl _chac_chacs_queue
                             88 	.globl _chac_chacs_ct
                             89 	.globl _chac_chacs_idlewait
                             90 	.globl _chac_chacs_state
                             91 	.globl _chac_chacs_yx
                             92 	.globl _max_chac_chacs
                             93 	.globl _ep_dead
                             94 	.globl _en_spr_id
                             95 	.globl _enf_vy
                             96 	.globl _enf_y
                             97 	.globl _enf_vx
                             98 	.globl _enf_x
                             99 	.globl _en_spr_x_mod
                            100 	.globl _en_ct
                            101 	.globl _en_status
                            102 	.globl _en_life
                            103 	.globl _en_cttouched
                            104 	.globl _en_flags
                            105 	.globl _en_state
                            106 	.globl _en_facing
                            107 	.globl _en_s
                            108 	.globl _en_my
                            109 	.globl _en_mx
                            110 	.globl _en_y2
                            111 	.globl _en_x2
                            112 	.globl _en_y1
                            113 	.globl _en_x1
                            114 	.globl _en_y
                            115 	.globl _en_x
                            116 	.globl _en_t
                            117 	.globl _flags
                            118 	.globl _lkact
                            119 	.globl _hact
                            120 	.globl _pctfr
                            121 	.globl _no_ct
                            122 	.globl _oam_index_player
                            123 	.globl _okilled
                            124 	.globl _oammo
                            125 	.globl _oobjs
                            126 	.globl _okeys
                            127 	.globl _olife
                            128 	.globl _flick_override
                            129 	.globl _level_reset
                            130 	.globl _warp_to_level
                            131 	.globl _game_over
                            132 	.globl _win_level
                            133 	.globl _paused
                            134 	.globl _frame_counter
                            135 	.globl _half_life
                            136 	.globl _on_pant
                            137 	.globl _n_pant
                            138 	.globl _c_max_enems
                            139 	.globl _level
                            140 	.globl _first_game
                            141 	.globl _map_buff
                            142 	.globl _fade_delay
                            143 	.globl _fader
                            144 	.globl _update_list
                            145 	.globl _update_index
                            146 	.globl _ntsc_frame
                            147 	.globl _ntsc
                            148 	.globl _c_max_bolts
                            149 	.globl _c_hotspots
                            150 	.globl _c_enems
                            151 	.globl _c_locks
                            152 	.globl _c_decos
                            153 	.globl _c_map
                            154 	.globl _spr_enems
                            155 	.globl _c_behs
                            156 	.globl _c_ts_tmaps
                            157 	.globl _c_map_size
                            158 	.globl _c_map_h
                            159 	.globl _c_map_w
                            160 	.globl _ft
                            161 	.globl _do_process_breakable
                            162 	.globl _hrt
                            163 	.globl _hry
                            164 	.globl _hrx
                            165 	.globl _py_safe
                            166 	.globl _px_safe
                            167 	.globl _n_pant_safe
                            168 	.globl _pfiring
                            169 	.globl _pkilled
                            170 	.globl _pammo
                            171 	.globl _pobjs
                            172 	.globl _pkeys
                            173 	.globl _plife
                            174 	.globl _pcontinues
                            175 	.globl _pnotsafe
                            176 	.globl _pice
                            177 	.globl _pkill
                            178 	.globl _pry_old
                            179 	.globl _prx_old
                            180 	.globl _hith
                            181 	.globl _hitv
                            182 	.globl _pgtmy
                            183 	.globl _pgtmx
                            184 	.globl _phit
                            185 	.globl _pbouncing
                            186 	.globl _pflickering
                            187 	.globl _oppossee
                            188 	.globl _ppossee
                            189 	.globl _pgotten
                            190 	.globl _pctj
                            191 	.globl _pj
                            192 	.globl _b_button
                            193 	.globl _a_button
                            194 	.globl _psprid
                            195 	.globl _pfr
                            196 	.globl _pfacing
                            197 	.globl _pcy
                            198 	.globl _pcx
                            199 	.globl _pry
                            200 	.globl _prx
                            201 	.globl _pvy
                            202 	.globl _pvx
                            203 	.globl _py
                            204 	.globl _px
                            205 	.globl _vertical_engine_type
                            206 	.globl _en_sg_2
                            207 	.globl _en_sg_1
                            208 	.globl __enf_vy
                            209 	.globl __enf_vx
                            210 	.globl __enf_y
                            211 	.globl __enf_x
                            212 	.globl __en_state
                            213 	.globl __en_facing
                            214 	.globl __en_ct
                            215 	.globl __en_my
                            216 	.globl __en_mx
                            217 	.globl __en_y2
                            218 	.globl __en_x2
                            219 	.globl __en_y1
                            220 	.globl __en_x1
                            221 	.globl __en_y
                            222 	.globl __en_x
                            223 	.globl __en_s
                            224 	.globl __en_t
                            225 	.globl _pregotten
                            226 	.globl _en_is_alive
                            227 	.globl _touched
                            228 	.globl _en_spr
                            229 	.globl _en_colly
                            230 	.globl _en_collx
                            231 	.globl _en_fr
                            232 	.globl _en_offs
                            233 	.globl _en_initial
                            234 	.globl _cur_stp
                            235 	.globl _caux
                            236 	.globl _cy2
                            237 	.globl _cy1
                            238 	.globl _cx2
                            239 	.globl _cx1
                            240 	.globl _at2
                            241 	.globl _at1
                            242 	.globl _ticker
                            243 	.globl _rdct
                            244 	.globl _rds
                            245 	.globl _rdm
                            246 	.globl _rdd
                            247 	.globl _rdc
                            248 	.globl _rdb
                            249 	.globl _rda
                            250 	.globl _rdit
                            251 	.globl _rdt
                            252 	.globl _rdy
                            253 	.globl _rdx
                            254 	.globl _gp_addr
                            255 	.globl _gp_ram
                            256 	.globl _gp_tmap
                            257 	.globl _gp_gen
                            258 	.globl _rds16
                            259 	.globl _gpjt
                            260 	.globl _gpit
                            261 	.globl _pad_this_frame
                            262 	.globl _pad0
                            263 	.globl __t
                            264 	.globl __n
                            265 	.globl __y
                            266 	.globl __x
                            267 	.globl _levelnames
                            268 	.globl _level2name
                            269 	.globl _level1name
                            270 	.globl _level0name
                            271 	.globl _l_music
                            272 	.globl _l_hotspots
                            273 	.globl _l_enems
                            274 	.globl _l_n_bolts
                            275 	.globl _l_locks
                            276 	.globl _l_decos
                            277 	.globl _l_map
                            278 	.globl _l_spr_enems
                            279 	.globl _l_spr_patterns
                            280 	.globl _l_behs
                            281 	.globl _l_ts_tmaps
                            282 	.globl _l_ts_colours
                            283 	.globl _l_ts_patterns
                            284 	.globl _l_player_max_enems
                            285 	.globl _l_player_max_objects
                            286 	.globl _l_map_h
                            287 	.globl _l_map_w
                            288 	.globl _l_ini_y
                            289 	.globl _l_ini_x
                            290 	.globl _l_scr_ini
                            291 	.globl _spr_hs
                            292 	.globl _spr_enems2
                            293 	.globl _spr_enems1
                            294 	.globl _spr_enems0
                            295 	.globl _spr_player
                            296 	.globl _behs2
                            297 	.globl _behs1
                            298 	.globl _behs0
                            299 	.globl _jitter
                            300 	.globl _bits
                            301 	.globl _chac_chacs_t3
                            302 	.globl _chac_chacs_t2
                            303 	.globl _chac_chacs_t1
                            304 	.globl _chac_chacs_times
                            305 ;--------------------------------------------------------
                            306 ; special function registers
                            307 ;--------------------------------------------------------
                     00BF   308 _VDPControlPort	=	0x00bf
                     00BF   309 _VDPStatusPort	=	0x00bf
                     00BE   310 _VDPDataPort	=	0x00be
                     007E   311 _VDPVCounterPort	=	0x007e
                     007F   312 _VDPHCounterPort	=	0x007f
                     00DC   313 _IOPortL	=	0x00dc
                     00DD   314 _IOPortH	=	0x00dd
                            315 ;--------------------------------------------------------
                            316 ; ram data
                            317 ;--------------------------------------------------------
                            318 	.area _DATA
   0000                     319 __x::
   0000                     320 	.ds 1
   0001                     321 __y::
   0001                     322 	.ds 1
   0002                     323 __n::
   0002                     324 	.ds 1
   0003                     325 __t::
   0003                     326 	.ds 1
   0004                     327 _pad0::
   0004                     328 	.ds 2
   0006                     329 _pad_this_frame::
   0006                     330 	.ds 2
   0008                     331 _gpit::
   0008                     332 	.ds 1
   0009                     333 _gpjt::
   0009                     334 	.ds 1
   000A                     335 _rds16::
   000A                     336 	.ds 2
   000C                     337 _gp_gen::
   000C                     338 	.ds 2
   000E                     339 _gp_tmap::
   000E                     340 	.ds 2
   0010                     341 _gp_ram::
   0010                     342 	.ds 2
   0012                     343 _gp_addr::
   0012                     344 	.ds 2
   0014                     345 _rdx::
   0014                     346 	.ds 1
   0015                     347 _rdy::
   0015                     348 	.ds 1
   0016                     349 _rdt::
   0016                     350 	.ds 1
   0017                     351 _rdit::
   0017                     352 	.ds 1
   0018                     353 _rda::
   0018                     354 	.ds 1
   0019                     355 _rdb::
   0019                     356 	.ds 1
   001A                     357 _rdc::
   001A                     358 	.ds 1
   001B                     359 _rdd::
   001B                     360 	.ds 1
   001C                     361 _rdm::
   001C                     362 	.ds 1
   001D                     363 _rds::
   001D                     364 	.ds 1
   001E                     365 _rdct::
   001E                     366 	.ds 1
   001F                     367 _ticker::
   001F                     368 	.ds 1
   0020                     369 _at1::
   0020                     370 	.ds 1
   0021                     371 _at2::
   0021                     372 	.ds 1
   0022                     373 _cx1::
   0022                     374 	.ds 1
   0023                     375 _cx2::
   0023                     376 	.ds 1
   0024                     377 _cy1::
   0024                     378 	.ds 1
   0025                     379 _cy2::
   0025                     380 	.ds 1
   0026                     381 _caux::
   0026                     382 	.ds 1
   0027                     383 _cur_stp::
   0027                     384 	.ds 2
   0029                     385 _en_initial::
   0029                     386 	.ds 1
   002A                     387 _en_offs::
   002A                     388 	.ds 1
   002B                     389 _en_fr::
   002B                     390 	.ds 1
   002C                     391 _en_collx::
   002C                     392 	.ds 1
   002D                     393 _en_colly::
   002D                     394 	.ds 1
   002E                     395 _en_spr::
   002E                     396 	.ds 1
   002F                     397 _touched::
   002F                     398 	.ds 1
   0030                     399 _en_is_alive::
   0030                     400 	.ds 1
   0031                     401 _pregotten::
   0031                     402 	.ds 1
   0032                     403 __en_t::
   0032                     404 	.ds 1
   0033                     405 __en_s::
   0033                     406 	.ds 1
   0034                     407 __en_x::
   0034                     408 	.ds 1
   0035                     409 __en_y::
   0035                     410 	.ds 1
   0036                     411 __en_x1::
   0036                     412 	.ds 1
   0037                     413 __en_y1::
   0037                     414 	.ds 1
   0038                     415 __en_x2::
   0038                     416 	.ds 1
   0039                     417 __en_y2::
   0039                     418 	.ds 1
   003A                     419 __en_mx::
   003A                     420 	.ds 1
   003B                     421 __en_my::
   003B                     422 	.ds 1
   003C                     423 __en_ct::
   003C                     424 	.ds 1
   003D                     425 __en_facing::
   003D                     426 	.ds 1
   003E                     427 __en_state::
   003E                     428 	.ds 1
   003F                     429 __enf_x::
   003F                     430 	.ds 2
   0041                     431 __enf_y::
   0041                     432 	.ds 2
   0043                     433 __enf_vx::
   0043                     434 	.ds 2
   0045                     435 __enf_vy::
   0045                     436 	.ds 2
   0047                     437 _en_sg_1::
   0047                     438 	.ds 1
   0048                     439 _en_sg_2::
   0048                     440 	.ds 1
   0049                     441 _vertical_engine_type::
   0049                     442 	.ds 1
   004A                     443 _px::
   004A                     444 	.ds 2
   004C                     445 _py::
   004C                     446 	.ds 2
   004E                     447 _pvx::
   004E                     448 	.ds 2
   0050                     449 _pvy::
   0050                     450 	.ds 2
   0052                     451 _prx::
   0052                     452 	.ds 1
   0053                     453 _pry::
   0053                     454 	.ds 1
   0054                     455 _pcx::
   0054                     456 	.ds 1
   0055                     457 _pcy::
   0055                     458 	.ds 1
   0056                     459 _pfacing::
   0056                     460 	.ds 1
   0057                     461 _pfr::
   0057                     462 	.ds 1
   0058                     463 _psprid::
   0058                     464 	.ds 1
   0059                     465 _a_button::
   0059                     466 	.ds 1
   005A                     467 _b_button::
   005A                     468 	.ds 1
   005B                     469 _pj::
   005B                     470 	.ds 1
   005C                     471 _pctj::
   005C                     472 	.ds 1
   005D                     473 _pgotten::
   005D                     474 	.ds 1
   005E                     475 _ppossee::
   005E                     476 	.ds 1
   005F                     477 _oppossee::
   005F                     478 	.ds 1
   0060                     479 _pflickering::
   0060                     480 	.ds 1
   0061                     481 _pbouncing::
   0061                     482 	.ds 1
   0062                     483 _phit::
   0062                     484 	.ds 1
   0063                     485 _pgtmx::
   0063                     486 	.ds 2
   0065                     487 _pgtmy::
   0065                     488 	.ds 2
   0067                     489 _hitv::
   0067                     490 	.ds 1
   0068                     491 _hith::
   0068                     492 	.ds 1
   0069                     493 _prx_old::
   0069                     494 	.ds 1
   006A                     495 _pry_old::
   006A                     496 	.ds 1
   006B                     497 _pkill::
   006B                     498 	.ds 1
   006C                     499 _pice::
   006C                     500 	.ds 1
   006D                     501 _pnotsafe::
   006D                     502 	.ds 1
   006E                     503 _pcontinues::
   006E                     504 	.ds 1
   006F                     505 _plife::
   006F                     506 	.ds 1
   0070                     507 _pkeys::
   0070                     508 	.ds 1
   0071                     509 _pobjs::
   0071                     510 	.ds 1
   0072                     511 _pammo::
   0072                     512 	.ds 1
   0073                     513 _pkilled::
   0073                     514 	.ds 1
   0074                     515 _pfiring::
   0074                     516 	.ds 1
   0075                     517 _n_pant_safe::
   0075                     518 	.ds 1
   0076                     519 _px_safe::
   0076                     520 	.ds 2
   0078                     521 _py_safe::
   0078                     522 	.ds 2
   007A                     523 _hrx::
   007A                     524 	.ds 1
   007B                     525 _hry::
   007B                     526 	.ds 1
   007C                     527 _hrt::
   007C                     528 	.ds 1
   007D                     529 _do_process_breakable::
   007D                     530 	.ds 1
   007E                     531 _ft::
   007E                     532 	.ds 1
   007F                     533 _c_map_w::
   007F                     534 	.ds 1
   0080                     535 _c_map_h::
   0080                     536 	.ds 1
   0081                     537 _c_map_size::
   0081                     538 	.ds 1
   0082                     539 _c_ts_tmaps::
   0082                     540 	.ds 2
   0084                     541 _c_behs::
   0084                     542 	.ds 2
   0086                     543 _spr_enems::
   0086                     544 	.ds 2
   0088                     545 _c_map::
   0088                     546 	.ds 2
   008A                     547 _c_decos::
   008A                     548 	.ds 1
   008B                     549 _c_locks::
   008B                     550 	.ds 2
   008D                     551 _c_enems::
   008D                     552 	.ds 2
   008F                     553 _c_hotspots::
   008F                     554 	.ds 2
   0091                     555 _c_max_bolts::
   0091                     556 	.ds 1
   0092                     557 _ntsc::
   0092                     558 	.ds 1
   0093                     559 _ntsc_frame::
   0093                     560 	.ds 1
   0094                     561 _update_index::
   0094                     562 	.ds 1
   0095                     563 _update_list::
   0095                     564 	.ds 96
   00F5                     565 _fader::
   00F5                     566 	.ds 1
   00F6                     567 _fade_delay::
   00F6                     568 	.ds 1
   00F7                     569 _map_buff::
   00F7                     570 	.ds 192
   01B7                     571 _first_game::
   01B7                     572 	.ds 1
   01B8                     573 _level::
   01B8                     574 	.ds 1
   01B9                     575 _c_max_enems::
   01B9                     576 	.ds 1
   01BA                     577 _n_pant::
   01BA                     578 	.ds 1
   01BB                     579 _on_pant::
   01BB                     580 	.ds 1
   01BC                     581 _half_life::
   01BC                     582 	.ds 1
   01BD                     583 _frame_counter::
   01BD                     584 	.ds 1
   01BE                     585 _paused::
   01BE                     586 	.ds 1
   01BF                     587 _win_level::
   01BF                     588 	.ds 1
   01C0                     589 _game_over::
   01C0                     590 	.ds 1
   01C1                     591 _warp_to_level::
   01C1                     592 	.ds 1
   01C2                     593 _level_reset::
   01C2                     594 	.ds 1
   01C3                     595 _flick_override::
   01C3                     596 	.ds 1
   01C4                     597 _olife::
   01C4                     598 	.ds 1
   01C5                     599 _okeys::
   01C5                     600 	.ds 1
   01C6                     601 _oobjs::
   01C6                     602 	.ds 1
   01C7                     603 _oammo::
   01C7                     604 	.ds 1
   01C8                     605 _okilled::
   01C8                     606 	.ds 1
   01C9                     607 _oam_index_player::
   01C9                     608 	.ds 1
   01CA                     609 _no_ct::
   01CA                     610 	.ds 1
   01CB                     611 _pctfr::
   01CB                     612 	.ds 1
   01CC                     613 _hact::
   01CC                     614 	.ds 24
   01E4                     615 _lkact::
   01E4                     616 	.ds 16
   01F4                     617 _flags::
   01F4                     618 	.ds 2
   01F6                     619 _en_t::
   01F6                     620 	.ds 3
   01F9                     621 _en_x::
   01F9                     622 	.ds 3
   01FC                     623 _en_y::
   01FC                     624 	.ds 3
   01FF                     625 _en_x1::
   01FF                     626 	.ds 3
   0202                     627 _en_y1::
   0202                     628 	.ds 3
   0205                     629 _en_x2::
   0205                     630 	.ds 3
   0208                     631 _en_y2::
   0208                     632 	.ds 3
   020B                     633 _en_mx::
   020B                     634 	.ds 3
   020E                     635 _en_my::
   020E                     636 	.ds 3
   0211                     637 _en_s::
   0211                     638 	.ds 3
   0214                     639 _en_facing::
   0214                     640 	.ds 3
   0217                     641 _en_state::
   0217                     642 	.ds 3
   021A                     643 _en_flags::
   021A                     644 	.ds 3
   021D                     645 _en_cttouched::
   021D                     646 	.ds 3
   0220                     647 _en_life::
   0220                     648 	.ds 3
   0223                     649 _en_status::
   0223                     650 	.ds 3
   0226                     651 _en_ct::
   0226                     652 	.ds 3
   0229                     653 _en_spr_x_mod::
   0229                     654 	.ds 1
   022A                     655 _enf_x::
   022A                     656 	.ds 6
   0230                     657 _enf_vx::
   0230                     658 	.ds 6
   0236                     659 _enf_y::
   0236                     660 	.ds 6
   023C                     661 _enf_vy::
   023C                     662 	.ds 6
   0242                     663 _en_spr_id::
   0242                     664 	.ds 3
   0245                     665 _ep_dead::
   0245                     666 	.ds 72
   028D                     667 _max_chac_chacs::
   028D                     668 	.ds 1
   028E                     669 _chac_chacs_yx::
   028E                     670 	.ds 4
   0292                     671 _chac_chacs_state::
   0292                     672 	.ds 4
   0296                     673 _chac_chacs_idlewait::
   0296                     674 	.ds 4
   029A                     675 _chac_chacs_ct::
   029A                     676 	.ds 4
   029E                     677 _chac_chacs_queue::
   029E                     678 	.ds 16
   02AE                     679 _chac_chacs_queue_read::
   02AE                     680 	.ds 1
   02AF                     681 _chac_chacs_queue_write::
   02AF                     682 	.ds 1
   02B0                     683 _res_disable::
   02B0                     684 	.ds 1
   02B1                     685 _res_on::
   02B1                     686 	.ds 1
   02B2                     687 _res_ct::
   02B2                     688 	.ds 1
   02B3                     689 _res_subct::
   02B3                     690 	.ds 1
   02B4                     691 _cfx::
   02B4                     692 	.ds 1
   02B5                     693 _springs_on::
   02B5                     694 	.ds 1
   02B6                     695 _shaker_ct::
   02B6                     696 	.ds 1
   02B7                     697 _mode_no_resonators::
   02B7                     698 	.ds 1
   02B8                     699 _game_mode::
   02B8                     700 	.ds 1
                            701 ;--------------------------------------------------------
                            702 ; ram data
                            703 ;--------------------------------------------------------
                            704 	.area _INITIALIZED
                            705 ;--------------------------------------------------------
                            706 ; absolute external ram data
                            707 ;--------------------------------------------------------
                            708 	.area _DABS (ABS)
                            709 ;--------------------------------------------------------
                            710 ; global & static initialisations
                            711 ;--------------------------------------------------------
                            712 	.area _HOME
                            713 	.area _GSINIT
                            714 	.area _GSFINAL
                            715 	.area _GSINIT
                            716 ;--------------------------------------------------------
                            717 ; Home
                            718 ;--------------------------------------------------------
                            719 	.area _HOME
                            720 	.area _HOME
                            721 ;--------------------------------------------------------
                            722 ; code
                            723 ;--------------------------------------------------------
                            724 	.area _CODE
                            725 ;engine/hotspots.h:7: void hotspots_load (void) {
                            726 ;	---------------------------------
                            727 ; Function hotspots_load
                            728 ; ---------------------------------
   0000                     729 _hotspots_load::
                            730 ;engine/hotspots.h:9: gp_gen = (unsigned char *) c_hotspots;
   0000 2Ar8Fr00      [16]  731 	ld	hl,(_c_hotspots)
   0003 22r0Cr00      [16]  732 	ld	(_gp_gen),hl
                            733 ;engine/hotspots.h:11: for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
   0006 21r08r00      [10]  734 	ld	hl,#_gpit + 0
   0009 36 00         [10]  735 	ld	(hl), #0x00
   000B 11rCCr01      [10]  736 	ld	de,#_hact+0
   000E                     737 00102$:
                            738 ;engine/hotspots.h:16: hact [gpit] = 1;
   000E 2Ar08r00      [16]  739 	ld	hl,(_gpit)
   0011 26 00         [ 7]  740 	ld	h,#0x00
   0013 19            [11]  741 	add	hl,de
   0014 36 01         [10]  742 	ld	(hl),#0x01
                            743 ;engine/hotspots.h:11: for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
   0016 21r08r00      [10]  744 	ld	hl, #_gpit+0
   0019 34            [11]  745 	inc	(hl)
   001A 3Ar08r00      [13]  746 	ld	a,(#_gpit + 0)
   001D D6 18         [ 7]  747 	sub	a, #0x18
   001F 38 ED         [12]  748 	jr	C,00102$
   0021 C9            [10]  749 	ret
   0022                     750 _chac_chacs_times:
   0022 00                  751 	.db #0x00	; 0
   0023 10                  752 	.db #0x10	; 16
   0024 01                  753 	.db #0x01	; 1
   0025 32                  754 	.db #0x32	; 50	'2'
   0026 01                  755 	.db #0x01	; 1
   0027 01                  756 	.db #0x01	; 1
   0028                     757 _chac_chacs_t1:
   0028 26                  758 	.db #0x26	; 38
   0029 20                  759 	.db #0x20	; 32
   002A 22                  760 	.db #0x22	; 34
   002B 25                  761 	.db #0x25	; 37
   002C 22                  762 	.db #0x22	; 34
   002D 20                  763 	.db #0x20	; 32
   002E                     764 _chac_chacs_t2:
   002E 26                  765 	.db #0x26	; 38
   002F 26                  766 	.db #0x26	; 38
   0030 26                  767 	.db #0x26	; 38
   0031 24                  768 	.db #0x24	; 36
   0032 26                  769 	.db #0x26	; 38
   0033 26                  770 	.db #0x26	; 38
   0034                     771 _chac_chacs_t3:
   0034 26                  772 	.db #0x26	; 38
   0035 21                  773 	.db #0x21	; 33
   0036 23                  774 	.db #0x23	; 35
   0037 25                  775 	.db #0x25	; 37
   0038 23                  776 	.db #0x23	; 35
   0039 21                  777 	.db #0x21	; 33
   003A                     778 _bits:
   003A 01                  779 	.db #0x01	; 1
   003B 02                  780 	.db #0x02	; 2
   003C 04                  781 	.db #0x04	; 4
   003D 08                  782 	.db #0x08	; 8
   003E 10                  783 	.db #0x10	; 16
   003F 20                  784 	.db #0x20	; 32
   0040 40                  785 	.db #0x40	; 64
   0041 80                  786 	.db #0x80	; 128
   0042                     787 _jitter:
   0042 00                  788 	.db #0x00	; 0
   0043 01                  789 	.db #0x01	; 1
   0044 01                  790 	.db #0x01	; 1
   0045 00                  791 	.db #0x00	; 0
   0046 00                  792 	.db #0x00	; 0
   0047 01                  793 	.db #0x01	; 1
   0048 00                  794 	.db #0x00	; 0
   0049 01                  795 	.db #0x01	; 1
   004A 01                  796 	.db #0x01	; 1
   004B 00                  797 	.db #0x00	; 0
   004C 00                  798 	.db #0x00	; 0
   004D 00                  799 	.db #0x00	; 0
   004E 01                  800 	.db #0x01	; 1
   004F 00                  801 	.db #0x00	; 0
   0050 01                  802 	.db #0x01	; 1
   0051 01                  803 	.db #0x01	; 1
   0052                     804 _behs0:
   0052 00                  805 	.db #0x00	; 0
   0053 00                  806 	.db #0x00	; 0
   0054 00                  807 	.db #0x00	; 0
   0055 00                  808 	.db #0x00	; 0
   0056 08                  809 	.db #0x08	; 8
   0057 08                  810 	.db #0x08	; 8
   0058 08                  811 	.db #0x08	; 8
   0059 08                  812 	.db #0x08	; 8
   005A 00                  813 	.db #0x00	; 0
   005B 08                  814 	.db #0x08	; 8
   005C 00                  815 	.db #0x00	; 0
   005D 00                  816 	.db #0x00	; 0
   005E 01                  817 	.db #0x01	; 1
   005F 08                  818 	.db #0x08	; 8
   0060 04                  819 	.db #0x04	; 4
   0061 0A                  820 	.db #0x0A	; 10
   0062 00                  821 	.db #0x00	; 0
   0063 00                  822 	.db #0x00	; 0
   0064 00                  823 	.db #0x00	; 0
   0065 00                  824 	.db #0x00	; 0
   0066 08                  825 	.db #0x08	; 8
   0067 08                  826 	.db #0x08	; 8
   0068 08                  827 	.db #0x08	; 8
   0069 08                  828 	.db #0x08	; 8
   006A 00                  829 	.db #0x00	; 0
   006B 08                  830 	.db #0x08	; 8
   006C 00                  831 	.db #0x00	; 0
   006D 00                  832 	.db #0x00	; 0
   006E 01                  833 	.db #0x01	; 1
   006F 08                  834 	.db #0x08	; 8
   0070 04                  835 	.db #0x04	; 4
   0071 0A                  836 	.db #0x0A	; 10
   0072                     837 _behs1:
   0072 00                  838 	.db #0x00	; 0
   0073 00                  839 	.db #0x00	; 0
   0074 00                  840 	.db #0x00	; 0
   0075 00                  841 	.db #0x00	; 0
   0076 08                  842 	.db #0x08	; 8
   0077 04                  843 	.db #0x04	; 4
   0078 08                  844 	.db #0x08	; 8
   0079 04                  845 	.db #0x04	; 4
   007A 28                  846 	.db #0x28	; 40
   007B 29                  847 	.db #0x29	; 41
   007C 01                  848 	.db #0x01	; 1
   007D 01                  849 	.db #0x01	; 1
   007E 01                  850 	.db #0x01	; 1
   007F 08                  851 	.db #0x08	; 8
   0080 08                  852 	.db #0x08	; 8
   0081 0A                  853 	.db #0x0A	; 10
   0082 00                  854 	.db #0x00	; 0
   0083 00                  855 	.db #0x00	; 0
   0084 00                  856 	.db #0x00	; 0
   0085 00                  857 	.db #0x00	; 0
   0086 08                  858 	.db #0x08	; 8
   0087 04                  859 	.db #0x04	; 4
   0088 08                  860 	.db #0x08	; 8
   0089 04                  861 	.db #0x04	; 4
   008A 28                  862 	.db #0x28	; 40
   008B 29                  863 	.db #0x29	; 41
   008C 01                  864 	.db #0x01	; 1
   008D 01                  865 	.db #0x01	; 1
   008E 01                  866 	.db #0x01	; 1
   008F 08                  867 	.db #0x08	; 8
   0090 08                  868 	.db #0x08	; 8
   0091 08                  869 	.db #0x08	; 8
   0092                     870 _behs2:
   0092 00                  871 	.db #0x00	; 0
   0093 08                  872 	.db #0x08	; 8
   0094 00                  873 	.db #0x00	; 0
   0095 00                  874 	.db #0x00	; 0
   0096 08                  875 	.db #0x08	; 8
   0097 08                  876 	.db #0x08	; 8
   0098 08                  877 	.db #0x08	; 8
   0099 08                  878 	.db #0x08	; 8
   009A 00                  879 	.db #0x00	; 0
   009B 08                  880 	.db #0x08	; 8
   009C 04                  881 	.db #0x04	; 4
   009D 08                  882 	.db #0x08	; 8
   009E 01                  883 	.db #0x01	; 1
   009F 01                  884 	.db #0x01	; 1
   00A0 08                  885 	.db #0x08	; 8
   00A1 0A                  886 	.db #0x0A	; 10
   00A2 00                  887 	.db #0x00	; 0
   00A3 08                  888 	.db #0x08	; 8
   00A4 00                  889 	.db #0x00	; 0
   00A5 00                  890 	.db #0x00	; 0
   00A6 08                  891 	.db #0x08	; 8
   00A7 08                  892 	.db #0x08	; 8
   00A8 08                  893 	.db #0x08	; 8
   00A9 08                  894 	.db #0x08	; 8
   00AA 00                  895 	.db #0x00	; 0
   00AB 08                  896 	.db #0x08	; 8
   00AC 04                  897 	.db #0x04	; 4
   00AD 08                  898 	.db #0x08	; 8
   00AE 01                  899 	.db #0x01	; 1
   00AF 01                  900 	.db #0x01	; 1
   00B0 08                  901 	.db #0x08	; 8
   00B1 0A                  902 	.db #0x0A	; 10
   00B2 00                  903 	.db #0x00	; 0
   00B3 00                  904 	.db #0x00	; 0
   00B4 01                  905 	.db #0x01	; 1
   00B5 01                  906 	.db #0x01	; 1
   00B6 01                  907 	.db #0x01	; 1
   00B7 01                  908 	.db #0x01	; 1
   00B8 00                  909 	.db #0x00	; 0
   00B9                     910 _spr_player:
   00B9r00r00               911 	.dw _ss_pl_00
   00BBr00r00               912 	.dw _ss_pl_00
   00BDr00r00               913 	.dw _ss_pl_01
   00BFr00r00               914 	.dw _ss_pl_00
   00C1r00r00               915 	.dw _ss_pl_02
   00C3r00r00               916 	.dw _ss_pl_03
   00C5 00 00               917 	.dw #0x0000
   00C7 00 00               918 	.dw #0x0000
   00C9r00r00               919 	.dw _ss_pl_04
   00CBr00r00               920 	.dw _ss_pl_04
   00CDr00r00               921 	.dw _ss_pl_06
   00CFr00r00               922 	.dw _ss_pl_04
   00D1r00r00               923 	.dw _ss_pl_05
   00D3r00r00               924 	.dw _ss_pl_07
   00D5 00 00               925 	.dw #0x0000
   00D7 00 00               926 	.dw #0x0000
   00D9                     927 _spr_enems0:
   00D9r00r00               928 	.dw _ss_en_0_00
   00DBr00r00               929 	.dw _ss_en_0_01
   00DD 00 00               930 	.dw #0x0000
   00DF 00 00               931 	.dw #0x0000
   00E1r00r00               932 	.dw _ss_en_0_02
   00E3r00r00               933 	.dw _ss_en_0_03
   00E5 00 00               934 	.dw #0x0000
   00E7 00 00               935 	.dw #0x0000
   00E9r00r00               936 	.dw _ss_en_0_04
   00EBr00r00               937 	.dw _ss_en_0_05
   00ED 00 00               938 	.dw #0x0000
   00EF 00 00               939 	.dw #0x0000
   00F1r00r00               940 	.dw _ss_en_0_06
   00F3r00r00               941 	.dw _ss_en_0_07
   00F5 00 00               942 	.dw #0x0000
   00F7 00 00               943 	.dw #0x0000
   00F9r00r00               944 	.dw _ss_en_0_08
   00FBr00r00               945 	.dw _ss_en_0_09
   00FD 00 00               946 	.dw #0x0000
   00FF 00 00               947 	.dw #0x0000
   0101r00r00               948 	.dw _ss_en_0_0a
   0103r00r00               949 	.dw _ss_en_0_0b
   0105 00 00               950 	.dw #0x0000
   0107 00 00               951 	.dw #0x0000
   0109r00r00               952 	.dw _ss_plat_00
   010Br00r00               953 	.dw _ss_plat_01
   010D 00 00               954 	.dw #0x0000
   010F 00 00               955 	.dw #0x0000
   0111r00r00               956 	.dw _ss_plat_00
   0113r00r00               957 	.dw _ss_plat_01
   0115 00 00               958 	.dw #0x0000
   0117 00 00               959 	.dw #0x0000
   0119r00r00               960 	.dw _ss_fanty_00
   011Br00r00               961 	.dw _ss_fanty_01
   011D 00 00               962 	.dw #0x0000
   011F 00 00               963 	.dw #0x0000
   0121r00r00               964 	.dw _ss_fanty_02
   0123r00r00               965 	.dw _ss_fanty_03
   0125 00 00               966 	.dw #0x0000
   0127 00 00               967 	.dw #0x0000
   0129r00r00               968 	.dw _ss_it_04
   012B                     969 _spr_enems1:
   012Br00r00               970 	.dw _ss_en_1_00
   012Dr00r00               971 	.dw _ss_en_1_01
   012F 00 00               972 	.dw #0x0000
   0131 00 00               973 	.dw #0x0000
   0133r00r00               974 	.dw _ss_en_1_02
   0135r00r00               975 	.dw _ss_en_1_03
   0137 00 00               976 	.dw #0x0000
   0139 00 00               977 	.dw #0x0000
   013Br00r00               978 	.dw _ss_en_1_04
   013Dr00r00               979 	.dw _ss_en_1_05
   013F 00 00               980 	.dw #0x0000
   0141 00 00               981 	.dw #0x0000
   0143r00r00               982 	.dw _ss_en_1_06
   0145r00r00               983 	.dw _ss_en_1_07
   0147 00 00               984 	.dw #0x0000
   0149 00 00               985 	.dw #0x0000
   014Br00r00               986 	.dw _ss_en_1_08
   014Dr00r00               987 	.dw _ss_en_1_09
   014F 00 00               988 	.dw #0x0000
   0151 00 00               989 	.dw #0x0000
   0153r00r00               990 	.dw _ss_en_1_0a
   0155r00r00               991 	.dw _ss_en_1_0b
   0157 00 00               992 	.dw #0x0000
   0159 00 00               993 	.dw #0x0000
   015Br00r00               994 	.dw _ss_plat_00
   015Dr00r00               995 	.dw _ss_plat_01
   015F 00 00               996 	.dw #0x0000
   0161 00 00               997 	.dw #0x0000
   0163r00r00               998 	.dw _ss_plat_00
   0165r00r00               999 	.dw _ss_plat_01
   0167 00 00              1000 	.dw #0x0000
   0169 00 00              1001 	.dw #0x0000
   016Br00r00              1002 	.dw _ss_fanty_00
   016Dr00r00              1003 	.dw _ss_fanty_01
   016F 00 00              1004 	.dw #0x0000
   0171 00 00              1005 	.dw #0x0000
   0173r00r00              1006 	.dw _ss_fanty_02
   0175r00r00              1007 	.dw _ss_fanty_03
   0177 00 00              1008 	.dw #0x0000
   0179 00 00              1009 	.dw #0x0000
   017Br00r00              1010 	.dw _ss_it_04
   017D                    1011 _spr_enems2:
   017Dr00r00              1012 	.dw _ss_en_2_00
   017Fr00r00              1013 	.dw _ss_en_2_01
   0181 00 00              1014 	.dw #0x0000
   0183 00 00              1015 	.dw #0x0000
   0185r00r00              1016 	.dw _ss_en_2_02
   0187r00r00              1017 	.dw _ss_en_2_03
   0189 00 00              1018 	.dw #0x0000
   018B 00 00              1019 	.dw #0x0000
   018Dr00r00              1020 	.dw _ss_en_2_04
   018Fr00r00              1021 	.dw _ss_en_2_05
   0191 00 00              1022 	.dw #0x0000
   0193 00 00              1023 	.dw #0x0000
   0195r00r00              1024 	.dw _ss_en_2_06
   0197r00r00              1025 	.dw _ss_en_2_07
   0199 00 00              1026 	.dw #0x0000
   019B 00 00              1027 	.dw #0x0000
   019Dr00r00              1028 	.dw _ss_en_2_08
   019Fr00r00              1029 	.dw _ss_en_2_09
   01A1 00 00              1030 	.dw #0x0000
   01A3 00 00              1031 	.dw #0x0000
   01A5r00r00              1032 	.dw _ss_en_2_08
   01A7r00r00              1033 	.dw _ss_en_2_09
   01A9 00 00              1034 	.dw #0x0000
   01AB 00 00              1035 	.dw #0x0000
   01ADr00r00              1036 	.dw _ss_plat_00
   01AFr00r00              1037 	.dw _ss_plat_01
   01B1 00 00              1038 	.dw #0x0000
   01B3 00 00              1039 	.dw #0x0000
   01B5r00r00              1040 	.dw _ss_plat_00
   01B7r00r00              1041 	.dw _ss_plat_01
   01B9 00 00              1042 	.dw #0x0000
   01BB 00 00              1043 	.dw #0x0000
   01BDr00r00              1044 	.dw _ss_fanty_00
   01BFr00r00              1045 	.dw _ss_fanty_01
   01C1 00 00              1046 	.dw #0x0000
   01C3 00 00              1047 	.dw #0x0000
   01C5r00r00              1048 	.dw _ss_fanty_02
   01C7r00r00              1049 	.dw _ss_fanty_03
   01C9 00 00              1050 	.dw #0x0000
   01CB 00 00              1051 	.dw #0x0000
   01CDr00r00              1052 	.dw _ss_it_04
   01CF                    1053 _spr_hs:
   01CF 00 00              1054 	.dw #0x0000
   01D1 00 00              1055 	.dw #0x0000
   01D3r00r00              1056 	.dw _ss_it_01
   01D5r00r00              1057 	.dw _ss_it_00
   01D7r00r00              1058 	.dw _ss_it_02
   01D9r00r00              1059 	.dw _ss_it_03
   01DB                    1060 _l_scr_ini:
   01DB 14                 1061 	.db #0x14	; 20
   01DC 14                 1062 	.db #0x14	; 20
   01DD 08                 1063 	.db #0x08	; 8
   01DE                    1064 _l_ini_x:
   01DE 02                 1065 	.db #0x02	; 2
   01DF 02                 1066 	.db #0x02	; 2
   01E0 02                 1067 	.db #0x02	; 2
   01E1                    1068 _l_ini_y:
   01E1 07                 1069 	.db #0x07	; 7
   01E2 0A                 1070 	.db #0x0A	; 10
   01E3 03                 1071 	.db #0x03	; 3
   01E4                    1072 _l_map_w:
   01E4 04                 1073 	.db #0x04	; 4
   01E5 04                 1074 	.db #0x04	; 4
   01E6 08                 1075 	.db #0x08	; 8
   01E7                    1076 _l_map_h:
   01E7 06                 1077 	.db #0x06	; 6
   01E8 06                 1078 	.db #0x06	; 6
   01E9 03                 1079 	.db #0x03	; 3
   01EA                    1080 _l_player_max_objects:
   01EA 00                 1081 	.db #0x00	; 0
   01EB 00                 1082 	.db #0x00	; 0
   01EC 00                 1083 	.db #0x00	; 0
   01ED                    1084 _l_player_max_enems:
   01ED 36                 1085 	.db #0x36	; 54	'6'
   01EE 31                 1086 	.db #0x31	; 49	'1'
   01EF 2E                 1087 	.db #0x2E	; 46
   01F0                    1088 _l_ts_patterns:
   01F0r00r00              1089 	.dw _ts0_patterns_c
   01F2r00r00              1090 	.dw _ts1_patterns_c
   01F4r00r00              1091 	.dw _ts2_patterns_c
   01F6                    1092 _l_ts_colours:
   01F6r00r00              1093 	.dw _ts0_colours_c
   01F8r00r00              1094 	.dw _ts1_colours_c
   01FAr00r00              1095 	.dw _ts2_colours_c
   01FC                    1096 _l_ts_tmaps:
   01FCr00r00              1097 	.dw _ts0_tmaps
   01FEr00r00              1098 	.dw _ts1_tmaps
   0200r00r00              1099 	.dw _ts2_tmaps
   0202                    1100 _l_behs:
   0202r52r00              1101 	.dw _behs0
   0204r72r00              1102 	.dw _behs1
   0206r92r00              1103 	.dw _behs2
   0208                    1104 _l_spr_patterns:
   0208r00r00              1105 	.dw _ss_en_0_patterns_c
   020Ar00r00              1106 	.dw _ss_en_1_patterns_c
   020Cr00r00              1107 	.dw _ss_en_2_patterns_c
   020E                    1108 _l_spr_enems:
   020ErD9r00              1109 	.dw _spr_enems0
   0210r2Br01              1110 	.dw _spr_enems1
   0212r7Dr01              1111 	.dw _spr_enems2
   0214                    1112 _l_map:
   0214r00r00              1113 	.dw _map_0
   0216r00r00              1114 	.dw _map_1
   0218r00r00              1115 	.dw _map_2
   021A                    1116 _l_decos:
   021A 00                 1117 	.db #0x00	; 0
   021B 01                 1118 	.db #0x01	; 1
   021C 01                 1119 	.db #0x01	; 1
   021D                    1120 _l_locks:
   021Dr00r00              1121 	.dw _map_0_locks
   021Fr00r00              1122 	.dw _map_1_locks
   0221r00r00              1123 	.dw _map_2_locks
   0223                    1124 _l_n_bolts:
   0223 02                 1125 	.db #0x02	; 2
   0224 01                 1126 	.db #0x01	; 1
   0225 02                 1127 	.db #0x02	; 2
   0226                    1128 _l_enems:
   0226r00r00              1129 	.dw _enems_0
   0228r00r00              1130 	.dw _enems_1
   022Ar00r00              1131 	.dw _enems_2
   022C                    1132 _l_hotspots:
   022Cr00r00              1133 	.dw _hotspots_0
   022Er00r00              1134 	.dw _hotspots_1
   0230r00r00              1135 	.dw _hotspots_2
   0232                    1136 _l_music:
   0232r00r00              1137 	.dw _m_yun_psg
   0234r00r00              1138 	.dw _m_yun_psg
   0236r00r00              1139 	.dw _m_yun_psg
                           1140 ;engine/hotspots.h:20: void hotspots_paint (void) {
                           1141 ;	---------------------------------
                           1142 ; Function hotspots_paint
                           1143 ; ---------------------------------
   0238                    1144 _hotspots_paint::
                           1145 ;engine/hotspots.h:30: rda = hrt;
   0238 3Ar7Cr00      [13] 1146 	ld	a,(#_hrt + 0)
   023B 32r18r00      [13] 1147 	ld	(#_rda + 0),a
                           1148 ;engine/hotspots.h:33: if (hrt == HOTSPOT_TYPE_RESONATOR && res_on) rda = HOTSPOT_TYPE_RESONATOR_ON;
   023E 3Ar7Cr00      [13] 1149 	ld	a,(#_hrt + 0)
   0241 D6 04         [ 7] 1150 	sub	a, #0x04
   0243 20 0B         [12] 1151 	jr	NZ,00102$
   0245 3ArB1r02      [13] 1152 	ld	a,(#_res_on + 0)
   0248 B7            [ 4] 1153 	or	a, a
   0249 28 05         [12] 1154 	jr	Z,00102$
   024B 21r18r00      [10] 1155 	ld	hl,#_rda + 0
   024E 36 05         [10] 1156 	ld	(hl), #0x05
   0250                    1157 00102$:
                           1158 ;engine/hotspots.h:38: spr_hs [rda]
   0250 11rCFr01      [10] 1159 	ld	de,#_spr_hs+0
   0253 FD 21r18r00   [14] 1160 	ld	iy,#_rda
   0257 FD 6E 00      [19] 1161 	ld	l,0 (iy)
   025A 26 00         [ 7] 1162 	ld	h,#0x00
   025C 29            [11] 1163 	add	hl, hl
   025D 19            [11] 1164 	add	hl,de
   025E 5E            [ 7] 1165 	ld	e,(hl)
   025F 23            [ 6] 1166 	inc	hl
   0260 56            [ 7] 1167 	ld	d,(hl)
                           1168 ;engine/hotspots.h:37: hrx, hry + SPRITE_ADJUST, 
   0261 3Ar7Br00      [13] 1169 	ld	a,(#_hry + 0)
   0264 C6 F7         [ 7] 1170 	add	a, #0xF7
   0266 67            [ 4] 1171 	ld	h,a
   0267 D5            [11] 1172 	push	de
   0268 E5            [11] 1173 	push	hl
   0269 33            [ 6] 1174 	inc	sp
   026A 3Ar7Ar00      [13] 1175 	ld	a,(_hrx)
   026D F5            [11] 1176 	push	af
   026E 33            [ 6] 1177 	inc	sp
   026F CDr00r00      [17] 1178 	call	_SG_addMetaSprite1x1
   0272 F1            [10] 1179 	pop	af
   0273 F1            [10] 1180 	pop	af
   0274 C9            [10] 1181 	ret
                           1182 ;engine/hotspots.h:42: void hotspots_create (void) {
                           1183 ;	---------------------------------
                           1184 ; Function hotspots_create
                           1185 ; ---------------------------------
   0275                    1186 _hotspots_create::
                           1187 ;engine/hotspots.h:54: gp_gen = (unsigned char *) (c_hotspots + (n_pant << 1));
   0275 FD 21rBAr01   [14] 1188 	ld	iy,#_n_pant
   0279 FD 6E 00      [19] 1189 	ld	l,0 (iy)
   027C 26 00         [ 7] 1190 	ld	h,#0x00
   027E 29            [11] 1191 	add	hl, hl
   027F 55            [ 4] 1192 	ld	d,l
   0280 5C            [ 4] 1193 	ld	e,h
   0281 21r0Cr00      [10] 1194 	ld	hl,#_gp_gen
   0284 3Ar8Fr00      [13] 1195 	ld	a,(#_c_hotspots + 0)
   0287 82            [ 4] 1196 	add	a, d
   0288 77            [ 7] 1197 	ld	(hl),a
   0289 3Ar90r00      [13] 1198 	ld	a,(#_c_hotspots + 1)
   028C 8B            [ 4] 1199 	adc	a, e
   028D 23            [ 6] 1200 	inc	hl
   028E 77            [ 7] 1201 	ld	(hl),a
                           1202 ;engine/hotspots.h:55: hrt = *gp_gen ++; rda = *gp_gen; 
   028F 2Ar0Cr00      [16] 1203 	ld	hl,(_gp_gen)
   0292 7E            [ 7] 1204 	ld	a,(hl)
   0293 32r7Cr00      [13] 1205 	ld	(#_hrt + 0),a
   0296 21r0Cr00      [10] 1206 	ld	hl, #_gp_gen+0
   0299 34            [11] 1207 	inc	(hl)
   029A 20 04         [12] 1208 	jr	NZ,00115$
   029C 21r0Dr00      [10] 1209 	ld	hl, #_gp_gen+1
   029F 34            [11] 1210 	inc	(hl)
   02A0                    1211 00115$:
   02A0 2Ar0Cr00      [16] 1212 	ld	hl,(_gp_gen)
   02A3 7E            [ 7] 1213 	ld	a,(hl)
   02A4 32r18r00      [13] 1214 	ld	(#_rda + 0),a
                           1215 ;engine/hotspots.h:56: if (hrt && hact [n_pant]) {
   02A7 3Ar7Cr00      [13] 1216 	ld	a,(#_hrt + 0)
   02AA B7            [ 4] 1217 	or	a, a
   02AB 28 22         [12] 1218 	jr	Z,00102$
   02AD 11rCCr01      [10] 1219 	ld	de,#_hact+0
   02B0 2ArBAr01      [16] 1220 	ld	hl,(_n_pant)
   02B3 26 00         [ 7] 1221 	ld	h,#0x00
   02B5 19            [11] 1222 	add	hl,de
   02B6 7E            [ 7] 1223 	ld	a,(hl)
   02B7 B7            [ 4] 1224 	or	a, a
   02B8 28 15         [12] 1225 	jr	Z,00102$
                           1226 ;engine/hotspots.h:57: hry = rda & 0xf0; hrx = rda << 4;
   02BA 3Ar18r00      [13] 1227 	ld	a,(#_rda + 0)
   02BD E6 F0         [ 7] 1228 	and	a, #0xF0
   02BF 32r7Br00      [13] 1229 	ld	(#_hry + 0),a
   02C2 3Ar18r00      [13] 1230 	ld	a,(#_rda + 0)
   02C5 07            [ 4] 1231 	rlca
   02C6 07            [ 4] 1232 	rlca
   02C7 07            [ 4] 1233 	rlca
   02C8 07            [ 4] 1234 	rlca
   02C9 E6 F0         [ 7] 1235 	and	a,#0xF0
   02CB 32r7Ar00      [13] 1236 	ld	(#_hrx + 0),a
   02CE C9            [10] 1237 	ret
   02CF                    1238 00102$:
                           1239 ;engine/hotspots.h:58: } else hrt = 0;
   02CF 21r7Cr00      [10] 1240 	ld	hl,#_hrt + 0
   02D2 36 00         [10] 1241 	ld	(hl), #0x00
   02D4 C9            [10] 1242 	ret
                           1243 ;engine/../my/game_frame.h:7: void draw_game_frame (void) {
                           1244 ;	---------------------------------
                           1245 ; Function draw_game_frame
                           1246 ; ---------------------------------
   02D5                    1247 _draw_game_frame::
                           1248 ;engine/../my/game_frame.h:8: gp_gen = hud_rle; unrle ();
   02D5 21r00r00      [10] 1249 	ld	hl,#_hud_rle+0
   02D8 22r0Cr00      [16] 1250 	ld	(_gp_gen),hl
   02DB C3r00r00      [10] 1251 	jp  _unrle
                           1252 ;engine/frame.h:9: void hud_update (void) {
                           1253 ;	---------------------------------
                           1254 ; Function hud_update
                           1255 ; ---------------------------------
   02DE                    1256 _hud_update::
                           1257 ;engine/frame.h:12: if (okilled != pkilled) {
   02DE 3ArC8r01      [13] 1258 	ld	a,(#_okilled + 0)
   02E1 FD 21r73r00   [14] 1259 	ld	iy,#_pkilled
   02E5 FD 96 00      [19] 1260 	sub	a, 0 (iy)
   02E8 28 24         [12] 1261 	jr	Z,00102$
                           1262 ;engine/frame.h:13: okilled = pkilled;
   02EA 3Ar73r00      [13] 1263 	ld	a,(#_pkilled + 0)
   02ED 32rC8r01      [13] 1264 	ld	(#_okilled + 0),a
                           1265 ;engine/frame.h:14: _x = KILLED_X; _y = KILLED_Y; _n = c_max_enems - pkilled; p_t ();
   02F0 21r00r00      [10] 1266 	ld	hl,#__x + 0
   02F3 36 15         [10] 1267 	ld	(hl), #0x15
   02F5 21r01r00      [10] 1268 	ld	hl,#__y + 0
   02F8 36 01         [10] 1269 	ld	(hl), #0x01
   02FA 21r73r00      [10] 1270 	ld	hl,#_pkilled
   02FD D5            [11] 1271 	push	de
   02FE FD 21r02r00   [14] 1272 	ld	iy,#__n
   0302 FD E5         [15] 1273 	push	iy
   0304 D1            [10] 1274 	pop	de
   0305 3ArB9r01      [13] 1275 	ld	a,(#_c_max_enems + 0)
   0308 96            [ 7] 1276 	sub	a, (hl)
   0309 12            [ 7] 1277 	ld	(de),a
   030A D1            [10] 1278 	pop	de
   030B CDr00r00      [17] 1279 	call	_p_t
   030E                    1280 00102$:
                           1281 ;engine/frame.h:32: if (okeys != pkeys) {
   030E 3ArC5r01      [13] 1282 	ld	a,(#_okeys + 0)
   0311 FD 21r70r00   [14] 1283 	ld	iy,#_pkeys
   0315 FD 96 00      [19] 1284 	sub	a, 0 (iy)
   0318 28 19         [12] 1285 	jr	Z,00104$
                           1286 ;engine/frame.h:33: okeys = pkeys;
   031A 21r70r00      [10] 1287 	ld	hl,#_pkeys + 0
   031D 56            [ 7] 1288 	ld	d, (hl)
   031E 21rC5r01      [10] 1289 	ld	hl,#_okeys + 0
   0321 72            [ 7] 1290 	ld	(hl), d
                           1291 ;engine/frame.h:34: _x = KEYS_X; _y = KEYS_Y; _n = pkeys; p_t ();
   0322 21r00r00      [10] 1292 	ld	hl,#__x + 0
   0325 36 0C         [10] 1293 	ld	(hl), #0x0C
   0327 21r01r00      [10] 1294 	ld	hl,#__y + 0
   032A 36 01         [10] 1295 	ld	(hl), #0x01
   032C 21r02r00      [10] 1296 	ld	hl,#__n + 0
   032F 72            [ 7] 1297 	ld	(hl), d
   0330 CDr00r00      [17] 1298 	call	_p_t
   0333                    1299 00104$:
                           1300 ;engine/frame.h:39: if (olife != plife) {
   0333 3ArC4r01      [13] 1301 	ld	a,(#_olife + 0)
   0336 FD 21r6Fr00   [14] 1302 	ld	iy,#_plife
   033A FD 96 00      [19] 1303 	sub	a, 0 (iy)
   033D C8            [11] 1304 	ret	Z
                           1305 ;engine/frame.h:40: olife = plife;
   033E 21r6Fr00      [10] 1306 	ld	hl,#_plife + 0
   0341 56            [ 7] 1307 	ld	d, (hl)
   0342 21rC4r01      [10] 1308 	ld	hl,#_olife + 0
   0345 72            [ 7] 1309 	ld	(hl), d
                           1310 ;engine/frame.h:41: _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
   0346 21r00r00      [10] 1311 	ld	hl,#__x + 0
   0349 36 04         [10] 1312 	ld	(hl), #0x04
   034B 21r01r00      [10] 1313 	ld	hl,#__y + 0
   034E 36 01         [10] 1314 	ld	(hl), #0x01
   0350 21r02r00      [10] 1315 	ld	hl,#__n + 0
   0353 72            [ 7] 1316 	ld	(hl), d
   0354 C3r00r00      [10] 1317 	jp  _p_t
                           1318 ;my/pres.h:6: void bat_in (void) {
                           1319 ;	---------------------------------
                           1320 ; Function bat_in
                           1321 ; ---------------------------------
   0357                    1322 _bat_in::
                           1323 ;my/pres.h:7: SG_displayOn ();
   0357 21 40 01      [10] 1324 	ld	hl,#0x0140
   035A E5            [11] 1325 	push	hl
   035B CDr00r00      [17] 1326 	call	_SG_VDPturnOnFeature
   035E F1            [10] 1327 	pop	af
                           1328 ;my/pres.h:8: while (SG_getKeysStatus ());
   035F                    1329 00101$:
   035F CDr00r00      [17] 1330 	call	_SG_getKeysStatus
   0362 7C            [ 4] 1331 	ld	a,h
   0363 B5            [ 4] 1332 	or	a,l
   0364 20 F9         [12] 1333 	jr	NZ,00101$
   0366 C9            [10] 1334 	ret
                           1335 ;my/pres.h:11: void bat_out (void) {
                           1336 ;	---------------------------------
                           1337 ; Function bat_out
                           1338 ; ---------------------------------
   0367                    1339 _bat_out::
                           1340 ;my/pres.h:12: PSGStop ();
   0367 CDr00r00      [17] 1341 	call	_PSGStop
                           1342 ;my/pres.h:13: SG_displayOff ();
   036A 21 40 01      [10] 1343 	ld	hl,#0x0140
   036D E5            [11] 1344 	push	hl
   036E CDr00r00      [17] 1345 	call	_SG_VDPturnOffFeature
   0371 F1            [10] 1346 	pop	af
                           1347 ;my/pres.h:14: SG_initSprites ();
   0372 CDr00r00      [17] 1348 	call	_SG_initSprites
                           1349 ;my/pres.h:15: SG_copySpritestoSAT ();	
   0375 C3r00r00      [10] 1350 	jp  _SG_copySpritestoSAT
                           1351 ;my/pres.h:18: void pres (void (*func) (void), unsigned char *music) {
                           1352 ;	---------------------------------
                           1353 ; Function pres
                           1354 ; ---------------------------------
   0378                    1355 _pres::
                           1356 ;my/pres.h:19: cls ();
   0378 CDr00r00      [17] 1357 	call	_cls
                           1358 ;my/pres.h:20: (*func) ();
   037B C1            [10] 1359 	pop	bc
   037C E1            [10] 1360 	pop	hl
   037D E5            [11] 1361 	push	hl
   037E C5            [11] 1362 	push	bc
   037F CDr00r00      [17] 1363 	call	___sdcc_call_hl
                           1364 ;my/pres.h:21: bat_in ();
   0382 CDr57r03      [17] 1365 	call	_bat_in
                           1366 ;my/pres.h:22: if (music) PSGPlay (music);
   0385 FD 21 04 00   [14] 1367 	ld	iy,#4
   0389 FD 39         [15] 1368 	add	iy,sp
   038B FD 7E 01      [19] 1369 	ld	a,1 (iy)
   038E FD B6 00      [19] 1370 	or	a,0 (iy)
   0391 28 0B         [12] 1371 	jr	Z,00106$
   0393 FD 6E 00      [19] 1372 	ld	l,0 (iy)
   0396 FD 66 01      [19] 1373 	ld	h,1 (iy)
   0399 E5            [11] 1374 	push	hl
   039A CDr00r00      [17] 1375 	call	_PSGPlay
   039D F1            [10] 1376 	pop	af
                           1377 ;my/pres.h:23: while (1) {
   039E                    1378 00106$:
                           1379 ;my/pres.h:24: pad_read ();
   039E CDr00r00      [17] 1380 	call	_pad_read
                           1381 ;my/pres.h:25: if (pad_this_frame & (PAD_A|PAD_B|PAD_START)) break;
   03A1 3Ar06r00      [13] 1382 	ld	a,(#_pad_this_frame + 0)
   03A4 E6 30         [ 7] 1383 	and	a, #0x30
   03A6 28 F6         [12] 1384 	jr	Z,00106$
                           1385 ;my/pres.h:27: bat_out ();
   03A8 C3r67r03      [10] 1386 	jp  _bat_out
                           1387 ;my/pres.h:30: void title (void) {
                           1388 ;	---------------------------------
                           1389 ; Function title
                           1390 ; ---------------------------------
   03AB                    1391 _title::
                           1392 ;my/pres.h:31: unpack_bg_patterns (tstitle_patterns_c, tstitle_colours_c, 64*8, 7);
   03AB 11r00r00      [10] 1393 	ld	de,#_tstitle_patterns_c
   03AE 3E 07         [ 7] 1394 	ld	a,#0x07
   03B0 F5            [11] 1395 	push	af
   03B1 33            [ 6] 1396 	inc	sp
   03B2 21 00 02      [10] 1397 	ld	hl,#0x0200
   03B5 E5            [11] 1398 	push	hl
   03B6 21r00r00      [10] 1399 	ld	hl,#_tstitle_colours_c
   03B9 E5            [11] 1400 	push	hl
   03BA D5            [11] 1401 	push	de
   03BB CDr00r00      [17] 1402 	call	_unpack_bg_patterns
   03BE 21 07 00      [10] 1403 	ld	hl,#7
   03C1 39            [11] 1404 	add	hl,sp
   03C2 F9            [ 6] 1405 	ld	sp,hl
                           1406 ;my/pres.h:32: gp_gen = title_rle; unrle ();
   03C3 21r00r00      [10] 1407 	ld	hl,#_title_rle+0
   03C6 22r0Cr00      [16] 1408 	ld	(_gp_gen),hl
   03C9 CDr00r00      [17] 1409 	call	_unrle
                           1410 ;my/pres.h:34: _x = 7; _y = 12; pr_str ("SELECT AND PUSH 1!");
   03CC 21r00r00      [10] 1411 	ld	hl,#__x + 0
   03CF 36 07         [10] 1412 	ld	(hl), #0x07
   03D1 21r01r00      [10] 1413 	ld	hl,#__y + 0
   03D4 36 0C         [10] 1414 	ld	(hl), #0x0C
   03D6 21rB4r04      [10] 1415 	ld	hl,#___str_0
   03D9 E5            [11] 1416 	push	hl
   03DA CDr00r00      [17] 1417 	call	_pr_str
   03DD F1            [10] 1418 	pop	af
                           1419 ;my/pres.h:36: _x = 12; _y = 16; pr_str ("RESONATORS");
   03DE 21r00r00      [10] 1420 	ld	hl,#__x + 0
   03E1 36 0C         [10] 1421 	ld	(hl), #0x0C
   03E3 21r01r00      [10] 1422 	ld	hl,#__y + 0
   03E6 36 10         [10] 1423 	ld	(hl), #0x10
   03E8 21rC7r04      [10] 1424 	ld	hl,#___str_1
   03EB E5            [11] 1425 	push	hl
   03EC CDr00r00      [17] 1426 	call	_pr_str
   03EF F1            [10] 1427 	pop	af
                           1428 ;my/pres.h:37: _y = 18; pr_str ("EASY MODE");
   03F0 21r01r00      [10] 1429 	ld	hl,#__y + 0
   03F3 36 12         [10] 1430 	ld	(hl), #0x12
   03F5 21rD2r04      [10] 1431 	ld	hl,#___str_2
   03F8 E5            [11] 1432 	push	hl
   03F9 CDr00r00      [17] 1433 	call	_pr_str
   03FC F1            [10] 1434 	pop	af
                           1435 ;my/pres.h:39: _x = 5; _y = 23; pr_str ("@ 2018 THE MOJON TWINS");
   03FD 21r00r00      [10] 1436 	ld	hl,#__x + 0
   0400 36 05         [10] 1437 	ld	(hl), #0x05
   0402 21r01r00      [10] 1438 	ld	hl,#__y + 0
   0405 36 17         [10] 1439 	ld	(hl), #0x17
   0407 21rDCr04      [10] 1440 	ld	hl,#___str_3
   040A E5            [11] 1441 	push	hl
   040B CDr00r00      [17] 1442 	call	_pr_str
   040E F1            [10] 1443 	pop	af
                           1444 ;my/pres.h:41: bat_in ();
   040F CDr57r03      [17] 1445 	call	_bat_in
                           1446 ;my/pres.h:43: PSGPlay (MUSIC_TITLE);
   0412 21r00r00      [10] 1447 	ld	hl,#_m_title_psg
   0415 E5            [11] 1448 	push	hl
   0416 CDr00r00      [17] 1449 	call	_PSGPlay
   0419 F1            [10] 1450 	pop	af
                           1451 ;my/pres.h:44: while (1) {
   041A                    1452 00115$:
                           1453 ;my/pres.h:45: update_cycle ();
   041A CDr00r00      [17] 1454 	call	_update_cycle
                           1455 ;my/pres.h:46: SG_addMetaSprite1x1 (82, 122 + (mode_no_resonators << 4), ss_pl_00);
   041D 21r00r00      [10] 1456 	ld	hl,#_ss_pl_00
   0420 3ArB7r02      [13] 1457 	ld	a,(#_mode_no_resonators + 0)
   0423 07            [ 4] 1458 	rlca
   0424 07            [ 4] 1459 	rlca
   0425 07            [ 4] 1460 	rlca
   0426 07            [ 4] 1461 	rlca
   0427 E6 F0         [ 7] 1462 	and	a,#0xF0
   0429 C6 7A         [ 7] 1463 	add	a, #0x7A
   042B E5            [11] 1464 	push	hl
   042C 57            [ 4] 1465 	ld	d,a
   042D 1E 52         [ 7] 1466 	ld	e,#0x52
   042F D5            [11] 1467 	push	de
   0430 CDr00r00      [17] 1468 	call	_SG_addMetaSprite1x1
   0433 F1            [10] 1469 	pop	af
   0434 F1            [10] 1470 	pop	af
                           1471 ;my/pres.h:47: pad_read ();
   0435 CDr00r00      [17] 1472 	call	_pad_read
                           1473 ;my/pres.h:48: rda = mode_no_resonators;
   0438 3ArB7r02      [13] 1474 	ld	a,(#_mode_no_resonators + 0)
   043B 32r18r00      [13] 1475 	ld	(#_rda + 0),a
                           1476 ;my/pres.h:49: if (pad_this_frame & PAD_DOWN) {
   043E 21r06r00      [10] 1477 	ld	hl,#_pad_this_frame+0
   0441 CB 4E         [12] 1478 	bit	1, (hl)
   0443 28 10         [12] 1479 	jr	Z,00104$
                           1480 ;my/pres.h:50: ++ mode_no_resonators; if (mode_no_resonators == 2) mode_no_resonators = 0;
   0445 21rB7r02      [10] 1481 	ld	hl, #_mode_no_resonators+0
   0448 34            [11] 1482 	inc	(hl)
   0449 3ArB7r02      [13] 1483 	ld	a,(#_mode_no_resonators + 0)
   044C D6 02         [ 7] 1484 	sub	a, #0x02
   044E 20 05         [12] 1485 	jr	NZ,00104$
   0450 21rB7r02      [10] 1486 	ld	hl,#_mode_no_resonators + 0
   0453 36 00         [10] 1487 	ld	(hl), #0x00
   0455                    1488 00104$:
                           1489 ;my/pres.h:52: if (pad_this_frame & PAD_UP) {
   0455 21r06r00      [10] 1490 	ld	hl,#_pad_this_frame+0
   0458 CB 46         [12] 1491 	bit	0, (hl)
   045A 28 11         [12] 1492 	jr	Z,00109$
                           1493 ;my/pres.h:53: if (mode_no_resonators) -- mode_no_resonators; else mode_no_resonators = 1;
   045C 3ArB7r02      [13] 1494 	ld	a,(#_mode_no_resonators + 0)
   045F B7            [ 4] 1495 	or	a, a
   0460 28 06         [12] 1496 	jr	Z,00106$
   0462 21rB7r02      [10] 1497 	ld	hl, #_mode_no_resonators+0
   0465 35            [11] 1498 	dec	(hl)
   0466 18 05         [12] 1499 	jr	00109$
   0468                    1500 00106$:
   0468 21rB7r02      [10] 1501 	ld	hl,#_mode_no_resonators + 0
   046B 36 01         [10] 1502 	ld	(hl), #0x01
   046D                    1503 00109$:
                           1504 ;my/pres.h:55: if (mode_no_resonators != rda) PSGSFXPlay (SFX_USE, 2);
   046D 3ArB7r02      [13] 1505 	ld	a,(#_mode_no_resonators + 0)
   0470 FD 21r18r00   [14] 1506 	ld	iy,#_rda
   0474 FD 96 00      [19] 1507 	sub	a, 0 (iy)
   0477 28 0D         [12] 1508 	jr	Z,00111$
   0479 11r00r00      [10] 1509 	ld	de,#_s_03_use3_psg
   047C 3E 02         [ 7] 1510 	ld	a,#0x02
   047E F5            [11] 1511 	push	af
   047F 33            [ 6] 1512 	inc	sp
   0480 D5            [11] 1513 	push	de
   0481 CDr00r00      [17] 1514 	call	_PSGSFXPlay
   0484 F1            [10] 1515 	pop	af
   0485 33            [ 6] 1516 	inc	sp
   0486                    1517 00111$:
                           1518 ;my/pres.h:56: if (pad_this_frame & PAD_1) break;
   0486 21r06r00      [10] 1519 	ld	hl,#_pad_this_frame+0
   0489 CB 66         [12] 1520 	bit	4, (hl)
   048B 28 8D         [12] 1521 	jr	Z,00115$
                           1522 ;my/pres.h:59: PSGSFXPlay (SFX_START, 1); delay (20);
   048D 11r00r00      [10] 1523 	ld	de,#_s_00_start2_psg+0
   0490 3E 01         [ 7] 1524 	ld	a,#0x01
   0492 F5            [11] 1525 	push	af
   0493 33            [ 6] 1526 	inc	sp
   0494 D5            [11] 1527 	push	de
   0495 CDr00r00      [17] 1528 	call	_PSGSFXPlay
   0498 F1            [10] 1529 	pop	af
   0499 33            [ 6] 1530 	inc	sp
   049A 3E 14         [ 7] 1531 	ld	a,#0x14
   049C F5            [11] 1532 	push	af
   049D 33            [ 6] 1533 	inc	sp
   049E CDr00r00      [17] 1534 	call	_delay
   04A1 33            [ 6] 1535 	inc	sp
                           1536 ;my/pres.h:61: plife = mode_no_resonators ? 5 : 3;
   04A2 3ArB7r02      [13] 1537 	ld	a,(#_mode_no_resonators + 0)
   04A5 B7            [ 4] 1538 	or	a, a
   04A6 28 04         [12] 1539 	jr	Z,00119$
   04A8 3E 05         [ 7] 1540 	ld	a,#0x05
   04AA 18 02         [12] 1541 	jr	00120$
   04AC                    1542 00119$:
   04AC 3E 03         [ 7] 1543 	ld	a,#0x03
   04AE                    1544 00120$:
   04AE 32r6Fr00      [13] 1545 	ld	(#_plife + 0),a
                           1546 ;my/pres.h:63: bat_out ();
   04B1 C3r67r03      [10] 1547 	jp  _bat_out
   04B4                    1548 ___str_0:
   04B4 53 45 4C 45 43 54  1549 	.ascii "SELECT AND PUSH 1!"
        20 41 4E 44 20 50
        55 53 48 20 31 21
   04C6 00                 1550 	.db 0x00
   04C7                    1551 ___str_1:
   04C7 52 45 53 4F 4E 41  1552 	.ascii "RESONATORS"
        54 4F 52 53
   04D1 00                 1553 	.db 0x00
   04D2                    1554 ___str_2:
   04D2 45 41 53 59 20 4D  1555 	.ascii "EASY MODE"
        4F 44 45
   04DB 00                 1556 	.db 0x00
   04DC                    1557 ___str_3:
   04DC 40 20 32 30 31 38  1558 	.ascii "@ 2018 THE MOJON TWINS"
        20 54 48 45 20 4D
        4F 4A 4F 4E 20 54
        57 49 4E 53
   04F2 00                 1559 	.db 0x00
                           1560 ;my/pres.h:66: void scr_game_over (void) {
                           1561 ;	---------------------------------
                           1562 ; Function scr_game_over
                           1563 ; ---------------------------------
   04F3                    1564 _scr_game_over::
                           1565 ;my/pres.h:67: _x = 11; _y = 15; pr_str ("GAME OVER!");
   04F3 21r00r00      [10] 1566 	ld	hl,#__x + 0
   04F6 36 0B         [10] 1567 	ld	(hl), #0x0B
   04F8 21r01r00      [10] 1568 	ld	hl,#__y + 0
   04FB 36 0F         [10] 1569 	ld	(hl), #0x0F
   04FD 21r06r05      [10] 1570 	ld	hl,#___str_4
   0500 E5            [11] 1571 	push	hl
   0501 CDr00r00      [17] 1572 	call	_pr_str
   0504 F1            [10] 1573 	pop	af
   0505 C9            [10] 1574 	ret
   0506                    1575 ___str_4:
   0506 47 41 4D 45 20 4F  1576 	.ascii "GAME OVER!"
        56 45 52 21
   0510 00                 1577 	.db 0x00
                           1578 ;my/pres.h:70: void scr_the_end (void) {
                           1579 ;	---------------------------------
                           1580 ; Function scr_the_end
                           1581 ; ---------------------------------
   0511                    1582 _scr_the_end::
                           1583 ;my/pres.h:71: unpack_bg_patterns (tsending_patterns_c, tsending_colours_c, 64*8, 7);
   0511 11r00r00      [10] 1584 	ld	de,#_tsending_patterns_c
   0514 3E 07         [ 7] 1585 	ld	a,#0x07
   0516 F5            [11] 1586 	push	af
   0517 33            [ 6] 1587 	inc	sp
   0518 21 00 02      [10] 1588 	ld	hl,#0x0200
   051B E5            [11] 1589 	push	hl
   051C 21r00r00      [10] 1590 	ld	hl,#_tsending_colours_c
   051F E5            [11] 1591 	push	hl
   0520 D5            [11] 1592 	push	de
   0521 CDr00r00      [17] 1593 	call	_unpack_bg_patterns
   0524 21 07 00      [10] 1594 	ld	hl,#7
   0527 39            [11] 1595 	add	hl,sp
   0528 F9            [ 6] 1596 	ld	sp,hl
                           1597 ;my/pres.h:72: gp_gen = ending_rle; unrle ();
   0529 21r00r00      [10] 1598 	ld	hl,#_ending_rle+0
   052C 22r0Cr00      [16] 1599 	ld	(_gp_gen),hl
   052F CDr00r00      [17] 1600 	call	_unrle
                           1601 ;my/pres.h:73: _x = 4; _y = 13; pr_str ("'CONGRATS, CHERIL'- SAID%%THE MAJOR -'YOU HAVE WON%%LA COPA DEL MEAO!', AND%%THEN CHERIL RETURNED TO%%THE FOREST . . .");
   0532 21r00r00      [10] 1602 	ld	hl,#__x + 0
   0535 36 04         [10] 1603 	ld	(hl), #0x04
   0537 21r01r00      [10] 1604 	ld	hl,#__y + 0
   053A 36 0D         [10] 1605 	ld	(hl), #0x0D
   053C 21r45r05      [10] 1606 	ld	hl,#___str_5
   053F E5            [11] 1607 	push	hl
   0540 CDr00r00      [17] 1608 	call	_pr_str
   0543 F1            [10] 1609 	pop	af
   0544 C9            [10] 1610 	ret
   0545                    1611 ___str_5:
   0545 27 43 4F 4E 47 52  1612 	.ascii "'CONGRATS, CHERIL'- SAID%%THE MAJOR -'YOU HAVE WON%%LA COPA "
        41 54 53 2C 20 43
        48 45 52 49 4C 27
        2D 20 53 41 49 44
        25 25 54 48 45 20
        4D 41 4A 4F 52 20
        2D 27 59 4F 55 20
        48 41 56 45 20 57
        4F 4E 25 25 4C 41
        20 43 4F 50 41 20
   0581 44 45 4C 20 4D 45  1613 	.ascii "DEL MEAO!', AND%%THEN CHERIL RETURNED TO%%THE FOREST . . ."
        41 4F 21 27 2C 20
        41 4E 44 25 25 54
        48 45 4E 20 43 48
        45 52 49 4C 20 52
        45 54 55 52 4E 45
        44 20 54 4F 25 25
        54 48 45 20 46 4F
        52 45 53 54 20 2E
        20 2E 20 2E
   05BB 00                 1614 	.db 0x00
                           1615 ;my/pres.h:81: void scr_level (void) {
                           1616 ;	---------------------------------
                           1617 ; Function scr_level
                           1618 ; ---------------------------------
   05BC                    1619 _scr_level::
                           1620 ;my/pres.h:82: _x = 12; _y = 14; pr_str ("LEVEL 0"); SG_setTile (17+level);
   05BC 21r00r00      [10] 1621 	ld	hl,#__x + 0
   05BF 36 0C         [10] 1622 	ld	(hl), #0x0C
   05C1 21r01r00      [10] 1623 	ld	hl,#__y + 0
   05C4 36 0E         [10] 1624 	ld	(hl), #0x0E
   05C6 21r23r06      [10] 1625 	ld	hl,#___str_6
   05C9 E5            [11] 1626 	push	hl
   05CA CDr00r00      [17] 1627 	call	_pr_str
   05CD F1            [10] 1628 	pop	af
   05CE 3ArB8r01      [13] 1629 	ld	a,(#_level + 0)
   05D1 C6 11         [ 7] 1630 	add	a, #0x11
   05D3 F5            [11] 1631 	push	af
   05D4 33            [ 6] 1632 	inc	sp
   05D5 CDr00r00      [17] 1633 	call	_SG_setTile
   05D8 33            [ 6] 1634 	inc	sp
                           1635 ;my/pres.h:83: _x = 10; _y = 16; pr_str (levelnames [level]);
   05D9 21r00r00      [10] 1636 	ld	hl,#__x + 0
   05DC 36 0A         [10] 1637 	ld	(hl), #0x0A
   05DE 21r01r00      [10] 1638 	ld	hl,#__y + 0
   05E1 36 10         [10] 1639 	ld	(hl), #0x10
   05E3 FD 21rB8r01   [14] 1640 	ld	iy,#_level
   05E7 FD 6E 00      [19] 1641 	ld	l,0 (iy)
   05EA 26 00         [ 7] 1642 	ld	h,#0x00
   05EC 29            [11] 1643 	add	hl, hl
   05ED 11r1Dr06      [10] 1644 	ld	de,#_levelnames
   05F0 19            [11] 1645 	add	hl,de
   05F1 5E            [ 7] 1646 	ld	e,(hl)
   05F2 23            [ 6] 1647 	inc	hl
   05F3 56            [ 7] 1648 	ld	d,(hl)
   05F4 D5            [11] 1649 	push	de
   05F5 CDr00r00      [17] 1650 	call	_pr_str
   05F8 F1            [10] 1651 	pop	af
   05F9 C9            [10] 1652 	ret
   05FA                    1653 _level0name:
   05FA 20 20 54 48 45 20  1654 	.ascii "  THE CITY"
        43 49 54 59
   0604 00                 1655 	.db 0x00
   0605                    1656 _level1name:
   0605 54 48 45 20 46 41  1657 	.ascii "THE FACTORY"
        43 54 4F 52 59
   0610 00                 1658 	.db 0x00
   0611                    1659 _level2name:
   0611 20 54 48 45 20 46  1660 	.ascii " THE FOREST"
        4F 52 45 53 54
   061C 00                 1661 	.db 0x00
   061D                    1662 _levelnames:
   061DrFAr05              1663 	.dw _level0name
   061Fr05r06              1664 	.dw _level1name
   0621r11r06              1665 	.dw _level2name
   0623                    1666 ___str_6:
   0623 4C 45 56 45 4C 20  1667 	.ascii "LEVEL 0"
        30
   062A 00                 1668 	.db 0x00
                           1669 ;my/pres.h:86: void credits (void) {
                           1670 ;	---------------------------------
                           1671 ; Function credits
                           1672 ; ---------------------------------
   062B                    1673 _credits::
                           1674 ;my/pres.h:87: cls ();
   062B CDr00r00      [17] 1675 	call	_cls
                           1676 ;my/pres.h:89: _x = 0; _y = 0; if (ntsc) pr_str ("NTSC"); else pr_str ("PAL");
   062E 21r00r00      [10] 1677 	ld	hl,#__x + 0
   0631 36 00         [10] 1678 	ld	(hl), #0x00
   0633 21r01r00      [10] 1679 	ld	hl,#__y + 0
   0636 36 00         [10] 1680 	ld	(hl), #0x00
   0638 3Ar92r00      [13] 1681 	ld	a,(#_ntsc + 0)
   063B B7            [ 4] 1682 	or	a, a
   063C 28 0A         [12] 1683 	jr	Z,00102$
   063E 21rA2r06      [10] 1684 	ld	hl,#___str_10
   0641 E5            [11] 1685 	push	hl
   0642 CDr00r00      [17] 1686 	call	_pr_str
   0645 F1            [10] 1687 	pop	af
   0646 18 08         [12] 1688 	jr	00103$
   0648                    1689 00102$:
   0648 21rA7r06      [10] 1690 	ld	hl,#___str_11
   064B E5            [11] 1691 	push	hl
   064C CDr00r00      [17] 1692 	call	_pr_str
   064F F1            [10] 1693 	pop	af
   0650                    1694 00103$:
                           1695 ;my/pres.h:91: rds16 = 0; rdy = 240;
   0650 21 00 00      [10] 1696 	ld	hl,#0x0000
   0653 22r0Ar00      [16] 1697 	ld	(_rds16),hl
   0656 21r15r00      [10] 1698 	ld	hl,#_rdy + 0
   0659 36 F0         [10] 1699 	ld	(hl), #0xF0
                           1700 ;my/pres.h:92: _x = 0; _y = 18; 
   065B 21r00r00      [10] 1701 	ld	hl,#__x + 0
   065E 36 00         [10] 1702 	ld	(hl), #0x00
   0660 21r01r00      [10] 1703 	ld	hl,#__y + 0
   0663 36 12         [10] 1704 	ld	(hl), #0x12
                           1705 ;my/pres.h:93: pr_str ("     CHERIL PERIL CLASSIC%%         ORIGINAL GAME%     @ 2011 THE MOJON TWINS%       REPROGRAMMED GAME%     @ 2018 THE MOJON TWINS");
   0665 21rABr06      [10] 1706 	ld	hl,#___str_12+0
   0668 E5            [11] 1707 	push	hl
   0669 CDr00r00      [17] 1708 	call	_pr_str
                           1709 ;my/pres.h:95: SG_displayOn ();
   066C 21 40 01      [10] 1710 	ld	hl, #0x0140
   066F E3            [19] 1711 	ex	(sp),hl
   0670 CDr00r00      [17] 1712 	call	_SG_VDPturnOnFeature
   0673 F1            [10] 1713 	pop	af
                           1714 ;my/pres.h:97: while (!(SG_getKeysStatus () & PAD_START) && rds16 < 300) {
   0674                    1715 00105$:
   0674 CDr00r00      [17] 1716 	call	_SG_getKeysStatus
   0677 CB 65         [ 8] 1717 	bit	4, l
   0679 20 1E         [12] 1718 	jr	NZ,00107$
   067B 3Ar0Ar00      [13] 1719 	ld	a,(#_rds16 + 0)
   067E D6 2C         [ 7] 1720 	sub	a, #0x2C
   0680 3Ar0Br00      [13] 1721 	ld	a,(#_rds16 + 1)
   0683 17            [ 4] 1722 	rla
   0684 3F            [ 4] 1723 	ccf
   0685 1F            [ 4] 1724 	rra
   0686 DE 81         [ 7] 1725 	sbc	a, #0x81
   0688 30 0F         [12] 1726 	jr	NC,00107$
                           1727 ;my/pres.h:100: update_cycle ();
   068A CDr00r00      [17] 1728 	call	_update_cycle
                           1729 ;my/pres.h:101: rds16 ++;
   068D 21r0Ar00      [10] 1730 	ld	hl, #_rds16+0
   0690 34            [11] 1731 	inc	(hl)
   0691 20 E1         [12] 1732 	jr	NZ,00105$
   0693 21r0Br00      [10] 1733 	ld	hl, #_rds16+1
   0696 34            [11] 1734 	inc	(hl)
   0697 18 DB         [12] 1735 	jr	00105$
   0699                    1736 00107$:
                           1737 ;my/pres.h:104: SG_displayOff ();
   0699 21 40 01      [10] 1738 	ld	hl,#0x0140
   069C E5            [11] 1739 	push	hl
   069D CDr00r00      [17] 1740 	call	_SG_VDPturnOffFeature
   06A0 F1            [10] 1741 	pop	af
   06A1 C9            [10] 1742 	ret
   06A2                    1743 ___str_10:
   06A2 4E 54 53 43        1744 	.ascii "NTSC"
   06A6 00                 1745 	.db 0x00
   06A7                    1746 ___str_11:
   06A7 50 41 4C           1747 	.ascii "PAL"
   06AA 00                 1748 	.db 0x00
   06AB                    1749 ___str_12:
   06AB 20 20 20 20 20 43  1750 	.ascii "     CHERIL PERIL CLASSIC%%         ORIGINAL GAME%     @ 201"
        48 45 52 49 4C 20
        50 45 52 49 4C 20
        43 4C 41 53 53 49
        43 25 25 20 20 20
        20 20 20 20 20 20
        4F 52 49 47 49 4E
        41 4C 20 47 41 4D
        45 25 20 20 20 20
        20 40 20 32 30 31
   06E7 31 20 54 48 45 20  1751 	.ascii "1 THE MOJON TWINS%       REPROGRAMMED GAME%     @ 2018 THE M"
        4D 4F 4A 4F 4E 20
        54 57 49 4E 53 25
        20 20 20 20 20 20
        20 52 45 50 52 4F
        47 52 41 4D 4D 45
        44 20 47 41 4D 45
        25 20 20 20 20 20
        40 20 32 30 31 38
        20 54 48 45 20 4D
   0723 4F 4A 4F 4E 20 54  1752 	.ascii "OJON TWINS"
        57 49 4E 53
   072D 00                 1753 	.db 0x00
                           1754 ;mainloop/flickscreen.h:7: void flickscreen_do_horizontal (void) {
                           1755 ;	---------------------------------
                           1756 ; Function flickscreen_do_horizontal
                           1757 ; ---------------------------------
   072E                    1758 _flickscreen_do_horizontal::
                           1759 ;mainloop/flickscreen.h:12: (cfx + pvx) < 0
   072E FD 21rB4r02   [14] 1760 	ld	iy,#_cfx
   0732 FD 4E 00      [19] 1761 	ld	c,0 (iy)
   0735 3ArB4r02      [13] 1762 	ld	a,(#_cfx + 0)
   0738 17            [ 4] 1763 	rla
   0739 9F            [ 4] 1764 	sbc	a, a
   073A 47            [ 4] 1765 	ld	b,a
   073B 3Ar4Er00      [13] 1766 	ld	a,(#_pvx + 0)
   073E 81            [ 4] 1767 	add	a, c
   073F 57            [ 4] 1768 	ld	d,a
   0740 3Ar4Fr00      [13] 1769 	ld	a,(#_pvx + 1)
   0743 88            [ 4] 1770 	adc	a, b
   0744 5F            [ 4] 1771 	ld	e,a
                           1772 ;mainloop/flickscreen.h:8: if (prx == 4 && 
   0745 3Ar52r00      [13] 1773 	ld	a,(#_prx + 0)
   0748 D6 04         [ 7] 1774 	sub	a, #0x04
   074A 20 0F         [12] 1775 	jr	NZ,00105$
                           1776 ;mainloop/flickscreen.h:12: (cfx + pvx) < 0
   074C CB 7B         [ 8] 1777 	bit	7, e
   074E 28 0B         [12] 1778 	jr	Z,00105$
                           1779 ;mainloop/flickscreen.h:15: -- n_pant;
   0750 21rBAr01      [10] 1780 	ld	hl, #_n_pant+0
   0753 35            [11] 1781 	dec	(hl)
                           1782 ;mainloop/flickscreen.h:16: px = 244 << FIXBITS;
   0754 21 00 3D      [10] 1783 	ld	hl,#0x3D00
   0757 22r4Ar00      [16] 1784 	ld	(_px),hl
   075A C9            [10] 1785 	ret
   075B                    1786 00105$:
                           1787 ;mainloop/flickscreen.h:17: } else if (prx == 244 && 
   075B FD 21r52r00   [14] 1788 	ld	iy,#_prx
   075F FD 7E 00      [19] 1789 	ld	a,0 (iy)
   0762 D6 F4         [ 7] 1790 	sub	a, #0xF4
   0764 C0            [11] 1791 	ret	NZ
                           1792 ;mainloop/flickscreen.h:21: (cfx + pvx) > 0
   0765 AF            [ 4] 1793 	xor	a, a
   0766 BA            [ 4] 1794 	cp	a, d
   0767 9B            [ 4] 1795 	sbc	a, e
   0768 E2r6Dr07      [10] 1796 	jp	PO, 00130$
   076B EE 80         [ 7] 1797 	xor	a, #0x80
   076D                    1798 00130$:
   076D F0            [11] 1799 	ret	P
                           1800 ;mainloop/flickscreen.h:24: ++ n_pant;
   076E 21rBAr01      [10] 1801 	ld	hl, #_n_pant+0
   0771 34            [11] 1802 	inc	(hl)
                           1803 ;mainloop/flickscreen.h:25: px = 4 << FIXBITS;
   0772 21 00 01      [10] 1804 	ld	hl,#0x0100
   0775 22r4Ar00      [16] 1805 	ld	(_px),hl
   0778 C9            [10] 1806 	ret
                           1807 ;mainloop/flickscreen.h:29: void flickscreen_do_vertical (void) {
                           1808 ;	---------------------------------
                           1809 ; Function flickscreen_do_vertical
                           1810 ; ---------------------------------
   0779                    1811 _flickscreen_do_vertical::
                           1812 ;mainloop/flickscreen.h:42: if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
   0779 3Ar53r00      [13] 1813 	ld	a,(#_pry + 0)
   077C B7            [ 4] 1814 	or	a, a
   077D 20 44         [12] 1815 	jr	NZ,00108$
   077F 3Ar51r00      [13] 1816 	ld	a,(#_pvy + 1)
   0782 CB 7F         [ 8] 1817 	bit	7,a
   0784 28 3D         [12] 1818 	jr	Z,00108$
   0786 21r7Fr00      [10] 1819 	ld	hl,#_c_map_w
   0789 3ArBAr01      [13] 1820 	ld	a,(#_n_pant + 0)
   078C 96            [ 7] 1821 	sub	a, (hl)
   078D 38 34         [12] 1822 	jr	C,00108$
                           1823 ;mainloop/flickscreen.h:43: n_pant -= c_map_w;
   078F 21r7Fr00      [10] 1824 	ld	hl,#_c_map_w
   0792 D5            [11] 1825 	push	de
   0793 FD 21rBAr01   [14] 1826 	ld	iy,#_n_pant
   0797 FD E5         [15] 1827 	push	iy
   0799 D1            [10] 1828 	pop	de
   079A 1A            [ 7] 1829 	ld	a,(de)
   079B 96            [ 7] 1830 	sub	a, (hl)
   079C 12            [ 7] 1831 	ld	(de),a
   079D D1            [10] 1832 	pop	de
                           1833 ;mainloop/flickscreen.h:44: py = 192 << FIXBITS;
   079E 21 00 30      [10] 1834 	ld	hl,#0x3000
   07A1 22r4Cr00      [16] 1835 	ld	(_py),hl
                           1836 ;mainloop/flickscreen.h:45: if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
   07A4 3E 60         [ 7] 1837 	ld	a,#0x60
   07A6 FD 21r50r00   [14] 1838 	ld	iy,#_pvy
   07AA FD BE 00      [19] 1839 	cp	a, 0 (iy)
   07AD 3E FF         [ 7] 1840 	ld	a,#0xFF
   07AF FD 21r50r00   [14] 1841 	ld	iy,#_pvy
   07B3 FD 9E 01      [19] 1842 	sbc	a, 1 (iy)
   07B6 E2rBBr07      [10] 1843 	jp	PO, 00142$
   07B9 EE 80         [ 7] 1844 	xor	a, #0x80
   07BB                    1845 00142$:
   07BB F0            [11] 1846 	ret	P
   07BC 21 60 FF      [10] 1847 	ld	hl,#0xFF60
   07BF 22r50r00      [16] 1848 	ld	(_pvy),hl
   07C2 C9            [10] 1849 	ret
   07C3                    1850 00108$:
                           1851 ;mainloop/flickscreen.h:46: } else if (pry >= 192 && pvy > 0 && n_pant < c_map_size - c_map_w) {
   07C3 3Ar53r00      [13] 1852 	ld	a,(#_pry + 0)
   07C6 D6 C0         [ 7] 1853 	sub	a, #0xC0
   07C8 D8            [11] 1854 	ret	C
   07C9 AF            [ 4] 1855 	xor	a, a
   07CA FD 21r50r00   [14] 1856 	ld	iy,#_pvy
   07CE FD BE 00      [19] 1857 	cp	a, 0 (iy)
   07D1 FD 21r50r00   [14] 1858 	ld	iy,#_pvy
   07D5 FD 9E 01      [19] 1859 	sbc	a, 1 (iy)
   07D8 E2rDDr07      [10] 1860 	jp	PO, 00143$
   07DB EE 80         [ 7] 1861 	xor	a, #0x80
   07DD                    1862 00143$:
   07DD F0            [11] 1863 	ret	P
   07DE 21r81r00      [10] 1864 	ld	hl,#_c_map_size + 0
   07E1 5E            [ 7] 1865 	ld	e, (hl)
   07E2 16 00         [ 7] 1866 	ld	d,#0x00
   07E4 FD 21r7Fr00   [14] 1867 	ld	iy,#_c_map_w
   07E8 FD 6E 00      [19] 1868 	ld	l,0 (iy)
   07EB 26 00         [ 7] 1869 	ld	h,#0x00
   07ED 7B            [ 4] 1870 	ld	a,e
   07EE 95            [ 4] 1871 	sub	a, l
   07EF 5F            [ 4] 1872 	ld	e,a
   07F0 7A            [ 4] 1873 	ld	a,d
   07F1 9C            [ 4] 1874 	sbc	a, h
   07F2 57            [ 4] 1875 	ld	d,a
   07F3 FD 21rBAr01   [14] 1876 	ld	iy,#_n_pant
   07F7 FD 66 00      [19] 1877 	ld	h,0 (iy)
   07FA 2E 00         [ 7] 1878 	ld	l,#0x00
   07FC 7C            [ 4] 1879 	ld	a,h
   07FD 93            [ 4] 1880 	sub	a, e
   07FE 7D            [ 4] 1881 	ld	a,l
   07FF 9A            [ 4] 1882 	sbc	a, d
   0800 E2r05r08      [10] 1883 	jp	PO, 00144$
   0803 EE 80         [ 7] 1884 	xor	a, #0x80
   0805                    1885 00144$:
   0805 F0            [11] 1886 	ret	P
                           1887 ;mainloop/flickscreen.h:47: n_pant += c_map_w;
   0806 21r7Fr00      [10] 1888 	ld	hl,#_c_map_w
   0809 D5            [11] 1889 	push	de
   080A FD 21rBAr01   [14] 1890 	ld	iy,#_n_pant
   080E FD E5         [15] 1891 	push	iy
   0810 D1            [10] 1892 	pop	de
   0811 1A            [ 7] 1893 	ld	a,(de)
   0812 86            [ 7] 1894 	add	a, (hl)
   0813 12            [ 7] 1895 	ld	(de),a
   0814 D1            [10] 1896 	pop	de
                           1897 ;mainloop/flickscreen.h:48: py = 0;
   0815 21 00 00      [10] 1898 	ld	hl,#0x0000
   0818 22r4Cr00      [16] 1899 	ld	(_py),hl
   081B C9            [10] 1900 	ret
                           1901 ;mainloop.h:7: void game_init (void) {
                           1902 ;	---------------------------------
                           1903 ; Function game_init
                           1904 ; ---------------------------------
   081C                    1905 _game_init::
                           1906 ;mainloop.h:9: win_level = game_over = 0;
   081C 21rC0r01      [10] 1907 	ld	hl,#_game_over + 0
   081F 36 00         [10] 1908 	ld	(hl), #0x00
   0821 21rBFr01      [10] 1909 	ld	hl,#_win_level + 0
   0824 36 00         [10] 1910 	ld	(hl), #0x00
   0826 FD 21rB8r01   [14] 1911 	ld	iy,#_level
   082A FD 6E 00      [19] 1912 	ld	l,0 (iy)
   082D 26 00         [ 7] 1913 	ld	h,#0x00
   082F 29            [11] 1914 	add	hl, hl
   0830 4D            [ 4] 1915 	ld	c, l
   0831 44            [ 4] 1916 	ld	b, h
   0832 21rFCr01      [10] 1917 	ld	hl,#_l_ts_tmaps
   0835 09            [11] 1918 	add	hl,bc
   0836 7E            [ 7] 1919 	ld	a,(hl)
   0837 FD 21r82r00   [14] 1920 	ld	iy,#_c_ts_tmaps
   083B FD 77 00      [19] 1921 	ld	0 (iy),a
   083E 23            [ 6] 1922 	inc	hl
   083F 7E            [ 7] 1923 	ld	a,(hl)
   0840 32r83r00      [13] 1924 	ld	(#_c_ts_tmaps + 1),a
                           1925 ;mainloop/asset_setup.h:10: c_behs = 		l_behs [level];
   0843 21r02r02      [10] 1926 	ld	hl,#_l_behs
   0846 09            [11] 1927 	add	hl,bc
   0847 7E            [ 7] 1928 	ld	a,(hl)
   0848 FD 21r84r00   [14] 1929 	ld	iy,#_c_behs
   084C FD 77 00      [19] 1930 	ld	0 (iy),a
   084F 23            [ 6] 1931 	inc	hl
   0850 7E            [ 7] 1932 	ld	a,(hl)
   0851 32r85r00      [13] 1933 	ld	(#_c_behs + 1),a
                           1934 ;mainloop/asset_setup.h:11: spr_enems = 	l_spr_enems [level];
   0854 21r0Er02      [10] 1935 	ld	hl,#_l_spr_enems
   0857 09            [11] 1936 	add	hl,bc
   0858 7E            [ 7] 1937 	ld	a,(hl)
   0859 FD 21r86r00   [14] 1938 	ld	iy,#_spr_enems
   085D FD 77 00      [19] 1939 	ld	0 (iy),a
   0860 23            [ 6] 1940 	inc	hl
   0861 7E            [ 7] 1941 	ld	a,(hl)
   0862 32r87r00      [13] 1942 	ld	(#_spr_enems + 1),a
                           1943 ;mainloop/asset_setup.h:13: c_map = 		l_map [level];
   0865 21r14r02      [10] 1944 	ld	hl,#_l_map
   0868 09            [11] 1945 	add	hl,bc
   0869 7E            [ 7] 1946 	ld	a,(hl)
   086A FD 21r88r00   [14] 1947 	ld	iy,#_c_map
   086E FD 77 00      [19] 1948 	ld	0 (iy),a
   0871 23            [ 6] 1949 	inc	hl
   0872 7E            [ 7] 1950 	ld	a,(hl)
   0873 32r89r00      [13] 1951 	ld	(#_c_map + 1),a
                           1952 ;mainloop/asset_setup.h:20: c_decos = 	l_decos [level];
   0876 3Er1A         [ 7] 1953 	ld	a,#<(_l_decos)
   0878 21rB8r01      [10] 1954 	ld	hl,#_level
   087B 86            [ 7] 1955 	add	a, (hl)
   087C 5F            [ 4] 1956 	ld	e,a
   087D 3Es02         [ 7] 1957 	ld	a,#>(_l_decos)
   087F CE 00         [ 7] 1958 	adc	a, #0x00
   0881 57            [ 4] 1959 	ld	d,a
   0882 1A            [ 7] 1960 	ld	a,(de)
   0883 32r8Ar00      [13] 1961 	ld	(#_c_decos + 0),a
                           1962 ;mainloop/asset_setup.h:23: c_locks = 	l_locks [level];
   0886 21r1Dr02      [10] 1963 	ld	hl,#_l_locks
   0889 09            [11] 1964 	add	hl,bc
   088A 7E            [ 7] 1965 	ld	a,(hl)
   088B FD 21r8Br00   [14] 1966 	ld	iy,#_c_locks
   088F FD 77 00      [19] 1967 	ld	0 (iy),a
   0892 23            [ 6] 1968 	inc	hl
   0893 7E            [ 7] 1969 	ld	a,(hl)
   0894 32r8Cr00      [13] 1970 	ld	(#_c_locks + 1),a
                           1971 ;mainloop/asset_setup.h:25: l_n_bolts [level];
   0897 3Er23         [ 7] 1972 	ld	a,#<(_l_n_bolts)
   0899 21rB8r01      [10] 1973 	ld	hl,#_level
   089C 86            [ 7] 1974 	add	a, (hl)
   089D 5F            [ 4] 1975 	ld	e,a
   089E 3Es02         [ 7] 1976 	ld	a,#>(_l_n_bolts)
   08A0 CE 00         [ 7] 1977 	adc	a, #0x00
   08A2 57            [ 4] 1978 	ld	d,a
   08A3 1A            [ 7] 1979 	ld	a,(de)
   08A4 32r91r00      [13] 1980 	ld	(#_c_max_bolts + 0),a
                           1981 ;mainloop/asset_setup.h:28: c_enems = 		l_enems [level];
   08A7 21r26r02      [10] 1982 	ld	hl,#_l_enems
   08AA 09            [11] 1983 	add	hl,bc
   08AB 7E            [ 7] 1984 	ld	a,(hl)
   08AC FD 21r8Dr00   [14] 1985 	ld	iy,#_c_enems
   08B0 FD 77 00      [19] 1986 	ld	0 (iy),a
   08B3 23            [ 6] 1987 	inc	hl
   08B4 7E            [ 7] 1988 	ld	a,(hl)
   08B5 32r8Er00      [13] 1989 	ld	(#_c_enems + 1),a
                           1990 ;mainloop/asset_setup.h:29: c_hotspots = 	l_hotspots [level];	
   08B8 21r2Cr02      [10] 1991 	ld	hl,#_l_hotspots
   08BB 09            [11] 1992 	add	hl,bc
   08BC 7E            [ 7] 1993 	ld	a,(hl)
   08BD FD 21r8Fr00   [14] 1994 	ld	iy,#_c_hotspots
   08C1 FD 77 00      [19] 1995 	ld	0 (iy),a
   08C4 23            [ 6] 1996 	inc	hl
   08C5 7E            [ 7] 1997 	ld	a,(hl)
   08C6 32r90r00      [13] 1998 	ld	(#_c_hotspots + 1),a
                           1999 ;mainloop/asset_setup.h:31: c_max_enems = 	l_player_max_enems [level];
   08C9 3ErED         [ 7] 2000 	ld	a,#<(_l_player_max_enems)
   08CB 21rB8r01      [10] 2001 	ld	hl,#_level
   08CE 86            [ 7] 2002 	add	a, (hl)
   08CF 5F            [ 4] 2003 	ld	e,a
   08D0 3Es01         [ 7] 2004 	ld	a,#>(_l_player_max_enems)
   08D2 CE 00         [ 7] 2005 	adc	a, #0x00
   08D4 57            [ 4] 2006 	ld	d,a
   08D5 1A            [ 7] 2007 	ld	a,(de)
   08D6 32rB9r01      [13] 2008 	ld	(#_c_max_enems + 0),a
                           2009 ;mainloop/asset_setup.h:33: c_map_w = 		l_map_w [level];
   08D9 3ErE4         [ 7] 2010 	ld	a,#<(_l_map_w)
   08DB 21rB8r01      [10] 2011 	ld	hl,#_level
   08DE 86            [ 7] 2012 	add	a, (hl)
   08DF 5F            [ 4] 2013 	ld	e,a
   08E0 3Es01         [ 7] 2014 	ld	a,#>(_l_map_w)
   08E2 CE 00         [ 7] 2015 	adc	a, #0x00
   08E4 57            [ 4] 2016 	ld	d,a
   08E5 1A            [ 7] 2017 	ld	a,(de)
   08E6 32r7Fr00      [13] 2018 	ld	(#_c_map_w + 0),a
                           2019 ;mainloop/asset_setup.h:34: c_map_h = 		l_map_h [level];
   08E9 3ErE7         [ 7] 2020 	ld	a,#<(_l_map_h)
   08EB 21rB8r01      [10] 2021 	ld	hl,#_level
   08EE 86            [ 7] 2022 	add	a, (hl)
   08EF 5F            [ 4] 2023 	ld	e,a
   08F0 3Es01         [ 7] 2024 	ld	a,#>(_l_map_h)
   08F2 CE 00         [ 7] 2025 	adc	a, #0x00
   08F4 57            [ 4] 2026 	ld	d,a
   08F5 1A            [ 7] 2027 	ld	a,(de)
                           2028 ;mainloop/asset_setup.h:84: rda = c_map_h; c_map_size = 0; while (rda --) c_map_size += c_map_w;
   08F6 32r80r00      [13] 2029 	ld	(#_c_map_h + 0),a
   08F9 32r18r00      [13] 2030 	ld	(#_rda + 0),a
   08FC 21r81r00      [10] 2031 	ld	hl,#_c_map_size + 0
   08FF 36 00         [10] 2032 	ld	(hl), #0x00
   0901                    2033 00101$:
   0901 21r18r00      [10] 2034 	ld	hl,#_rda + 0
   0904 56            [ 7] 2035 	ld	d, (hl)
   0905 21r18r00      [10] 2036 	ld	hl, #_rda+0
   0908 35            [11] 2037 	dec	(hl)
   0909 7A            [ 4] 2038 	ld	a,d
   090A B7            [ 4] 2039 	or	a, a
   090B 28 11         [12] 2040 	jr	Z,00103$
   090D 21r7Fr00      [10] 2041 	ld	hl,#_c_map_w
   0910 D5            [11] 2042 	push	de
   0911 FD 21r81r00   [14] 2043 	ld	iy,#_c_map_size
   0915 FD E5         [15] 2044 	push	iy
   0917 D1            [10] 2045 	pop	de
   0918 1A            [ 7] 2046 	ld	a,(de)
   0919 86            [ 7] 2047 	add	a, (hl)
   091A 12            [ 7] 2048 	ld	(de),a
   091B D1            [10] 2049 	pop	de
   091C 18 E3         [12] 2050 	jr	00101$
   091E                    2051 00103$:
                           2052 ;my/level_pattern_unpacker.h:3: unpack_bg_patterns (l_ts_patterns [level], l_ts_colours [level], 64*8, 7);
   091E 21rF6r01      [10] 2053 	ld	hl,#_l_ts_colours
   0921 09            [11] 2054 	add	hl,bc
   0922 5E            [ 7] 2055 	ld	e,(hl)
   0923 23            [ 6] 2056 	inc	hl
   0924 56            [ 7] 2057 	ld	d,(hl)
   0925 21rF0r01      [10] 2058 	ld	hl,#_l_ts_patterns
   0928 09            [11] 2059 	add	hl,bc
   0929 4E            [ 7] 2060 	ld	c,(hl)
   092A 23            [ 6] 2061 	inc	hl
   092B 46            [ 7] 2062 	ld	b,(hl)
   092C 3E 07         [ 7] 2063 	ld	a,#0x07
   092E F5            [11] 2064 	push	af
   092F 33            [ 6] 2065 	inc	sp
   0930 21 00 02      [10] 2066 	ld	hl,#0x0200
   0933 E5            [11] 2067 	push	hl
   0934 D5            [11] 2068 	push	de
   0935 C5            [11] 2069 	push	bc
   0936 CDr00r00      [17] 2070 	call	_unpack_bg_patterns
   0939 21 07 00      [10] 2071 	ld	hl,#7
   093C 39            [11] 2072 	add	hl,sp
   093D F9            [ 6] 2073 	ld	sp,hl
                           2074 ;my/level_pattern_unpacker.h:4: aPLib_depack_VRAM (SGT_BASE + 160*8, l_spr_patterns [level]);
   093E FD 21rB8r01   [14] 2075 	ld	iy,#_level
   0942 FD 6E 00      [19] 2076 	ld	l,0 (iy)
   0945 26 00         [ 7] 2077 	ld	h,#0x00
   0947 29            [11] 2078 	add	hl, hl
   0948 11r08r02      [10] 2079 	ld	de,#_l_spr_patterns
   094B 19            [11] 2080 	add	hl,de
   094C 5E            [ 7] 2081 	ld	e,(hl)
   094D 23            [ 6] 2082 	inc	hl
   094E 56            [ 7] 2083 	ld	d,(hl)
   094F D5            [11] 2084 	push	de
   0950 21 00 3D      [10] 2085 	ld	hl,#0x3D00
   0953 E5            [11] 2086 	push	hl
   0954 CDr00r00      [17] 2087 	call	_aPLib_depack_VRAM
   0957 F1            [10] 2088 	pop	af
   0958 F1            [10] 2089 	pop	af
                           2090 ;mainloop.h:17: cls ();
   0959 CDr00r00      [17] 2091 	call	_cls
                           2092 ;mainloop.h:19: draw_game_frame ();
   095C CDrD5r02      [17] 2093 	call	_draw_game_frame
                           2094 ;mainloop.h:22: hotspots_load ();
   095F CDr00r00      [17] 2095 	call	_hotspots_load
                           2096 ;mainloop.h:25: memfill (lkact, 1, c_max_bolts);
   0962 21r91r00      [10] 2097 	ld	hl,#_c_max_bolts + 0
   0965 4E            [ 7] 2098 	ld	c, (hl)
   0966 06 00         [ 7] 2099 	ld	b,#0x00
   0968 11rE4r01      [10] 2100 	ld	de,#_lkact
   096B C5            [11] 2101 	push	bc
   096C 3E 01         [ 7] 2102 	ld	a,#0x01
   096E F5            [11] 2103 	push	af
   096F 33            [ 6] 2104 	inc	sp
   0970 D5            [11] 2105 	push	de
   0971 CDr00r00      [17] 2106 	call	_memfill
   0974 F1            [10] 2107 	pop	af
   0975 F1            [10] 2108 	pop	af
   0976 33            [ 6] 2109 	inc	sp
                           2110 ;mainloop.h:28: if (!warp_to_level)	{
   0977 3ArC1r01      [13] 2111 	ld	a,(#_warp_to_level + 0)
   097A B7            [ 4] 2112 	or	a, a
   097B 20 43         [12] 2113 	jr	NZ,00105$
                           2114 ;mainloop.h:29: n_pant = SCR_INI;
   097D 11rDBr01      [10] 2115 	ld	de,#_l_scr_ini+0
   0980 2ArB8r01      [16] 2116 	ld	hl,(_level)
   0983 26 00         [ 7] 2117 	ld	h,#0x00
   0985 19            [11] 2118 	add	hl,de
   0986 7E            [ 7] 2119 	ld	a,(hl)
   0987 32rBAr01      [13] 2120 	ld	(#_n_pant + 0),a
                           2121 ;mainloop.h:30: px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
   098A 11rDEr01      [10] 2122 	ld	de,#_l_ini_x+0
   098D 2ArB8r01      [16] 2123 	ld	hl,(_level)
   0990 26 00         [ 7] 2124 	ld	h,#0x00
   0992 19            [11] 2125 	add	hl,de
   0993 6E            [ 7] 2126 	ld	l,(hl)
   0994 26 00         [ 7] 2127 	ld	h,#0x00
   0996 29            [11] 2128 	add	hl, hl
   0997 29            [11] 2129 	add	hl, hl
   0998 29            [11] 2130 	add	hl, hl
   0999 29            [11] 2131 	add	hl, hl
   099A 01 04 00      [10] 2132 	ld	bc,#0x0004
   099D 09            [11] 2133 	add	hl,bc
   099E 29            [11] 2134 	add	hl, hl
   099F 29            [11] 2135 	add	hl, hl
   09A0 29            [11] 2136 	add	hl, hl
   09A1 29            [11] 2137 	add	hl, hl
   09A2 29            [11] 2138 	add	hl, hl
   09A3 29            [11] 2139 	add	hl, hl
   09A4 22r4Ar00      [16] 2140 	ld	(_px),hl
                           2141 ;mainloop.h:31: py = (PLAYER_INI_Y << 4) << FIXBITS;
   09A7 11rE1r01      [10] 2142 	ld	de,#_l_ini_y+0
   09AA 2ArB8r01      [16] 2143 	ld	hl,(_level)
   09AD 26 00         [ 7] 2144 	ld	h,#0x00
   09AF 19            [11] 2145 	add	hl,de
   09B0 6E            [ 7] 2146 	ld	l,(hl)
   09B1 26 00         [ 7] 2147 	ld	h,#0x00
   09B3 29            [11] 2148 	add	hl, hl
   09B4 29            [11] 2149 	add	hl, hl
   09B5 29            [11] 2150 	add	hl, hl
   09B6 29            [11] 2151 	add	hl, hl
   09B7 29            [11] 2152 	add	hl, hl
   09B8 29            [11] 2153 	add	hl, hl
   09B9 29            [11] 2154 	add	hl, hl
   09BA 29            [11] 2155 	add	hl, hl
   09BB 29            [11] 2156 	add	hl, hl
   09BC 29            [11] 2157 	add	hl, hl
   09BD 22r4Cr00      [16] 2158 	ld	(_py),hl
   09C0                    2159 00105$:
                           2160 ;mainloop.h:33: player_to_pixels ();
   09C0 CDr00r00      [17] 2161 	call	_player_to_pixels
                           2162 ;mainloop.h:34: player_init ();
   09C3 CDr00r00      [17] 2163 	call	_player_init
                           2164 ;mainloop.h:37: enems_persistent_load ();
   09C6 CDr00r00      [17] 2165 	call	_enems_persistent_load
                           2166 ;mainloop.h:41: enems_persistent_deaths_load ();
   09C9 CDr00r00      [17] 2167 	call	_enems_persistent_deaths_load
                           2168 ;mainloop.h:53: pkeys = 0;
   09CC 21r70r00      [10] 2169 	ld	hl,#_pkeys + 0
   09CF 36 00         [10] 2170 	ld	(hl), #0x00
                           2171 ;mainloop.h:57: res_on = 0;
   09D1 21rB1r02      [10] 2172 	ld	hl,#_res_on + 0
   09D4 36 00         [10] 2173 	ld	(hl), #0x00
                           2174 ;mainloop.h:58: res_disable = 0;
   09D6 21rB0r02      [10] 2175 	ld	hl,#_res_disable + 0
   09D9 36 00         [10] 2176 	ld	(hl), #0x00
                           2177 ;mainloop.h:66: no_ct = 0;
   09DB 21rCAr01      [10] 2178 	ld	hl,#_no_ct + 0
   09DE 36 00         [10] 2179 	ld	(hl), #0x00
                           2180 ;mainloop.h:105: half_life = 0;
   09E0 21rBCr01      [10] 2181 	ld	hl,#_half_life + 0
   09E3 36 00         [10] 2182 	ld	(hl), #0x00
                           2183 ;mainloop.h:106: frame_counter = 0;
   09E5 21rBDr01      [10] 2184 	ld	hl,#_frame_counter + 0
   09E8 36 00         [10] 2185 	ld	(hl), #0x00
                           2186 ;mainloop.h:107: olife = oammo = oobjs = okeys = 0xff;
   09EA 21rC5r01      [10] 2187 	ld	hl,#_okeys + 0
   09ED 36 FF         [10] 2188 	ld	(hl), #0xFF
   09EF 21rC6r01      [10] 2189 	ld	hl,#_oobjs + 0
   09F2 36 FF         [10] 2190 	ld	(hl), #0xFF
   09F4 21rC7r01      [10] 2191 	ld	hl,#_oammo + 0
   09F7 36 FF         [10] 2192 	ld	(hl), #0xFF
   09F9 21rC4r01      [10] 2193 	ld	hl,#_olife + 0
   09FC 36 FF         [10] 2194 	ld	(hl), #0xFF
                           2195 ;mainloop.h:108: okilled = 0xff;
   09FE 21rC8r01      [10] 2196 	ld	hl,#_okilled + 0
   0A01 36 FF         [10] 2197 	ld	(hl), #0xFF
                           2198 ;my/extra_inits.h:7: springs_on = (level == 1);
   0A03 3ArB8r01      [13] 2199 	ld	a,(#_level + 0)
   0A06 3D            [ 4] 2200 	dec	a
   0A07 20 04         [12] 2201 	jr	NZ,00120$
   0A09 3E 01         [ 7] 2202 	ld	a,#0x01
   0A0B 18 01         [12] 2203 	jr	00121$
   0A0D                    2204 00120$:
   0A0D AF            [ 4] 2205 	xor	a,a
   0A0E                    2206 00121$:
   0A0E 32rB5r02      [13] 2207 	ld	(#_springs_on + 0),a
   0A11 C9            [10] 2208 	ret
                           2209 ;mainloop.h:117: void prepare_scr (void) {
                           2210 ;	---------------------------------
                           2211 ; Function prepare_scr
                           2212 ; ---------------------------------
   0A12                    2213 _prepare_scr::
                           2214 ;mainloop.h:118: SG_displayOff ();
   0A12 21 40 01      [10] 2215 	ld	hl,#0x0140
   0A15 E5            [11] 2216 	push	hl
   0A16 CDr00r00      [17] 2217 	call	_SG_VDPturnOffFeature
   0A19 F1            [10] 2218 	pop	af
                           2219 ;mainloop.h:128: ft = 0;
   0A1A FD 21r7Er00   [14] 2220 	ld	iy,#_ft
   0A1E FD 36 00 00   [19] 2221 	ld	0 (iy),#0x00
                           2222 ;mainloop.h:130: update_list [update_index] = 0xff;
   0A22 3Ar94r00      [13] 2223 	ld	a,(#_update_index + 0)
   0A25 C6r95         [ 7] 2224 	add	a, #<(_update_list)
   0A27 6F            [ 4] 2225 	ld	l, a
   0A28 3E 00         [ 7] 2226 	ld	a, #0x00
   0A2A CEs00         [ 7] 2227 	adc	a, #>(_update_list)
   0A2C 67            [ 4] 2228 	ld	h, a
   0A2D 36 FF         [10] 2229 	ld	(hl),#0xFF
                           2230 ;mainloop.h:131: SG_doUpdateList ();
   0A2F CDr00r00      [17] 2231 	call	_SG_doUpdateList
                           2232 ;mainloop.h:132: clear_update_list ();
   0A32 CDr00r00      [17] 2233 	call	_clear_update_list
                           2234 ;mainloop.h:141: enems_persistent_update ();
   0A35 CDr00r00      [17] 2235 	call	_enems_persistent_update
                           2236 ;mainloop.h:144: enems_load ();
   0A38 CDr00r00      [17] 2237 	call	_enems_load
                           2238 ;mainloop.h:145: hotspots_create ();	
   0A3B CDr75r02      [17] 2239 	call	_hotspots_create
                           2240 ;mainloop.h:162: chac_chacs_queue_write = chac_chacs_queue_read = 0;
   0A3E 21rAEr02      [10] 2241 	ld	hl,#_chac_chacs_queue_read + 0
   0A41 36 00         [10] 2242 	ld	(hl), #0x00
   0A43 21rAFr02      [10] 2243 	ld	hl,#_chac_chacs_queue_write + 0
   0A46 36 00         [10] 2244 	ld	(hl), #0x00
                           2245 ;mainloop.h:163: max_chac_chacs = 0;
   0A48 21r8Dr02      [10] 2246 	ld	hl,#_max_chac_chacs + 0
   0A4B 36 00         [10] 2247 	ld	(hl), #0x00
                           2248 ;mainloop.h:172: draw_scr ();
   0A4D CDr00r00      [17] 2249 	call	_draw_scr
                           2250 ;mainloop.h:210: SG_initSprites ();
   0A50 CDr00r00      [17] 2251 	call	_SG_initSprites
                           2252 ;my/on_entering_screen.h:8: if (mode_no_resonators) {
   0A53 3ArB7r02      [13] 2253 	ld	a,(#_mode_no_resonators + 0)
   0A56 B7            [ 4] 2254 	or	a, a
   0A57 28 11         [12] 2255 	jr	Z,00104$
                           2256 ;my/on_entering_screen.h:9: res_disable = 1;
   0A59 21rB0r02      [10] 2257 	ld	hl,#_res_disable + 0
   0A5C 36 01         [10] 2258 	ld	(hl), #0x01
                           2259 ;my/on_entering_screen.h:10: if (hrt == HOTSPOT_TYPE_RESONATOR) hrt = 0;
   0A5E 3Ar7Cr00      [13] 2260 	ld	a,(#_hrt + 0)
   0A61 D6 04         [ 7] 2261 	sub	a, #0x04
   0A63 20 05         [12] 2262 	jr	NZ,00104$
   0A65 21r7Cr00      [10] 2263 	ld	hl,#_hrt + 0
   0A68 36 00         [10] 2264 	ld	(hl), #0x00
   0A6A                    2265 00104$:
                           2266 ;mainloop.h:227: gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
   0A6A 21r08r00      [10] 2267 	ld	hl,#_gpit + 0
   0A6D 36 03         [10] 2268 	ld	(hl), #0x03
   0A6F                    2269 00105$:
   0A6F 21r08r00      [10] 2270 	ld	hl,#_gpit + 0
   0A72 5E            [ 7] 2271 	ld	e, (hl)
   0A73 21r08r00      [10] 2272 	ld	hl, #_gpit+0
   0A76 35            [11] 2273 	dec	(hl)
   0A77 7B            [ 4] 2274 	ld	a,e
   0A78 B7            [ 4] 2275 	or	a, a
   0A79 28 1E         [12] 2276 	jr	Z,00107$
   0A7B 3Er42         [ 7] 2277 	ld	a,#<(_en_spr_id)
   0A7D 21r08r00      [10] 2278 	ld	hl,#_gpit
   0A80 86            [ 7] 2279 	add	a, (hl)
   0A81 5F            [ 4] 2280 	ld	e,a
   0A82 3Es02         [ 7] 2281 	ld	a,#>(_en_spr_id)
   0A84 CE 00         [ 7] 2282 	adc	a, #0x00
   0A86 57            [ 4] 2283 	ld	d,a
   0A87 FD 21r11r02   [14] 2284 	ld	iy,#_en_s
   0A8B ED 4Br08r00   [20] 2285 	ld	bc,(_gpit)
   0A8F 06 00         [ 7] 2286 	ld	b,#0x00
   0A91 FD 09         [15] 2287 	add	iy, bc
   0A93 FD 7E 00      [19] 2288 	ld	a, 0 (iy)
   0A96 12            [ 7] 2289 	ld	(de),a
   0A97 18 D6         [12] 2290 	jr	00105$
   0A99                    2291 00107$:
                           2292 ;mainloop.h:229: prx = px >> FIXBITS; pry = py >> FIXBITS;
   0A99 2Ar4Ar00      [16] 2293 	ld	hl,(_px)
   0A9C CB 2C         [ 8] 2294 	sra	h
   0A9E CB 1D         [ 8] 2295 	rr	l
   0AA0 CB 2C         [ 8] 2296 	sra	h
   0AA2 CB 1D         [ 8] 2297 	rr	l
   0AA4 CB 2C         [ 8] 2298 	sra	h
   0AA6 CB 1D         [ 8] 2299 	rr	l
   0AA8 CB 2C         [ 8] 2300 	sra	h
   0AAA CB 1D         [ 8] 2301 	rr	l
   0AAC CB 2C         [ 8] 2302 	sra	h
   0AAE CB 1D         [ 8] 2303 	rr	l
   0AB0 CB 2C         [ 8] 2304 	sra	h
   0AB2 CB 1D         [ 8] 2305 	rr	l
   0AB4 FD 21r52r00   [14] 2306 	ld	iy,#_prx
   0AB8 FD 75 00      [19] 2307 	ld	0 (iy),l
   0ABB 2Ar4Cr00      [16] 2308 	ld	hl,(_py)
   0ABE CB 2C         [ 8] 2309 	sra	h
   0AC0 CB 1D         [ 8] 2310 	rr	l
   0AC2 CB 2C         [ 8] 2311 	sra	h
   0AC4 CB 1D         [ 8] 2312 	rr	l
   0AC6 CB 2C         [ 8] 2313 	sra	h
   0AC8 CB 1D         [ 8] 2314 	rr	l
   0ACA CB 2C         [ 8] 2315 	sra	h
   0ACC CB 1D         [ 8] 2316 	rr	l
   0ACE CB 2C         [ 8] 2317 	sra	h
   0AD0 CB 1D         [ 8] 2318 	rr	l
   0AD2 CB 2C         [ 8] 2319 	sra	h
   0AD4 CB 1D         [ 8] 2320 	rr	l
   0AD6 FD 21r53r00   [14] 2321 	ld	iy,#_pry
   0ADA FD 75 00      [19] 2322 	ld	0 (iy),l
                           2323 ;mainloop.h:234: player_move ();
   0ADD CDr00r00      [17] 2324 	call	_player_move
                           2325 ;mainloop.h:235: enems_move ();
   0AE0 CDr00r00      [17] 2326 	call	_enems_move
                           2327 ;mainloop.h:237: if (hrt) hotspots_paint ();
   0AE3 3Ar7Cr00      [13] 2328 	ld	a,(#_hrt + 0)
   0AE6 B7            [ 4] 2329 	or	a, a
   0AE7 28 03         [12] 2330 	jr	Z,00109$
   0AE9 CDr38r02      [17] 2331 	call	_hotspots_paint
   0AEC                    2332 00109$:
                           2333 ;mainloop.h:252: hud_update ();
   0AEC CDrDEr02      [17] 2334 	call	_hud_update
                           2335 ;mainloop.h:253: SG_copySpritestoSAT ();
   0AEF CDr00r00      [17] 2336 	call	_SG_copySpritestoSAT
                           2337 ;mainloop.h:254: update_list [update_index] = 0xff;
   0AF2 3Ar94r00      [13] 2338 	ld	a,(#_update_index + 0)
   0AF5 C6r95         [ 7] 2339 	add	a, #<(_update_list)
   0AF7 6F            [ 4] 2340 	ld	l, a
   0AF8 3E 00         [ 7] 2341 	ld	a, #0x00
   0AFA CEs00         [ 7] 2342 	adc	a, #>(_update_list)
   0AFC 67            [ 4] 2343 	ld	h, a
   0AFD 36 FF         [10] 2344 	ld	(hl),#0xFF
                           2345 ;mainloop.h:255: SG_doUpdateList ();
   0AFF CDr00r00      [17] 2346 	call	_SG_doUpdateList
                           2347 ;mainloop.h:256: clear_update_list ();	
   0B02 CDr00r00      [17] 2348 	call	_clear_update_list
                           2349 ;mainloop.h:257: SG_displayOn ();
   0B05 21 40 01      [10] 2350 	ld	hl,#0x0140
   0B08 E5            [11] 2351 	push	hl
   0B09 CDr00r00      [17] 2352 	call	_SG_VDPturnOnFeature
   0B0C F1            [10] 2353 	pop	af
   0B0D C9            [10] 2354 	ret
                           2355 ;mainloop.h:260: void game_loop (void) {
                           2356 ;	---------------------------------
                           2357 ; Function game_loop
                           2358 ; ---------------------------------
   0B0E                    2359 _game_loop::
                           2360 ;mainloop.h:261: clear_update_list ();
   0B0E CDr00r00      [17] 2361 	call	_clear_update_list
                           2362 ;mainloop.h:263: on_pant = 99; ft = 1; fade_delay = 1;
   0B11 21rBBr01      [10] 2363 	ld	hl,#_on_pant + 0
   0B14 36 63         [10] 2364 	ld	(hl), #0x63
   0B16 21r7Er00      [10] 2365 	ld	hl,#_ft + 0
   0B19 36 01         [10] 2366 	ld	(hl), #0x01
   0B1B 21rF6r00      [10] 2367 	ld	hl,#_fade_delay + 0
   0B1E 36 01         [10] 2368 	ld	(hl), #0x01
                           2369 ;mainloop.h:267: SG_displayOn ();
   0B20 21 40 01      [10] 2370 	ld	hl,#0x0140
   0B23 E5            [11] 2371 	push	hl
   0B24 CDr00r00      [17] 2372 	call	_SG_VDPturnOnFeature
   0B27 F1            [10] 2373 	pop	af
                           2374 ;mainloop.h:278: ntsc_frame = level_reset = warp_to_level = 0; 
   0B28 21rC1r01      [10] 2375 	ld	hl,#_warp_to_level + 0
   0B2B 36 00         [10] 2376 	ld	(hl), #0x00
   0B2D 21rC2r01      [10] 2377 	ld	hl,#_level_reset + 0
   0B30 36 00         [10] 2378 	ld	(hl), #0x00
   0B32 21r93r00      [10] 2379 	ld	hl,#_ntsc_frame + 0
   0B35 36 00         [10] 2380 	ld	(hl), #0x00
                           2381 ;mainloop.h:279: ticker = 50;
   0B37 21r1Fr00      [10] 2382 	ld	hl,#_ticker + 0
   0B3A 36 32         [10] 2383 	ld	(hl), #0x32
                           2384 ;mainloop.h:282: PSGPlay (l_music [level]);
   0B3C FD 21rB8r01   [14] 2385 	ld	iy,#_level
   0B40 FD 6E 00      [19] 2386 	ld	l,0 (iy)
   0B43 26 00         [ 7] 2387 	ld	h,#0x00
   0B45 29            [11] 2388 	add	hl, hl
   0B46 11r32r02      [10] 2389 	ld	de,#_l_music
   0B49 19            [11] 2390 	add	hl,de
   0B4A 5E            [ 7] 2391 	ld	e,(hl)
   0B4B 23            [ 6] 2392 	inc	hl
   0B4C 56            [ 7] 2393 	ld	d,(hl)
   0B4D D5            [11] 2394 	push	de
   0B4E CDr00r00      [17] 2395 	call	_PSGPlay
   0B51 F1            [10] 2396 	pop	af
                           2397 ;mainloop.h:287: while (1) {
   0B52                    2398 00169$:
                           2399 ;mainloop.h:294: hud_update ();
   0B52 CDrDEr02      [17] 2400 	call	_hud_update
                           2401 ;mainloop.h:298: if (pkill) player_kill ();
   0B55 3Ar6Br00      [13] 2402 	ld	a,(#_pkill + 0)
   0B58 B7            [ 4] 2403 	or	a, a
   0B59 28 03         [12] 2404 	jr	Z,00102$
   0B5B CDr00r00      [17] 2405 	call	_player_kill
   0B5E                    2406 00102$:
                           2407 ;mainloop.h:299: if (game_over || level_reset) break;			
   0B5E 3ArC0r01      [13] 2408 	ld	a,(#_game_over + 0)
   0B61 B7            [ 4] 2409 	or	a, a
   0B62 C2r2Br0E      [10] 2410 	jp	NZ,00170$
   0B65 3ArC2r01      [13] 2411 	ld	a,(#_level_reset + 0)
   0B68 B7            [ 4] 2412 	or	a, a
   0B69 C2r2Br0E      [10] 2413 	jp	NZ,00170$
                           2414 ;mainloop.h:305: flick_override = 0;
   0B6C 21rC3r01      [10] 2415 	ld	hl,#_flick_override + 0
   0B6F 36 00         [10] 2416 	ld	(hl), #0x00
                           2417 ;mainloop.h:308: flickscreen_do_horizontal ();
   0B71 CDr2Er07      [17] 2418 	call	_flickscreen_do_horizontal
                           2419 ;mainloop.h:309: flickscreen_do_vertical ();
   0B74 CDr79r07      [17] 2420 	call	_flickscreen_do_vertical
                           2421 ;mainloop.h:315: if (on_pant != n_pant) {
   0B77 3ArBBr01      [13] 2422 	ld	a,(#_on_pant + 0)
   0B7A FD 21rBAr01   [14] 2423 	ld	iy,#_n_pant
   0B7E FD 96 00      [19] 2424 	sub	a, 0 (iy)
   0B81 28 09         [12] 2425 	jr	Z,00109$
                           2426 ;mainloop.h:316: prepare_scr ();
   0B83 CDr12r0A      [17] 2427 	call	_prepare_scr
                           2428 ;mainloop.h:317: on_pant = n_pant;
   0B86 3ArBAr01      [13] 2429 	ld	a,(#_n_pant + 0)
   0B89 32rBBr01      [13] 2430 	ld	(#_on_pant + 0),a
   0B8C                    2431 00109$:
                           2432 ;mainloop.h:336: SG_waitForVBlank ();
   0B8C CDr00r00      [17] 2433 	call	_SG_waitForVBlank
                           2434 ;mainloop.h:337: SG_copySpritestoSAT ();
   0B8F CDr00r00      [17] 2435 	call	_SG_copySpritestoSAT
                           2436 ;mainloop.h:338: update_list [update_index] = 0xff;
   0B92 3Er95         [ 7] 2437 	ld	a,#<(_update_list)
   0B94 21r94r00      [10] 2438 	ld	hl,#_update_index
   0B97 86            [ 7] 2439 	add	a, (hl)
   0B98 6F            [ 4] 2440 	ld	l, a
   0B99 3Es00         [ 7] 2441 	ld	a, #>(_update_list)
   0B9B CE 00         [ 7] 2442 	adc	a, #0x00
   0B9D 67            [ 4] 2443 	ld	h, a
   0B9E 36 FF         [10] 2444 	ld	(hl),#0xFF
                           2445 ;mainloop.h:339: SG_doUpdateList ();
   0BA0 CDr00r00      [17] 2446 	call	_SG_doUpdateList
                           2447 ;mainloop.h:340: clear_update_list ();
   0BA3 CDr00r00      [17] 2448 	call	_clear_update_list
                           2449 ;mainloop.h:344: pad_read ();
   0BA6 CDr00r00      [17] 2450 	call	_pad_read
                           2451 ;mainloop.h:345: a_button = (pad_this_frame & PAD_A);
   0BA9 3Ar06r00      [13] 2452 	ld	a,(#_pad_this_frame + 0)
   0BAC E6 20         [ 7] 2453 	and	a, #0x20
   0BAE 67            [ 4] 2454 	ld	h,a
   0BAF FD 21r59r00   [14] 2455 	ld	iy,#_a_button
   0BB3 FD 74 00      [19] 2456 	ld	0 (iy),h
                           2457 ;mainloop.h:346: b_button = (pad_this_frame & PAD_B);
   0BB6 3Ar06r00      [13] 2458 	ld	a,(#_pad_this_frame + 0)
   0BB9 E6 10         [ 7] 2459 	and	a, #0x10
   0BBB 67            [ 4] 2460 	ld	h,a
   0BBC FD 21r5Ar00   [14] 2461 	ld	iy,#_b_button
   0BC0 FD 74 00      [19] 2462 	ld	0 (iy),h
                           2463 ;mainloop.h:350: ntsc_frame ++; if (ntsc_frame == 6) ntsc_frame = 0;
   0BC3 21r93r00      [10] 2464 	ld	hl, #_ntsc_frame+0
   0BC6 34            [11] 2465 	inc	(hl)
   0BC7 3Ar93r00      [13] 2466 	ld	a,(#_ntsc_frame + 0)
   0BCA D6 06         [ 7] 2467 	sub	a, #0x06
   0BCC 20 05         [12] 2468 	jr	NZ,00111$
   0BCE 21r93r00      [10] 2469 	ld	hl,#_ntsc_frame + 0
   0BD1 36 00         [10] 2470 	ld	(hl), #0x00
   0BD3                    2471 00111$:
                           2472 ;mainloop.h:352: if (paused == 0 && (ntsc == 0 || ntsc_frame)) {
   0BD3 3ArBEr01      [13] 2473 	ld	a,(#_paused + 0)
   0BD6 B7            [ 4] 2474 	or	a, a
   0BD7 C2r07r0E      [10] 2475 	jp	NZ,00161$
   0BDA 3Ar92r00      [13] 2476 	ld	a,(#_ntsc + 0)
   0BDD B7            [ 4] 2477 	or	a, a
   0BDE 28 07         [12] 2478 	jr	Z,00160$
   0BE0 3Ar93r00      [13] 2479 	ld	a,(#_ntsc_frame + 0)
   0BE3 B7            [ 4] 2480 	or	a, a
   0BE4 CAr07r0E      [10] 2481 	jp	Z,00161$
   0BE7                    2482 00160$:
                           2483 ;mainloop.h:353: SG_initSprites ();
   0BE7 CDr00r00      [17] 2484 	call	_SG_initSprites
                           2485 ;mainloop.h:356: if (ticker) -- ticker; else ticker = 50;
   0BEA 3Ar1Fr00      [13] 2486 	ld	a,(#_ticker + 0)
   0BED B7            [ 4] 2487 	or	a, a
   0BEE 28 09         [12] 2488 	jr	Z,00113$
   0BF0 FD 21r1Fr00   [14] 2489 	ld	iy,#_ticker
   0BF4 FD 35 00      [23] 2490 	dec	0 (iy)
   0BF7 18 08         [12] 2491 	jr	00114$
   0BF9                    2492 00113$:
   0BF9 FD 21r1Fr00   [14] 2493 	ld	iy,#_ticker
   0BFD FD 36 00 32   [19] 2494 	ld	0 (iy),#0x32
   0C01                    2495 00114$:
                           2496 ;mainloop.h:357: half_life ^= 1;
   0C01 3ArBCr01      [13] 2497 	ld	a,(#_half_life + 0)
   0C04 EE 01         [ 7] 2498 	xor	a, #0x01
   0C06 FD 21rBCr01   [14] 2499 	ld	iy,#_half_life
   0C0A FD 77 00      [19] 2500 	ld	0 (iy),a
                           2501 ;mainloop.h:358: ++ frame_counter;
   0C0D FD 21rBDr01   [14] 2502 	ld	iy,#_frame_counter
   0C11 FD 34 00      [23] 2503 	inc	0 (iy)
                           2504 ;mainloop/hotspots.h:6: if (hrt) {
   0C14 3Ar7Cr00      [13] 2505 	ld	a,(#_hrt + 0)
   0C17 B7            [ 4] 2506 	or	a, a
   0C18 CAr0Fr0D      [10] 2507 	jp	Z,00131$
                           2508 ;mainloop/hotspots.h:7: if (collide_in (prx + 4, pry + 8, hrx, hry)) {
   0C1B 3Ar53r00      [13] 2509 	ld	a,(#_pry + 0)
   0C1E C6 08         [ 7] 2510 	add	a, #0x08
   0C20 5F            [ 4] 2511 	ld	e,a
   0C21 21r52r00      [10] 2512 	ld	hl,#_prx + 0
   0C24 56            [ 7] 2513 	ld	d, (hl)
   0C25 14            [ 4] 2514 	inc	d
   0C26 14            [ 4] 2515 	inc	d
   0C27 14            [ 4] 2516 	inc	d
   0C28 14            [ 4] 2517 	inc	d
   0C29 3Ar7Br00      [13] 2518 	ld	a,(_hry)
   0C2C F5            [11] 2519 	push	af
   0C2D 33            [ 6] 2520 	inc	sp
   0C2E 3Ar7Ar00      [13] 2521 	ld	a,(_hrx)
   0C31 F5            [11] 2522 	push	af
   0C32 33            [ 6] 2523 	inc	sp
   0C33 7B            [ 4] 2524 	ld	a,e
   0C34 F5            [11] 2525 	push	af
   0C35 33            [ 6] 2526 	inc	sp
   0C36 D5            [11] 2527 	push	de
   0C37 33            [ 6] 2528 	inc	sp
   0C38 CDr00r00      [17] 2529 	call	_collide_in
   0C3B F1            [10] 2530 	pop	af
   0C3C F1            [10] 2531 	pop	af
   0C3D 7D            [ 4] 2532 	ld	a,l
   0C3E B7            [ 4] 2533 	or	a, a
   0C3F CAr0Fr0D      [10] 2534 	jp	Z,00131$
                           2535 ;mainloop/hotspots.h:9: if (hrt == HOTSPOT_TYPE_RESONATOR) {
   0C42 3Ar7Cr00      [13] 2536 	ld	a,(#_hrt + 0)
   0C45 D6 04         [ 7] 2537 	sub	a, #0x04
   0C47 20 49         [12] 2538 	jr	NZ,00126$
                           2539 ;mainloop/hotspots.h:10: if (pvy > 0 && pry < hry) {
   0C49 AF            [ 4] 2540 	xor	a, a
   0C4A FD 21r50r00   [14] 2541 	ld	iy,#_pvy
   0C4E FD BE 00      [19] 2542 	cp	a, 0 (iy)
   0C51 FD 21r50r00   [14] 2543 	ld	iy,#_pvy
   0C55 FD 9E 01      [19] 2544 	sbc	a, 1 (iy)
   0C58 E2r5Dr0C      [10] 2545 	jp	PO, 00315$
   0C5B EE 80         [ 7] 2546 	xor	a, #0x80
   0C5D                    2547 00315$:
   0C5D F2r0Fr0D      [10] 2548 	jp	P,00131$
   0C60 21r7Br00      [10] 2549 	ld	hl,#_hry
   0C63 3Ar53r00      [13] 2550 	ld	a,(#_pry + 0)
   0C66 96            [ 7] 2551 	sub	a, (hl)
   0C67 D2r0Fr0D      [10] 2552 	jp	NC,00131$
                           2553 ;mainloop/hotspots.h:11: if (res_on == 0) {
   0C6A 3ArB1r02      [13] 2554 	ld	a,(#_res_on + 0)
   0C6D B7            [ 4] 2555 	or	a, a
   0C6E C2r0Fr0D      [10] 2556 	jp	NZ,00131$
                           2557 ;mainloop/hotspots.h:12: res_on = 1; res_ct = 9; res_subct = 50;
   0C71 21rB1r02      [10] 2558 	ld	hl,#_res_on + 0
   0C74 36 01         [10] 2559 	ld	(hl), #0x01
   0C76 21rB2r02      [10] 2560 	ld	hl,#_res_ct + 0
   0C79 36 09         [10] 2561 	ld	(hl), #0x09
   0C7B 21rB3r02      [10] 2562 	ld	hl,#_res_subct + 0
   0C7E 36 32         [10] 2563 	ld	(hl), #0x32
                           2564 ;mainloop/hotspots.h:13: jump_start ();
   0C80 CDr00r00      [17] 2565 	call	_jump_start
                           2566 ;mainloop/hotspots.h:23: PSGSFXPlay (SFX_BREAKH, 2);
   0C83 11r00r00      [10] 2567 	ld	de,#_s_13_breakh3_psg
   0C86 3E 02         [ 7] 2568 	ld	a,#0x02
   0C88 F5            [11] 2569 	push	af
   0C89 33            [ 6] 2570 	inc	sp
   0C8A D5            [11] 2571 	push	de
   0C8B CDr00r00      [17] 2572 	call	_PSGSFXPlay
   0C8E F1            [10] 2573 	pop	af
   0C8F 33            [ 6] 2574 	inc	sp
   0C90 18 7D         [12] 2575 	jr	00131$
   0C92                    2576 00126$:
                           2577 ;mainloop/hotspots.h:128: rda = 0; rdm = 1;
   0C92 FD 21r18r00   [14] 2578 	ld	iy,#_rda
   0C96 FD 36 00 00   [19] 2579 	ld	0 (iy),#0x00
   0C9A FD 21r1Cr00   [14] 2580 	ld	iy,#_rdm
   0C9E FD 36 00 01   [19] 2581 	ld	0 (iy),#0x01
                           2582 ;mainloop/hotspots.h:129: switch (hrt) {
   0CA2 3Ar7Cr00      [13] 2583 	ld	a,(#_hrt + 0)
   0CA5 FE 02         [ 7] 2584 	cp	a,#0x02
   0CA7 28 06         [12] 2585 	jr	Z,00120$
   0CA9 D6 03         [ 7] 2586 	sub	a, #0x03
   0CAB 28 1B         [12] 2587 	jr	Z,00121$
   0CAD 18 38         [12] 2588 	jr	00122$
                           2589 ;mainloop/hotspots.h:151: case HOTSPOT_TYPE_KEYS:
   0CAF                    2590 00120$:
                           2591 ;mainloop/hotspots.h:152: ++ pkeys;
   0CAF FD 21r70r00   [14] 2592 	ld	iy,#_pkeys
   0CB3 FD 34 00      [23] 2593 	inc	0 (iy)
                           2594 ;mainloop/hotspots.h:153: gp_gen = SFX_OBJECT;
   0CB6 FD 21r0Cr00   [14] 2595 	ld	iy,#_gp_gen
   0CBA FD 36 00r00   [19] 2596 	ld	0 (iy),#<(_s_02_object2_psg)
   0CBE FD 21r0Cr00   [14] 2597 	ld	iy,#_gp_gen
   0CC2 FD 36 01s00   [19] 2598 	ld	1 (iy),#>(_s_02_object2_psg)
                           2599 ;mainloop/hotspots.h:154: break;
   0CC6 18 1F         [12] 2600 	jr	00122$
                           2601 ;mainloop/hotspots.h:156: case HOTSPOT_TYPE_REFILL:
   0CC8                    2602 00121$:
                           2603 ;mainloop/hotspots.h:157: plife += PLAYER_REFILL;
   0CC8 FD 21r6Fr00   [14] 2604 	ld	iy,#_plife
   0CCC FD 34 00      [23] 2605 	inc	0 (iy)
                           2606 ;mainloop/hotspots.h:161: gp_gen = SFX_USE;
   0CCF FD 21r0Cr00   [14] 2607 	ld	iy,#_gp_gen
   0CD3 FD 36 00r00   [19] 2608 	ld	0 (iy),#<(_s_03_use3_psg)
   0CD7 FD 21r0Cr00   [14] 2609 	ld	iy,#_gp_gen
   0CDB FD 36 01s00   [19] 2610 	ld	1 (iy),#>(_s_03_use3_psg)
                           2611 ;mainloop/hotspots.h:162: rdm = 2;
   0CDF FD 21r1Cr00   [14] 2612 	ld	iy,#_rdm
   0CE3 FD 36 00 02   [19] 2613 	ld	0 (iy),#0x02
                           2614 ;mainloop/hotspots.h:192: }
   0CE7                    2615 00122$:
                           2616 ;mainloop/hotspots.h:193: if (rda) {
   0CE7 3Ar18r00      [13] 2617 	ld	a,(#_rda + 0)
   0CEA B7            [ 4] 2618 	or	a, a
   0CEB 28 22         [12] 2619 	jr	Z,00131$
                           2620 ;mainloop/hotspots.h:194: PSGSFXPlay (gp_gen, rdm);
   0CED ED 5Br0Cr00   [20] 2621 	ld	de,(_gp_gen)
   0CF1 3Ar1Cr00      [13] 2622 	ld	a,(_rdm)
   0CF4 F5            [11] 2623 	push	af
   0CF5 33            [ 6] 2624 	inc	sp
   0CF6 D5            [11] 2625 	push	de
   0CF7 CDr00r00      [17] 2626 	call	_PSGSFXPlay
   0CFA F1            [10] 2627 	pop	af
   0CFB 33            [ 6] 2628 	inc	sp
                           2629 ;mainloop/hotspots.h:195: hrt = 0;
   0CFC 21r7Cr00      [10] 2630 	ld	hl,#_hrt + 0
   0CFF 36 00         [10] 2631 	ld	(hl), #0x00
                           2632 ;mainloop/hotspots.h:196: hact [n_pant] = 0;
   0D01 3ErCC         [ 7] 2633 	ld	a,#<(_hact)
   0D03 21rBAr01      [10] 2634 	ld	hl,#_n_pant
   0D06 86            [ 7] 2635 	add	a, (hl)
   0D07 5F            [ 4] 2636 	ld	e,a
   0D08 3Es01         [ 7] 2637 	ld	a,#>(_hact)
   0D0A CE 00         [ 7] 2638 	adc	a, #0x00
   0D0C 57            [ 4] 2639 	ld	d,a
   0D0D AF            [ 4] 2640 	xor	a, a
   0D0E 12            [ 7] 2641 	ld	(de),a
   0D0F                    2642 00131$:
                           2643 ;mainloop.h:378: if (!warp_to_level) {
   0D0F 3ArC1r01      [13] 2644 	ld	a,(#_warp_to_level + 0)
   0D12 B7            [ 4] 2645 	or	a, a
   0D13 20 03         [12] 2646 	jr	NZ,00133$
                           2647 ;mainloop.h:379: player_move ();
   0D15 CDr00r00      [17] 2648 	call	_player_move
   0D18                    2649 00133$:
                           2650 ;my/extra_checks.h:14: if (c_max_enems == pkilled) {
   0D18 3ArB9r01      [13] 2651 	ld	a,(#_c_max_enems + 0)
   0D1B FD 21r73r00   [14] 2652 	ld	iy,#_pkilled
   0D1F FD 96 00      [19] 2653 	sub	a, 0 (iy)
   0D22 20 17         [12] 2654 	jr	NZ,00139$
                           2655 ;my/extra_checks.h:16: en_cttouched [0] == 0 &&
   0D24 3Ar1Dr02      [13] 2656 	ld	a, (#_en_cttouched + 0)
   0D27 B7            [ 4] 2657 	or	a, a
   0D28 20 11         [12] 2658 	jr	NZ,00139$
                           2659 ;my/extra_checks.h:17: en_cttouched [1] == 0 &&
   0D2A 3Ar1Er02      [13] 2660 	ld	a, (#_en_cttouched + 1)
   0D2D B7            [ 4] 2661 	or	a, a
   0D2E 20 0B         [12] 2662 	jr	NZ,00139$
                           2663 ;my/extra_checks.h:18: en_cttouched [2] == 0
   0D30 3Ar1Fr02      [13] 2664 	ld	a, (#_en_cttouched + 2)
   0D33 B7            [ 4] 2665 	or	a, a
   0D34 20 05         [12] 2666 	jr	NZ,00139$
                           2667 ;my/extra_checks.h:19: ) win_level = 1;
   0D36 21rBFr01      [10] 2668 	ld	hl,#_win_level + 0
   0D39 36 01         [10] 2669 	ld	(hl), #0x01
   0D3B                    2670 00139$:
                           2671 ;mainloop/win_level_condition.h:10: win_level
   0D3B 3ArBFr01      [13] 2672 	ld	a,(#_win_level + 0)
   0D3E B7            [ 4] 2673 	or	a, a
   0D3F 28 0E         [12] 2674 	jr	Z,00141$
                           2675 ;mainloop/win_level_condition.h:23: PSGStop ();
   0D41 CDr00r00      [17] 2676 	call	_PSGStop
                           2677 ;mainloop/win_level_condition.h:24: delay (50);
   0D44 3E 32         [ 7] 2678 	ld	a,#0x32
   0D46 F5            [11] 2679 	push	af
   0D47 33            [ 6] 2680 	inc	sp
   0D48 CDr00r00      [17] 2681 	call	_delay
   0D4B 33            [ 6] 2682 	inc	sp
                           2683 ;mainloop/win_level_condition.h:25: break;
   0D4C C3r2Br0E      [10] 2684 	jp	00170$
   0D4F                    2685 00141$:
                           2686 ;mainloop.h:416: cur_stp = SG_getStp (); 
   0D4F CDr00r00      [17] 2687 	call	_SG_getStp
   0D52 22r27r00      [16] 2688 	ld	(_cur_stp),hl
                           2689 ;mainloop.h:417: if (!warp_to_level)	player_render ();
   0D55 3ArC1r01      [13] 2690 	ld	a,(#_warp_to_level + 0)
   0D58 B7            [ 4] 2691 	or	a, a
   0D59 20 03         [12] 2692 	jr	NZ,00143$
   0D5B CDr00r00      [17] 2693 	call	_player_render
   0D5E                    2694 00143$:
                           2695 ;mainloop.h:421: enems_move ();
   0D5E CDr00r00      [17] 2696 	call	_enems_move
                           2697 ;mainloop.h:425: if (warp_to_level) {
   0D61 3ArC1r01      [13] 2698 	ld	a,(#_warp_to_level + 0)
   0D64 B7            [ 4] 2699 	or	a, a
   0D65 28 09         [12] 2700 	jr	Z,00145$
                           2701 ;mainloop.h:426: update_cycle (); PSGStop (); break;
   0D67 CDr00r00      [17] 2702 	call	_update_cycle
   0D6A CDr00r00      [17] 2703 	call	_PSGStop
   0D6D C3r2Br0E      [10] 2704 	jp	00170$
   0D70                    2705 00145$:
                           2706 ;mainloop/resonators.h:5: if (res_on) {
   0D70 3ArB1r02      [13] 2707 	ld	a,(#_res_on + 0)
   0D73 B7            [ 4] 2708 	or	a, a
   0D74 28 62         [12] 2709 	jr	Z,00155$
                           2710 ;mainloop/resonators.h:7: gp_addr = ((RESONATOR_COUNTER_Y << 5) | RESONATOR_COUNTER_X) + PNTADDRESS;
   0D76 21 3D 18      [10] 2711 	ld	hl,#0x183D
   0D79 22r12r00      [16] 2712 	ld	(_gp_addr),hl
                           2713 ;mainloop/resonators.h:8: _n = 16 + res_ct; 
   0D7C 21r02r00      [10] 2714 	ld	hl,#__n
   0D7F 3ArB2r02      [13] 2715 	ld	a,(#_res_ct + 0)
   0D82 C6 10         [ 7] 2716 	add	a, #0x10
   0D84 77            [ 7] 2717 	ld	(hl),a
                           2718 ;mainloop/resonators.h:9: ul_putc ();
   0D85 CDr00r00      [17] 2719 	call	_ul_putc
                           2720 ;mainloop/resonators.h:12: if (res_subct) -- res_subct; else {
   0D88 3ArB3r02      [13] 2721 	ld	a,(#_res_subct + 0)
   0D8B B7            [ 4] 2722 	or	a, a
   0D8C 28 09         [12] 2723 	jr	Z,00152$
   0D8E FD 21rB3r02   [14] 2724 	ld	iy,#_res_subct
   0D92 FD 35 00      [23] 2725 	dec	0 (iy)
   0D95 18 41         [12] 2726 	jr	00155$
   0D97                    2727 00152$:
                           2728 ;mainloop/resonators.h:13: res_subct = 50;
   0D97 FD 21rB3r02   [14] 2729 	ld	iy,#_res_subct
   0D9B FD 36 00 32   [19] 2730 	ld	0 (iy),#0x32
                           2731 ;mainloop/resonators.h:14: if (res_ct) { 
   0D9F 3ArB2r02      [13] 2732 	ld	a,(#_res_ct + 0)
   0DA2 B7            [ 4] 2733 	or	a, a
   0DA3 28 21         [12] 2734 	jr	Z,00149$
                           2735 ;mainloop/resonators.h:15: -- res_ct; 
   0DA5 FD 21rB2r02   [14] 2736 	ld	iy,#_res_ct
   0DA9 FD 35 00      [23] 2737 	dec	0 (iy)
                           2738 ;mainloop/resonators.h:16: if (res_ct <= 5) PSGSFXPlay (SFX_COUNT, 1);
   0DAC 3E 05         [ 7] 2739 	ld	a,#0x05
   0DAE FD 21rB2r02   [14] 2740 	ld	iy,#_res_ct
   0DB2 FD 96 00      [19] 2741 	sub	a, 0 (iy)
   0DB5 38 21         [12] 2742 	jr	C,00155$
   0DB7 11r00r00      [10] 2743 	ld	de,#_s_12_count2_psg
   0DBA 3E 01         [ 7] 2744 	ld	a,#0x01
   0DBC F5            [11] 2745 	push	af
   0DBD 33            [ 6] 2746 	inc	sp
   0DBE D5            [11] 2747 	push	de
   0DBF CDr00r00      [17] 2748 	call	_PSGSFXPlay
   0DC2 F1            [10] 2749 	pop	af
   0DC3 33            [ 6] 2750 	inc	sp
   0DC4 18 12         [12] 2751 	jr	00155$
   0DC6                    2752 00149$:
                           2753 ;mainloop/resonators.h:18: res_on = 0;
   0DC6 21rB1r02      [10] 2754 	ld	hl,#_res_on + 0
   0DC9 36 00         [10] 2755 	ld	(hl), #0x00
                           2756 ;mainloop/resonators.h:19: PSGSFXPlay (SFX_SPRING, 1); 
   0DCB 11r00r00      [10] 2757 	ld	de,#_s_11_spring2_psg
   0DCE 3E 01         [ 7] 2758 	ld	a,#0x01
   0DD0 F5            [11] 2759 	push	af
   0DD1 33            [ 6] 2760 	inc	sp
   0DD2 D5            [11] 2761 	push	de
   0DD3 CDr00r00      [17] 2762 	call	_PSGSFXPlay
   0DD6 F1            [10] 2763 	pop	af
   0DD7 33            [ 6] 2764 	inc	sp
   0DD8                    2765 00155$:
                           2766 ;mainloop.h:437: if (hrt) hotspots_paint ();
   0DD8 3Ar7Cr00      [13] 2767 	ld	a,(#_hrt + 0)
   0DDB B7            [ 4] 2768 	or	a, a
   0DDC 28 03         [12] 2769 	jr	Z,00157$
   0DDE CDr38r02      [17] 2770 	call	_hotspots_paint
   0DE1                    2771 00157$:
                           2772 ;mainloop/no.h:5: if (no_ct) {
   0DE1 3ArCAr01      [13] 2773 	ld	a,(#_no_ct + 0)
   0DE4 B7            [ 4] 2774 	or	a, a
   0DE5 28 1D         [12] 2775 	jr	Z,00159$
                           2776 ;mainloop/no.h:6: -- no_ct;
   0DE7 FD 21rCAr01   [14] 2777 	ld	iy,#_no_ct
   0DEB FD 35 00      [23] 2778 	dec	0 (iy)
                           2779 ;mainloop/no.h:9: NO_METASPRITE
   0DEE 11r00r00      [10] 2780 	ld	de,#_ss_it_06
                           2781 ;mainloop/no.h:8: prx + NO_OFFS_X, pry + NO_OFFS_Y + SPRITE_ADJUST,
   0DF1 3Ar53r00      [13] 2782 	ld	a,(#_pry + 0)
   0DF4 C6 E3         [ 7] 2783 	add	a, #0xE3
   0DF6 67            [ 4] 2784 	ld	h,a
   0DF7 D5            [11] 2785 	push	de
   0DF8 E5            [11] 2786 	push	hl
   0DF9 33            [ 6] 2787 	inc	sp
   0DFA 3Ar52r00      [13] 2788 	ld	a,(_prx)
   0DFD F5            [11] 2789 	push	af
   0DFE 33            [ 6] 2790 	inc	sp
   0DFF CDr00r00      [17] 2791 	call	_SG_addMetaSprite1x1
   0E02 F1            [10] 2792 	pop	af
   0E03 F1            [10] 2793 	pop	af
   0E04                    2794 00159$:
                           2795 ;mainloop.h:466: chac_chacs_do ();
   0E04 CDr00r00      [17] 2796 	call	_chac_chacs_do
   0E07                    2797 00161$:
                           2798 ;mainloop/cheat.h:5: if ((pad0 & (PAD_B|PAD_SELECT|PAD_UP)) == (PAD_B|PAD_SELECT|PAD_UP)) break;
   0E07 3Ar04r00      [13] 2799 	ld	a,(#_pad0 + 0)
   0E0A E6 31         [ 7] 2800 	and	a, #0x31
   0E0C 2E 00         [ 7] 2801 	ld	l, #0x00
   0E0E D6 31         [ 7] 2802 	sub	a,#0x31
   0E10 20 03         [12] 2803 	jr	NZ,00320$
   0E12 B5            [ 4] 2804 	or	a,l
   0E13 28 16         [12] 2805 	jr	Z,00170$
   0E15                    2806 00320$:
   0E15 CDr00r00      [17] 2807 	call	_SG_queryPauseRequested
   0E18 CB 45         [ 8] 2808 	bit	0,l
   0E1A CAr52r0B      [10] 2809 	jp	Z,00169$
                           2810 ;mainloop/pause.h:6: SG_resetPauseRequest ();
   0E1D CDr00r00      [17] 2811 	call	_SG_resetPauseRequest
                           2812 ;mainloop/pause.h:7: paused ^= 1;
   0E20 3ArBEr01      [13] 2813 	ld	a,(#_paused + 0)
   0E23 EE 01         [ 7] 2814 	xor	a, #0x01
   0E25 32rBEr01      [13] 2815 	ld	(#_paused + 0),a
   0E28 C3r52r0B      [10] 2816 	jp	00169$
   0E2B                    2817 00170$:
                           2818 ;mainloop.h:481: PSGStop ();
   0E2B CDr00r00      [17] 2819 	call	_PSGStop
                           2820 ;mainloop.h:482: PSGSFXStop ();
   0E2E CDr00r00      [17] 2821 	call	_PSGSFXStop
                           2822 ;mainloop.h:483: SG_displayOff ();
   0E31 21 40 01      [10] 2823 	ld	hl,#0x0140
   0E34 E5            [11] 2824 	push	hl
   0E35 CDr00r00      [17] 2825 	call	_SG_VDPturnOffFeature
   0E38 F1            [10] 2826 	pop	af
                           2827 ;mainloop.h:484: SG_initSprites ();
   0E39 CDr00r00      [17] 2828 	call	_SG_initSprites
                           2829 ;mainloop.h:485: SG_copySpritestoSAT ();	
   0E3C C3r00r00      [10] 2830 	jp  _SG_copySpritestoSAT
                           2831 ;game.c:107: void main(void) {
                           2832 ;	---------------------------------
                           2833 ; Function main
                           2834 ; ---------------------------------
   0E3F                    2835 _main::
                           2836 ;game.c:108: SG_displayOff ();
   0E3F 21 40 01      [10] 2837 	ld	hl,#0x0140
   0E42 E5            [11] 2838 	push	hl
   0E43 CDr00r00      [17] 2839 	call	_SG_VDPturnOffFeature
                           2840 ;game.c:109: SG_setSpriteMode (SG_SPRITEMODE_LARGE);
   0E46 26 01         [ 7] 2841 	ld	h,#0x01
   0E48 E3            [19] 2842 	ex	(sp),hl
   0E49 33            [ 6] 2843 	inc	sp
   0E4A CDr00r00      [17] 2844 	call	_SG_setSpriteMode
   0E4D 33            [ 6] 2845 	inc	sp
                           2846 ;game.c:110: SG_setUpdateList (update_list);
   0E4E 21r95r00      [10] 2847 	ld	hl,#_update_list
   0E51 E5            [11] 2848 	push	hl
   0E52 CDr00r00      [17] 2849 	call	_SG_setUpdateList
   0E55 F1            [10] 2850 	pop	af
                           2851 ;game.c:111: first_game = 1;
   0E56 21rB7r01      [10] 2852 	ld	hl,#_first_game + 0
   0E59 36 01         [10] 2853 	ld	(hl), #0x01
                           2854 ;game.c:114: ntsc = !!(SMS_VDPType () & VDP_NTSC);
   0E5B CDr00r00      [17] 2855 	call	_SMS_VDPType
   0E5E CB 75         [ 8] 2856 	bit	6, l
   0E60 28 04         [12] 2857 	jr	Z,00114$
   0E62 3E 01         [ 7] 2858 	ld	a,#0x01
   0E64 18 02         [12] 2859 	jr	00115$
   0E66                    2860 00114$:
   0E66 3E 00         [ 7] 2861 	ld	a,#0x00
   0E68                    2862 00115$:
   0E68 32r92r00      [13] 2863 	ld	(#_ntsc + 0),a
                           2864 ;game.c:117: unpack_bg_patterns (tsfont_patterns_c, tsfont_colours_c, 0, 7);
   0E6B 11r00r00      [10] 2865 	ld	de,#_tsfont_patterns_c
   0E6E 3E 07         [ 7] 2866 	ld	a,#0x07
   0E70 F5            [11] 2867 	push	af
   0E71 33            [ 6] 2868 	inc	sp
   0E72 21 00 00      [10] 2869 	ld	hl,#0x0000
   0E75 E5            [11] 2870 	push	hl
   0E76 21r00r00      [10] 2871 	ld	hl,#_tsfont_colours_c
   0E79 E5            [11] 2872 	push	hl
   0E7A D5            [11] 2873 	push	de
   0E7B CDr00r00      [17] 2874 	call	_unpack_bg_patterns
   0E7E 21 07 00      [10] 2875 	ld	hl,#7
   0E81 39            [11] 2876 	add	hl,sp
   0E82 F9            [ 6] 2877 	ld	sp,hl
                           2878 ;game.c:119: credits ();
   0E83 CDr2Br06      [17] 2879 	call	_credits
                           2880 ;game.c:122: aPLib_depack_VRAM (SGT_BASE, ss_fixed_patterns_c);
   0E86 21r00r00      [10] 2881 	ld	hl,#_ss_fixed_patterns_c
   0E89 E5            [11] 2882 	push	hl
   0E8A 21 00 38      [10] 2883 	ld	hl,#0x3800
   0E8D E5            [11] 2884 	push	hl
   0E8E CDr00r00      [17] 2885 	call	_aPLib_depack_VRAM
   0E91 F1            [10] 2886 	pop	af
   0E92 F1            [10] 2887 	pop	af
                           2888 ;game.c:124: mode_no_resonators = 0;
   0E93 21rB7r02      [10] 2889 	ld	hl,#_mode_no_resonators + 0
   0E96 36 00         [10] 2890 	ld	(hl), #0x00
                           2891 ;game.c:125: while (1) {	
   0E98                    2892 00110$:
                           2893 ;game.c:126: title ();
   0E98 CDrABr03      [17] 2894 	call	_title
                           2895 ;game.c:128: level = 0;
   0E9B 21rB8r01      [10] 2896 	ld	hl,#_level + 0
   0E9E 36 00         [10] 2897 	ld	(hl), #0x00
                           2898 ;game.c:129: plife = PLAYER_LIFE;
   0EA0 21r6Fr00      [10] 2899 	ld	hl,#_plife + 0
   0EA3 36 05         [10] 2900 	ld	(hl), #0x05
                           2901 ;game.c:133: while (1) {
   0EA5                    2902 00107$:
                           2903 ;game.c:134: pres (scr_level, 0);
   0EA5 21 00 00      [10] 2904 	ld	hl,#0x0000
   0EA8 E5            [11] 2905 	push	hl
   0EA9 21rBCr05      [10] 2906 	ld	hl,#_scr_level
   0EAC E5            [11] 2907 	push	hl
   0EAD CDr78r03      [17] 2908 	call	_pres
   0EB0 F1            [10] 2909 	pop	af
   0EB1 F1            [10] 2910 	pop	af
                           2911 ;game.c:135: game_init (); 
   0EB2 CDr1Cr08      [17] 2912 	call	_game_init
                           2913 ;game.c:136: game_loop ();
   0EB5 CDr0Er0B      [17] 2914 	call	_game_loop
                           2915 ;game.c:138: if (game_over) {
   0EB8 3ArC0r01      [13] 2916 	ld	a,(#_game_over + 0)
   0EBB B7            [ 4] 2917 	or	a, a
   0EBC 28 0F         [12] 2918 	jr	Z,00104$
                           2919 ;game.c:139: pres (scr_game_over, MUSIC_GOVER);
   0EBE 21r00r00      [10] 2920 	ld	hl,#_m_gover_psg
   0EC1 E5            [11] 2921 	push	hl
   0EC2 21rF3r04      [10] 2922 	ld	hl,#_scr_game_over
   0EC5 E5            [11] 2923 	push	hl
   0EC6 CDr78r03      [17] 2924 	call	_pres
   0EC9 F1            [10] 2925 	pop	af
   0ECA F1            [10] 2926 	pop	af
                           2927 ;game.c:140: break;
   0ECB 18 18         [12] 2928 	jr	00108$
   0ECD                    2929 00104$:
                           2930 ;game.c:142: level ++;
   0ECD 21rB8r01      [10] 2931 	ld	hl, #_level+0
   0ED0 34            [11] 2932 	inc	(hl)
                           2933 ;game.c:143: if (level == MAX_LEVELS) {
   0ED1 3ArB8r01      [13] 2934 	ld	a,(#_level + 0)
   0ED4 D6 03         [ 7] 2935 	sub	a, #0x03
   0ED6 20 CD         [12] 2936 	jr	NZ,00107$
                           2937 ;game.c:144: pres (scr_the_end, 0);
   0ED8 21 00 00      [10] 2938 	ld	hl,#0x0000
   0EDB E5            [11] 2939 	push	hl
   0EDC 21r11r05      [10] 2940 	ld	hl,#_scr_the_end
   0EDF E5            [11] 2941 	push	hl
   0EE0 CDr78r03      [17] 2942 	call	_pres
   0EE3 F1            [10] 2943 	pop	af
   0EE4 F1            [10] 2944 	pop	af
                           2945 ;game.c:145: break;
   0EE5                    2946 00108$:
                           2947 ;game.c:150: first_game = 0;
   0EE5 21rB7r01      [10] 2948 	ld	hl,#_first_game + 0
   0EE8 36 00         [10] 2949 	ld	(hl), #0x00
   0EEA 18 AC         [12] 2950 	jr	00110$
                           2951 	.area _CODE
                           2952 	.area _INITIALIZER
                           2953 	.area _CABS (ABS)
