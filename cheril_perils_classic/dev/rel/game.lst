                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.2 #9293 (MINGW32)
                              4 ; This file was generated Fri Nov 02 11:34:07 2018
                              5 ;--------------------------------------------------------
                              6 	.module game
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _game_loop
                             14 	.globl _prepare_scr
                             15 	.globl _game_init
                             16 	.globl _flickscreen_do_vertical
                             17 	.globl _flickscreen_do_horizontal
                             18 	.globl _credits
                             19 	.globl _scr_level
                             20 	.globl _scr_the_end
                             21 	.globl _scr_game_over
                             22 	.globl _title
                             23 	.globl _pres
                             24 	.globl _bat_out
                             25 	.globl _bat_in
                             26 	.globl _hud_update
                             27 	.globl _draw_game_frame
                             28 	.globl _enems_move
                             29 	.globl _enems_load
                             30 	.globl _enems_persistent_deaths_load
                             31 	.globl _enems_persistent_update
                             32 	.globl _enems_persistent_load
                             33 	.globl _player_move
                             34 	.globl _player_kill
                             35 	.globl _player_to_pixels
                             36 	.globl _player_render
                             37 	.globl _player_init
                             38 	.globl _chac_chacs_do
                             39 	.globl _hotspots_create
                             40 	.globl _hotspots_paint
                             41 	.globl _hotspots_load
                             42 	.globl _update_cycle
                             43 	.globl _jump_start
                             44 	.globl _pad_read
                             45 	.globl _collide_in
                             46 	.globl _pr_str
                             47 	.globl _draw_scr
                             48 	.globl _p_t
                             49 	.globl _ul_putc
                             50 	.globl _cls
                             51 	.globl _clear_update_list
                             52 	.globl _unrle
                             53 	.globl _unpack_bg_patterns
                             54 	.globl _memfill
                             55 	.globl _delay
                             56 	.globl _aPLib_depack_VRAM
                             57 	.globl _PSGSFXStop
                             58 	.globl _PSGStop
                             59 	.globl _PSGPlay
                             60 	.globl _SG_doUpdateList
                             61 	.globl _SG_setUpdateList
                             62 	.globl _SMS_VDPType
                             63 	.globl _SG_copySpritestoSAT
                             64 	.globl _SG_resetPauseRequest
                             65 	.globl _SG_queryPauseRequested
                             66 	.globl _SG_getKeysStatus
                             67 	.globl _SG_getStp
                             68 	.globl _SG_addMetaSprite1x1
                             69 	.globl _SG_initSprites
                             70 	.globl _SG_setTile
                             71 	.globl _SG_waitForVBlank
                             72 	.globl _SG_setSpriteMode
                             73 	.globl _SG_VDPturnOffFeature
                             74 	.globl _SG_VDPturnOnFeature
                             75 	.globl _game_mode
                             76 	.globl _mode_no_resonators
                             77 	.globl _shaker_ct
                             78 	.globl _springs_on
                             79 	.globl _cfx
                             80 	.globl _res_subct
                             81 	.globl _res_ct
                             82 	.globl _res_on
                             83 	.globl _res_disable
                             84 	.globl _chac_chacs_queue_write
                             85 	.globl _chac_chacs_queue_read
                             86 	.globl _chac_chacs_queue
                             87 	.globl _chac_chacs_ct
                             88 	.globl _chac_chacs_idlewait
                             89 	.globl _chac_chacs_state
                             90 	.globl _chac_chacs_yx
                             91 	.globl _max_chac_chacs
                             92 	.globl _ep_dead
                             93 	.globl _en_spr_id
                             94 	.globl _enf_vy
                             95 	.globl _enf_y
                             96 	.globl _enf_vx
                             97 	.globl _enf_x
                             98 	.globl _en_spr_x_mod
                             99 	.globl _en_ct
                            100 	.globl _en_status
                            101 	.globl _en_life
                            102 	.globl _en_cttouched
                            103 	.globl _en_flags
                            104 	.globl _en_state
                            105 	.globl _en_facing
                            106 	.globl _en_s
                            107 	.globl _en_my
                            108 	.globl _en_mx
                            109 	.globl _en_y2
                            110 	.globl _en_x2
                            111 	.globl _en_y1
                            112 	.globl _en_x1
                            113 	.globl _en_y
                            114 	.globl _en_x
                            115 	.globl _en_t
                            116 	.globl _flags
                            117 	.globl _lkact
                            118 	.globl _hact
                            119 	.globl _pctfr
                            120 	.globl _no_ct
                            121 	.globl _oam_index_player
                            122 	.globl _okilled
                            123 	.globl _oammo
                            124 	.globl _oobjs
                            125 	.globl _okeys
                            126 	.globl _olife
                            127 	.globl _flick_override
                            128 	.globl _level_reset
                            129 	.globl _warp_to_level
                            130 	.globl _game_over
                            131 	.globl _win_level
                            132 	.globl _paused
                            133 	.globl _frame_counter
                            134 	.globl _half_life
                            135 	.globl _on_pant
                            136 	.globl _n_pant
                            137 	.globl _c_max_enems
                            138 	.globl _level
                            139 	.globl _first_game
                            140 	.globl _map_buff
                            141 	.globl _fade_delay
                            142 	.globl _fader
                            143 	.globl _update_list
                            144 	.globl _update_index
                            145 	.globl _ntsc_frame
                            146 	.globl _ntsc
                            147 	.globl _c_max_bolts
                            148 	.globl _c_hotspots
                            149 	.globl _c_enems
                            150 	.globl _c_locks
                            151 	.globl _c_decos
                            152 	.globl _c_map
                            153 	.globl _spr_enems
                            154 	.globl _c_behs
                            155 	.globl _c_ts_tmaps
                            156 	.globl _c_map_size
                            157 	.globl _c_map_h
                            158 	.globl _c_map_w
                            159 	.globl _ft
                            160 	.globl _do_process_breakable
                            161 	.globl _hrt
                            162 	.globl _hry
                            163 	.globl _hrx
                            164 	.globl _py_safe
                            165 	.globl _px_safe
                            166 	.globl _n_pant_safe
                            167 	.globl _pfiring
                            168 	.globl _pkilled
                            169 	.globl _pammo
                            170 	.globl _pobjs
                            171 	.globl _pkeys
                            172 	.globl _plife
                            173 	.globl _pcontinues
                            174 	.globl _pnotsafe
                            175 	.globl _pice
                            176 	.globl _pkill
                            177 	.globl _pry_old
                            178 	.globl _prx_old
                            179 	.globl _hith
                            180 	.globl _hitv
                            181 	.globl _pgtmy
                            182 	.globl _pgtmx
                            183 	.globl _phit
                            184 	.globl _pbouncing
                            185 	.globl _pflickering
                            186 	.globl _oppossee
                            187 	.globl _ppossee
                            188 	.globl _pgotten
                            189 	.globl _pctj
                            190 	.globl _pj
                            191 	.globl _b_button
                            192 	.globl _a_button
                            193 	.globl _psprid
                            194 	.globl _pfr
                            195 	.globl _pfacing
                            196 	.globl _pcy
                            197 	.globl _pcx
                            198 	.globl _pry
                            199 	.globl _prx
                            200 	.globl _pvy
                            201 	.globl _pvx
                            202 	.globl _py
                            203 	.globl _px
                            204 	.globl _vertical_engine_type
                            205 	.globl _en_sg_2
                            206 	.globl _en_sg_1
                            207 	.globl __enf_vy
                            208 	.globl __enf_vx
                            209 	.globl __enf_y
                            210 	.globl __enf_x
                            211 	.globl __en_state
                            212 	.globl __en_facing
                            213 	.globl __en_ct
                            214 	.globl __en_my
                            215 	.globl __en_mx
                            216 	.globl __en_y2
                            217 	.globl __en_x2
                            218 	.globl __en_y1
                            219 	.globl __en_x1
                            220 	.globl __en_y
                            221 	.globl __en_x
                            222 	.globl __en_s
                            223 	.globl __en_t
                            224 	.globl _pregotten
                            225 	.globl _en_is_alive
                            226 	.globl _touched
                            227 	.globl _en_spr
                            228 	.globl _en_colly
                            229 	.globl _en_collx
                            230 	.globl _en_fr
                            231 	.globl _en_offs
                            232 	.globl _en_initial
                            233 	.globl _cur_stp
                            234 	.globl _caux
                            235 	.globl _cy2
                            236 	.globl _cy1
                            237 	.globl _cx2
                            238 	.globl _cx1
                            239 	.globl _at2
                            240 	.globl _at1
                            241 	.globl _ticker
                            242 	.globl _rdct
                            243 	.globl _rds
                            244 	.globl _rdm
                            245 	.globl _rdd
                            246 	.globl _rdc
                            247 	.globl _rdb
                            248 	.globl _rda
                            249 	.globl _rdit
                            250 	.globl _rdt
                            251 	.globl _rdy
                            252 	.globl _rdx
                            253 	.globl _gp_addr
                            254 	.globl _gp_ram
                            255 	.globl _gp_tmap
                            256 	.globl _gp_gen
                            257 	.globl _rds16
                            258 	.globl _gpjt
                            259 	.globl _gpit
                            260 	.globl _pad_this_frame
                            261 	.globl _pad0
                            262 	.globl __t
                            263 	.globl __n
                            264 	.globl __y
                            265 	.globl __x
                            266 	.globl _levelnames
                            267 	.globl _level2name
                            268 	.globl _level1name
                            269 	.globl _level0name
                            270 	.globl _l_music
                            271 	.globl _l_hotspots
                            272 	.globl _l_enems
                            273 	.globl _l_n_bolts
                            274 	.globl _l_locks
                            275 	.globl _l_decos
                            276 	.globl _l_map
                            277 	.globl _l_spr_enems
                            278 	.globl _l_spr_patterns
                            279 	.globl _l_behs
                            280 	.globl _l_ts_tmaps
                            281 	.globl _l_ts_colours
                            282 	.globl _l_ts_patterns
                            283 	.globl _l_player_max_enems
                            284 	.globl _l_player_max_objects
                            285 	.globl _l_map_h
                            286 	.globl _l_map_w
                            287 	.globl _l_ini_y
                            288 	.globl _l_ini_x
                            289 	.globl _l_scr_ini
                            290 	.globl _spr_hs
                            291 	.globl _spr_enems2
                            292 	.globl _spr_enems1
                            293 	.globl _spr_enems0
                            294 	.globl _spr_player
                            295 	.globl _behs2
                            296 	.globl _behs1
                            297 	.globl _behs0
                            298 	.globl _jitter
                            299 	.globl _bits
                            300 	.globl _chac_chacs_t3
                            301 	.globl _chac_chacs_t2
                            302 	.globl _chac_chacs_t1
                            303 	.globl _chac_chacs_times
                            304 ;--------------------------------------------------------
                            305 ; special function registers
                            306 ;--------------------------------------------------------
                     00BF   307 _VDPControlPort	=	0x00bf
                     00BF   308 _VDPStatusPort	=	0x00bf
                     00BE   309 _VDPDataPort	=	0x00be
                     007E   310 _VDPVCounterPort	=	0x007e
                     007F   311 _VDPHCounterPort	=	0x007f
                     00DC   312 _IOPortL	=	0x00dc
                     00DD   313 _IOPortH	=	0x00dd
                            314 ;--------------------------------------------------------
                            315 ; ram data
                            316 ;--------------------------------------------------------
                            317 	.area _DATA
   0000                     318 __x::
   0000                     319 	.ds 1
   0001                     320 __y::
   0001                     321 	.ds 1
   0002                     322 __n::
   0002                     323 	.ds 1
   0003                     324 __t::
   0003                     325 	.ds 1
   0004                     326 _pad0::
   0004                     327 	.ds 2
   0006                     328 _pad_this_frame::
   0006                     329 	.ds 2
   0008                     330 _gpit::
   0008                     331 	.ds 1
   0009                     332 _gpjt::
   0009                     333 	.ds 1
   000A                     334 _rds16::
   000A                     335 	.ds 2
   000C                     336 _gp_gen::
   000C                     337 	.ds 2
   000E                     338 _gp_tmap::
   000E                     339 	.ds 2
   0010                     340 _gp_ram::
   0010                     341 	.ds 2
   0012                     342 _gp_addr::
   0012                     343 	.ds 2
   0014                     344 _rdx::
   0014                     345 	.ds 1
   0015                     346 _rdy::
   0015                     347 	.ds 1
   0016                     348 _rdt::
   0016                     349 	.ds 1
   0017                     350 _rdit::
   0017                     351 	.ds 1
   0018                     352 _rda::
   0018                     353 	.ds 1
   0019                     354 _rdb::
   0019                     355 	.ds 1
   001A                     356 _rdc::
   001A                     357 	.ds 1
   001B                     358 _rdd::
   001B                     359 	.ds 1
   001C                     360 _rdm::
   001C                     361 	.ds 1
   001D                     362 _rds::
   001D                     363 	.ds 1
   001E                     364 _rdct::
   001E                     365 	.ds 1
   001F                     366 _ticker::
   001F                     367 	.ds 1
   0020                     368 _at1::
   0020                     369 	.ds 1
   0021                     370 _at2::
   0021                     371 	.ds 1
   0022                     372 _cx1::
   0022                     373 	.ds 1
   0023                     374 _cx2::
   0023                     375 	.ds 1
   0024                     376 _cy1::
   0024                     377 	.ds 1
   0025                     378 _cy2::
   0025                     379 	.ds 1
   0026                     380 _caux::
   0026                     381 	.ds 1
   0027                     382 _cur_stp::
   0027                     383 	.ds 2
   0029                     384 _en_initial::
   0029                     385 	.ds 1
   002A                     386 _en_offs::
   002A                     387 	.ds 1
   002B                     388 _en_fr::
   002B                     389 	.ds 1
   002C                     390 _en_collx::
   002C                     391 	.ds 1
   002D                     392 _en_colly::
   002D                     393 	.ds 1
   002E                     394 _en_spr::
   002E                     395 	.ds 1
   002F                     396 _touched::
   002F                     397 	.ds 1
   0030                     398 _en_is_alive::
   0030                     399 	.ds 1
   0031                     400 _pregotten::
   0031                     401 	.ds 1
   0032                     402 __en_t::
   0032                     403 	.ds 1
   0033                     404 __en_s::
   0033                     405 	.ds 1
   0034                     406 __en_x::
   0034                     407 	.ds 1
   0035                     408 __en_y::
   0035                     409 	.ds 1
   0036                     410 __en_x1::
   0036                     411 	.ds 1
   0037                     412 __en_y1::
   0037                     413 	.ds 1
   0038                     414 __en_x2::
   0038                     415 	.ds 1
   0039                     416 __en_y2::
   0039                     417 	.ds 1
   003A                     418 __en_mx::
   003A                     419 	.ds 1
   003B                     420 __en_my::
   003B                     421 	.ds 1
   003C                     422 __en_ct::
   003C                     423 	.ds 1
   003D                     424 __en_facing::
   003D                     425 	.ds 1
   003E                     426 __en_state::
   003E                     427 	.ds 1
   003F                     428 __enf_x::
   003F                     429 	.ds 2
   0041                     430 __enf_y::
   0041                     431 	.ds 2
   0043                     432 __enf_vx::
   0043                     433 	.ds 2
   0045                     434 __enf_vy::
   0045                     435 	.ds 2
   0047                     436 _en_sg_1::
   0047                     437 	.ds 1
   0048                     438 _en_sg_2::
   0048                     439 	.ds 1
   0049                     440 _vertical_engine_type::
   0049                     441 	.ds 1
   004A                     442 _px::
   004A                     443 	.ds 2
   004C                     444 _py::
   004C                     445 	.ds 2
   004E                     446 _pvx::
   004E                     447 	.ds 2
   0050                     448 _pvy::
   0050                     449 	.ds 2
   0052                     450 _prx::
   0052                     451 	.ds 1
   0053                     452 _pry::
   0053                     453 	.ds 1
   0054                     454 _pcx::
   0054                     455 	.ds 1
   0055                     456 _pcy::
   0055                     457 	.ds 1
   0056                     458 _pfacing::
   0056                     459 	.ds 1
   0057                     460 _pfr::
   0057                     461 	.ds 1
   0058                     462 _psprid::
   0058                     463 	.ds 1
   0059                     464 _a_button::
   0059                     465 	.ds 1
   005A                     466 _b_button::
   005A                     467 	.ds 1
   005B                     468 _pj::
   005B                     469 	.ds 1
   005C                     470 _pctj::
   005C                     471 	.ds 1
   005D                     472 _pgotten::
   005D                     473 	.ds 1
   005E                     474 _ppossee::
   005E                     475 	.ds 1
   005F                     476 _oppossee::
   005F                     477 	.ds 1
   0060                     478 _pflickering::
   0060                     479 	.ds 1
   0061                     480 _pbouncing::
   0061                     481 	.ds 1
   0062                     482 _phit::
   0062                     483 	.ds 1
   0063                     484 _pgtmx::
   0063                     485 	.ds 2
   0065                     486 _pgtmy::
   0065                     487 	.ds 2
   0067                     488 _hitv::
   0067                     489 	.ds 1
   0068                     490 _hith::
   0068                     491 	.ds 1
   0069                     492 _prx_old::
   0069                     493 	.ds 1
   006A                     494 _pry_old::
   006A                     495 	.ds 1
   006B                     496 _pkill::
   006B                     497 	.ds 1
   006C                     498 _pice::
   006C                     499 	.ds 1
   006D                     500 _pnotsafe::
   006D                     501 	.ds 1
   006E                     502 _pcontinues::
   006E                     503 	.ds 1
   006F                     504 _plife::
   006F                     505 	.ds 1
   0070                     506 _pkeys::
   0070                     507 	.ds 1
   0071                     508 _pobjs::
   0071                     509 	.ds 1
   0072                     510 _pammo::
   0072                     511 	.ds 1
   0073                     512 _pkilled::
   0073                     513 	.ds 1
   0074                     514 _pfiring::
   0074                     515 	.ds 1
   0075                     516 _n_pant_safe::
   0075                     517 	.ds 1
   0076                     518 _px_safe::
   0076                     519 	.ds 2
   0078                     520 _py_safe::
   0078                     521 	.ds 2
   007A                     522 _hrx::
   007A                     523 	.ds 1
   007B                     524 _hry::
   007B                     525 	.ds 1
   007C                     526 _hrt::
   007C                     527 	.ds 1
   007D                     528 _do_process_breakable::
   007D                     529 	.ds 1
   007E                     530 _ft::
   007E                     531 	.ds 1
   007F                     532 _c_map_w::
   007F                     533 	.ds 1
   0080                     534 _c_map_h::
   0080                     535 	.ds 1
   0081                     536 _c_map_size::
   0081                     537 	.ds 1
   0082                     538 _c_ts_tmaps::
   0082                     539 	.ds 2
   0084                     540 _c_behs::
   0084                     541 	.ds 2
   0086                     542 _spr_enems::
   0086                     543 	.ds 2
   0088                     544 _c_map::
   0088                     545 	.ds 2
   008A                     546 _c_decos::
   008A                     547 	.ds 1
   008B                     548 _c_locks::
   008B                     549 	.ds 2
   008D                     550 _c_enems::
   008D                     551 	.ds 2
   008F                     552 _c_hotspots::
   008F                     553 	.ds 2
   0091                     554 _c_max_bolts::
   0091                     555 	.ds 1
   0092                     556 _ntsc::
   0092                     557 	.ds 1
   0093                     558 _ntsc_frame::
   0093                     559 	.ds 1
   0094                     560 _update_index::
   0094                     561 	.ds 1
   0095                     562 _update_list::
   0095                     563 	.ds 96
   00F5                     564 _fader::
   00F5                     565 	.ds 1
   00F6                     566 _fade_delay::
   00F6                     567 	.ds 1
   00F7                     568 _map_buff::
   00F7                     569 	.ds 192
   01B7                     570 _first_game::
   01B7                     571 	.ds 1
   01B8                     572 _level::
   01B8                     573 	.ds 1
   01B9                     574 _c_max_enems::
   01B9                     575 	.ds 1
   01BA                     576 _n_pant::
   01BA                     577 	.ds 1
   01BB                     578 _on_pant::
   01BB                     579 	.ds 1
   01BC                     580 _half_life::
   01BC                     581 	.ds 1
   01BD                     582 _frame_counter::
   01BD                     583 	.ds 1
   01BE                     584 _paused::
   01BE                     585 	.ds 1
   01BF                     586 _win_level::
   01BF                     587 	.ds 1
   01C0                     588 _game_over::
   01C0                     589 	.ds 1
   01C1                     590 _warp_to_level::
   01C1                     591 	.ds 1
   01C2                     592 _level_reset::
   01C2                     593 	.ds 1
   01C3                     594 _flick_override::
   01C3                     595 	.ds 1
   01C4                     596 _olife::
   01C4                     597 	.ds 1
   01C5                     598 _okeys::
   01C5                     599 	.ds 1
   01C6                     600 _oobjs::
   01C6                     601 	.ds 1
   01C7                     602 _oammo::
   01C7                     603 	.ds 1
   01C8                     604 _okilled::
   01C8                     605 	.ds 1
   01C9                     606 _oam_index_player::
   01C9                     607 	.ds 1
   01CA                     608 _no_ct::
   01CA                     609 	.ds 1
   01CB                     610 _pctfr::
   01CB                     611 	.ds 1
   01CC                     612 _hact::
   01CC                     613 	.ds 24
   01E4                     614 _lkact::
   01E4                     615 	.ds 16
   01F4                     616 _flags::
   01F4                     617 	.ds 2
   01F6                     618 _en_t::
   01F6                     619 	.ds 3
   01F9                     620 _en_x::
   01F9                     621 	.ds 3
   01FC                     622 _en_y::
   01FC                     623 	.ds 3
   01FF                     624 _en_x1::
   01FF                     625 	.ds 3
   0202                     626 _en_y1::
   0202                     627 	.ds 3
   0205                     628 _en_x2::
   0205                     629 	.ds 3
   0208                     630 _en_y2::
   0208                     631 	.ds 3
   020B                     632 _en_mx::
   020B                     633 	.ds 3
   020E                     634 _en_my::
   020E                     635 	.ds 3
   0211                     636 _en_s::
   0211                     637 	.ds 3
   0214                     638 _en_facing::
   0214                     639 	.ds 3
   0217                     640 _en_state::
   0217                     641 	.ds 3
   021A                     642 _en_flags::
   021A                     643 	.ds 3
   021D                     644 _en_cttouched::
   021D                     645 	.ds 3
   0220                     646 _en_life::
   0220                     647 	.ds 3
   0223                     648 _en_status::
   0223                     649 	.ds 3
   0226                     650 _en_ct::
   0226                     651 	.ds 3
   0229                     652 _en_spr_x_mod::
   0229                     653 	.ds 1
   022A                     654 _enf_x::
   022A                     655 	.ds 6
   0230                     656 _enf_vx::
   0230                     657 	.ds 6
   0236                     658 _enf_y::
   0236                     659 	.ds 6
   023C                     660 _enf_vy::
   023C                     661 	.ds 6
   0242                     662 _en_spr_id::
   0242                     663 	.ds 3
   0245                     664 _ep_dead::
   0245                     665 	.ds 72
   028D                     666 _max_chac_chacs::
   028D                     667 	.ds 1
   028E                     668 _chac_chacs_yx::
   028E                     669 	.ds 4
   0292                     670 _chac_chacs_state::
   0292                     671 	.ds 4
   0296                     672 _chac_chacs_idlewait::
   0296                     673 	.ds 4
   029A                     674 _chac_chacs_ct::
   029A                     675 	.ds 4
   029E                     676 _chac_chacs_queue::
   029E                     677 	.ds 16
   02AE                     678 _chac_chacs_queue_read::
   02AE                     679 	.ds 1
   02AF                     680 _chac_chacs_queue_write::
   02AF                     681 	.ds 1
   02B0                     682 _res_disable::
   02B0                     683 	.ds 1
   02B1                     684 _res_on::
   02B1                     685 	.ds 1
   02B2                     686 _res_ct::
   02B2                     687 	.ds 1
   02B3                     688 _res_subct::
   02B3                     689 	.ds 1
   02B4                     690 _cfx::
   02B4                     691 	.ds 1
   02B5                     692 _springs_on::
   02B5                     693 	.ds 1
   02B6                     694 _shaker_ct::
   02B6                     695 	.ds 1
   02B7                     696 _mode_no_resonators::
   02B7                     697 	.ds 1
   02B8                     698 _game_mode::
   02B8                     699 	.ds 1
                            700 ;--------------------------------------------------------
                            701 ; ram data
                            702 ;--------------------------------------------------------
                            703 	.area _INITIALIZED
                            704 ;--------------------------------------------------------
                            705 ; absolute external ram data
                            706 ;--------------------------------------------------------
                            707 	.area _DABS (ABS)
                            708 ;--------------------------------------------------------
                            709 ; global & static initialisations
                            710 ;--------------------------------------------------------
                            711 	.area _HOME
                            712 	.area _GSINIT
                            713 	.area _GSFINAL
                            714 	.area _GSINIT
                            715 ;--------------------------------------------------------
                            716 ; Home
                            717 ;--------------------------------------------------------
                            718 	.area _HOME
                            719 	.area _HOME
                            720 ;--------------------------------------------------------
                            721 ; code
                            722 ;--------------------------------------------------------
                            723 	.area _CODE
                            724 ;engine/hotspots.h:7: void hotspots_load (void) {
                            725 ;	---------------------------------
                            726 ; Function hotspots_load
                            727 ; ---------------------------------
   0000                     728 _hotspots_load::
                            729 ;engine/hotspots.h:9: gp_gen = (unsigned char *) c_hotspots;
   0000 2Ar8Fr00      [16]  730 	ld	hl,(_c_hotspots)
   0003 22r0Cr00      [16]  731 	ld	(_gp_gen),hl
                            732 ;engine/hotspots.h:11: for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
   0006 21r08r00      [10]  733 	ld	hl,#_gpit + 0
   0009 36 00         [10]  734 	ld	(hl), #0x00
   000B 11rCCr01      [10]  735 	ld	de,#_hact+0
   000E                     736 00102$:
                            737 ;engine/hotspots.h:16: hact [gpit] = 1;
   000E 2Ar08r00      [16]  738 	ld	hl,(_gpit)
   0011 26 00         [ 7]  739 	ld	h,#0x00
   0013 19            [11]  740 	add	hl,de
   0014 36 01         [10]  741 	ld	(hl),#0x01
                            742 ;engine/hotspots.h:11: for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
   0016 21r08r00      [10]  743 	ld	hl, #_gpit+0
   0019 34            [11]  744 	inc	(hl)
   001A 3Ar08r00      [13]  745 	ld	a,(#_gpit + 0)
   001D D6 18         [ 7]  746 	sub	a, #0x18
   001F 38 ED         [12]  747 	jr	C,00102$
   0021 C9            [10]  748 	ret
   0022                     749 _chac_chacs_times:
   0022 00                  750 	.db #0x00	; 0
   0023 10                  751 	.db #0x10	; 16
   0024 01                  752 	.db #0x01	; 1
   0025 32                  753 	.db #0x32	; 50	'2'
   0026 01                  754 	.db #0x01	; 1
   0027 01                  755 	.db #0x01	; 1
   0028                     756 _chac_chacs_t1:
   0028 26                  757 	.db #0x26	; 38
   0029 20                  758 	.db #0x20	; 32
   002A 22                  759 	.db #0x22	; 34
   002B 25                  760 	.db #0x25	; 37
   002C 22                  761 	.db #0x22	; 34
   002D 20                  762 	.db #0x20	; 32
   002E                     763 _chac_chacs_t2:
   002E 26                  764 	.db #0x26	; 38
   002F 26                  765 	.db #0x26	; 38
   0030 26                  766 	.db #0x26	; 38
   0031 24                  767 	.db #0x24	; 36
   0032 26                  768 	.db #0x26	; 38
   0033 26                  769 	.db #0x26	; 38
   0034                     770 _chac_chacs_t3:
   0034 26                  771 	.db #0x26	; 38
   0035 21                  772 	.db #0x21	; 33
   0036 23                  773 	.db #0x23	; 35
   0037 25                  774 	.db #0x25	; 37
   0038 23                  775 	.db #0x23	; 35
   0039 21                  776 	.db #0x21	; 33
   003A                     777 _bits:
   003A 01                  778 	.db #0x01	; 1
   003B 02                  779 	.db #0x02	; 2
   003C 04                  780 	.db #0x04	; 4
   003D 08                  781 	.db #0x08	; 8
   003E 10                  782 	.db #0x10	; 16
   003F 20                  783 	.db #0x20	; 32
   0040 40                  784 	.db #0x40	; 64
   0041 80                  785 	.db #0x80	; 128
   0042                     786 _jitter:
   0042 00                  787 	.db #0x00	; 0
   0043 01                  788 	.db #0x01	; 1
   0044 01                  789 	.db #0x01	; 1
   0045 00                  790 	.db #0x00	; 0
   0046 00                  791 	.db #0x00	; 0
   0047 01                  792 	.db #0x01	; 1
   0048 00                  793 	.db #0x00	; 0
   0049 01                  794 	.db #0x01	; 1
   004A 01                  795 	.db #0x01	; 1
   004B 00                  796 	.db #0x00	; 0
   004C 00                  797 	.db #0x00	; 0
   004D 00                  798 	.db #0x00	; 0
   004E 01                  799 	.db #0x01	; 1
   004F 00                  800 	.db #0x00	; 0
   0050 01                  801 	.db #0x01	; 1
   0051 01                  802 	.db #0x01	; 1
   0052                     803 _behs0:
   0052 00                  804 	.db #0x00	; 0
   0053 00                  805 	.db #0x00	; 0
   0054 00                  806 	.db #0x00	; 0
   0055 00                  807 	.db #0x00	; 0
   0056 08                  808 	.db #0x08	; 8
   0057 08                  809 	.db #0x08	; 8
   0058 08                  810 	.db #0x08	; 8
   0059 08                  811 	.db #0x08	; 8
   005A 00                  812 	.db #0x00	; 0
   005B 08                  813 	.db #0x08	; 8
   005C 00                  814 	.db #0x00	; 0
   005D 00                  815 	.db #0x00	; 0
   005E 01                  816 	.db #0x01	; 1
   005F 08                  817 	.db #0x08	; 8
   0060 04                  818 	.db #0x04	; 4
   0061 0A                  819 	.db #0x0A	; 10
   0062 00                  820 	.db #0x00	; 0
   0063 00                  821 	.db #0x00	; 0
   0064 00                  822 	.db #0x00	; 0
   0065 00                  823 	.db #0x00	; 0
   0066 08                  824 	.db #0x08	; 8
   0067 08                  825 	.db #0x08	; 8
   0068 08                  826 	.db #0x08	; 8
   0069 08                  827 	.db #0x08	; 8
   006A 00                  828 	.db #0x00	; 0
   006B 08                  829 	.db #0x08	; 8
   006C 00                  830 	.db #0x00	; 0
   006D 00                  831 	.db #0x00	; 0
   006E 01                  832 	.db #0x01	; 1
   006F 08                  833 	.db #0x08	; 8
   0070 04                  834 	.db #0x04	; 4
   0071 0A                  835 	.db #0x0A	; 10
   0072                     836 _behs1:
   0072 00                  837 	.db #0x00	; 0
   0073 00                  838 	.db #0x00	; 0
   0074 00                  839 	.db #0x00	; 0
   0075 00                  840 	.db #0x00	; 0
   0076 08                  841 	.db #0x08	; 8
   0077 04                  842 	.db #0x04	; 4
   0078 08                  843 	.db #0x08	; 8
   0079 04                  844 	.db #0x04	; 4
   007A 28                  845 	.db #0x28	; 40
   007B 29                  846 	.db #0x29	; 41
   007C 01                  847 	.db #0x01	; 1
   007D 01                  848 	.db #0x01	; 1
   007E 01                  849 	.db #0x01	; 1
   007F 08                  850 	.db #0x08	; 8
   0080 08                  851 	.db #0x08	; 8
   0081 0A                  852 	.db #0x0A	; 10
   0082 00                  853 	.db #0x00	; 0
   0083 00                  854 	.db #0x00	; 0
   0084 00                  855 	.db #0x00	; 0
   0085 00                  856 	.db #0x00	; 0
   0086 08                  857 	.db #0x08	; 8
   0087 04                  858 	.db #0x04	; 4
   0088 08                  859 	.db #0x08	; 8
   0089 04                  860 	.db #0x04	; 4
   008A 28                  861 	.db #0x28	; 40
   008B 29                  862 	.db #0x29	; 41
   008C 01                  863 	.db #0x01	; 1
   008D 01                  864 	.db #0x01	; 1
   008E 01                  865 	.db #0x01	; 1
   008F 08                  866 	.db #0x08	; 8
   0090 08                  867 	.db #0x08	; 8
   0091 08                  868 	.db #0x08	; 8
   0092                     869 _behs2:
   0092 00                  870 	.db #0x00	; 0
   0093 08                  871 	.db #0x08	; 8
   0094 00                  872 	.db #0x00	; 0
   0095 00                  873 	.db #0x00	; 0
   0096 08                  874 	.db #0x08	; 8
   0097 08                  875 	.db #0x08	; 8
   0098 08                  876 	.db #0x08	; 8
   0099 08                  877 	.db #0x08	; 8
   009A 00                  878 	.db #0x00	; 0
   009B 08                  879 	.db #0x08	; 8
   009C 04                  880 	.db #0x04	; 4
   009D 08                  881 	.db #0x08	; 8
   009E 01                  882 	.db #0x01	; 1
   009F 01                  883 	.db #0x01	; 1
   00A0 08                  884 	.db #0x08	; 8
   00A1 0A                  885 	.db #0x0A	; 10
   00A2 00                  886 	.db #0x00	; 0
   00A3 08                  887 	.db #0x08	; 8
   00A4 00                  888 	.db #0x00	; 0
   00A5 00                  889 	.db #0x00	; 0
   00A6 08                  890 	.db #0x08	; 8
   00A7 08                  891 	.db #0x08	; 8
   00A8 08                  892 	.db #0x08	; 8
   00A9 08                  893 	.db #0x08	; 8
   00AA 00                  894 	.db #0x00	; 0
   00AB 08                  895 	.db #0x08	; 8
   00AC 04                  896 	.db #0x04	; 4
   00AD 08                  897 	.db #0x08	; 8
   00AE 01                  898 	.db #0x01	; 1
   00AF 01                  899 	.db #0x01	; 1
   00B0 08                  900 	.db #0x08	; 8
   00B1 0A                  901 	.db #0x0A	; 10
   00B2 00                  902 	.db #0x00	; 0
   00B3 00                  903 	.db #0x00	; 0
   00B4 01                  904 	.db #0x01	; 1
   00B5 01                  905 	.db #0x01	; 1
   00B6 01                  906 	.db #0x01	; 1
   00B7 01                  907 	.db #0x01	; 1
   00B8 00                  908 	.db #0x00	; 0
   00B9                     909 _spr_player:
   00B9r00r00               910 	.dw _ss_pl_00
   00BBr00r00               911 	.dw _ss_pl_00
   00BDr00r00               912 	.dw _ss_pl_01
   00BFr00r00               913 	.dw _ss_pl_00
   00C1r00r00               914 	.dw _ss_pl_02
   00C3r00r00               915 	.dw _ss_pl_03
   00C5 00 00               916 	.dw #0x0000
   00C7 00 00               917 	.dw #0x0000
   00C9r00r00               918 	.dw _ss_pl_04
   00CBr00r00               919 	.dw _ss_pl_04
   00CDr00r00               920 	.dw _ss_pl_06
   00CFr00r00               921 	.dw _ss_pl_04
   00D1r00r00               922 	.dw _ss_pl_05
   00D3r00r00               923 	.dw _ss_pl_07
   00D5 00 00               924 	.dw #0x0000
   00D7 00 00               925 	.dw #0x0000
   00D9                     926 _spr_enems0:
   00D9r00r00               927 	.dw _ss_en_0_00
   00DBr00r00               928 	.dw _ss_en_0_01
   00DD 00 00               929 	.dw #0x0000
   00DF 00 00               930 	.dw #0x0000
   00E1r00r00               931 	.dw _ss_en_0_02
   00E3r00r00               932 	.dw _ss_en_0_03
   00E5 00 00               933 	.dw #0x0000
   00E7 00 00               934 	.dw #0x0000
   00E9r00r00               935 	.dw _ss_en_0_04
   00EBr00r00               936 	.dw _ss_en_0_05
   00ED 00 00               937 	.dw #0x0000
   00EF 00 00               938 	.dw #0x0000
   00F1r00r00               939 	.dw _ss_en_0_06
   00F3r00r00               940 	.dw _ss_en_0_07
   00F5 00 00               941 	.dw #0x0000
   00F7 00 00               942 	.dw #0x0000
   00F9r00r00               943 	.dw _ss_en_0_08
   00FBr00r00               944 	.dw _ss_en_0_09
   00FD 00 00               945 	.dw #0x0000
   00FF 00 00               946 	.dw #0x0000
   0101r00r00               947 	.dw _ss_en_0_0a
   0103r00r00               948 	.dw _ss_en_0_0b
   0105 00 00               949 	.dw #0x0000
   0107 00 00               950 	.dw #0x0000
   0109r00r00               951 	.dw _ss_plat_00
   010Br00r00               952 	.dw _ss_plat_01
   010D 00 00               953 	.dw #0x0000
   010F 00 00               954 	.dw #0x0000
   0111r00r00               955 	.dw _ss_plat_00
   0113r00r00               956 	.dw _ss_plat_01
   0115 00 00               957 	.dw #0x0000
   0117 00 00               958 	.dw #0x0000
   0119r00r00               959 	.dw _ss_fanty_00
   011Br00r00               960 	.dw _ss_fanty_01
   011D 00 00               961 	.dw #0x0000
   011F 00 00               962 	.dw #0x0000
   0121r00r00               963 	.dw _ss_fanty_02
   0123r00r00               964 	.dw _ss_fanty_03
   0125 00 00               965 	.dw #0x0000
   0127 00 00               966 	.dw #0x0000
   0129r00r00               967 	.dw _ss_it_04
   012B                     968 _spr_enems1:
   012Br00r00               969 	.dw _ss_en_1_00
   012Dr00r00               970 	.dw _ss_en_1_01
   012F 00 00               971 	.dw #0x0000
   0131 00 00               972 	.dw #0x0000
   0133r00r00               973 	.dw _ss_en_1_02
   0135r00r00               974 	.dw _ss_en_1_03
   0137 00 00               975 	.dw #0x0000
   0139 00 00               976 	.dw #0x0000
   013Br00r00               977 	.dw _ss_en_1_04
   013Dr00r00               978 	.dw _ss_en_1_05
   013F 00 00               979 	.dw #0x0000
   0141 00 00               980 	.dw #0x0000
   0143r00r00               981 	.dw _ss_en_1_06
   0145r00r00               982 	.dw _ss_en_1_07
   0147 00 00               983 	.dw #0x0000
   0149 00 00               984 	.dw #0x0000
   014Br00r00               985 	.dw _ss_en_1_08
   014Dr00r00               986 	.dw _ss_en_1_09
   014F 00 00               987 	.dw #0x0000
   0151 00 00               988 	.dw #0x0000
   0153r00r00               989 	.dw _ss_en_1_0a
   0155r00r00               990 	.dw _ss_en_1_0b
   0157 00 00               991 	.dw #0x0000
   0159 00 00               992 	.dw #0x0000
   015Br00r00               993 	.dw _ss_plat_00
   015Dr00r00               994 	.dw _ss_plat_01
   015F 00 00               995 	.dw #0x0000
   0161 00 00               996 	.dw #0x0000
   0163r00r00               997 	.dw _ss_plat_00
   0165r00r00               998 	.dw _ss_plat_01
   0167 00 00               999 	.dw #0x0000
   0169 00 00              1000 	.dw #0x0000
   016Br00r00              1001 	.dw _ss_fanty_00
   016Dr00r00              1002 	.dw _ss_fanty_01
   016F 00 00              1003 	.dw #0x0000
   0171 00 00              1004 	.dw #0x0000
   0173r00r00              1005 	.dw _ss_fanty_02
   0175r00r00              1006 	.dw _ss_fanty_03
   0177 00 00              1007 	.dw #0x0000
   0179 00 00              1008 	.dw #0x0000
   017Br00r00              1009 	.dw _ss_it_04
   017D                    1010 _spr_enems2:
   017Dr00r00              1011 	.dw _ss_en_2_00
   017Fr00r00              1012 	.dw _ss_en_2_01
   0181 00 00              1013 	.dw #0x0000
   0183 00 00              1014 	.dw #0x0000
   0185r00r00              1015 	.dw _ss_en_2_02
   0187r00r00              1016 	.dw _ss_en_2_03
   0189 00 00              1017 	.dw #0x0000
   018B 00 00              1018 	.dw #0x0000
   018Dr00r00              1019 	.dw _ss_en_2_04
   018Fr00r00              1020 	.dw _ss_en_2_05
   0191 00 00              1021 	.dw #0x0000
   0193 00 00              1022 	.dw #0x0000
   0195r00r00              1023 	.dw _ss_en_2_06
   0197r00r00              1024 	.dw _ss_en_2_07
   0199 00 00              1025 	.dw #0x0000
   019B 00 00              1026 	.dw #0x0000
   019Dr00r00              1027 	.dw _ss_en_2_08
   019Fr00r00              1028 	.dw _ss_en_2_09
   01A1 00 00              1029 	.dw #0x0000
   01A3 00 00              1030 	.dw #0x0000
   01A5r00r00              1031 	.dw _ss_en_2_08
   01A7r00r00              1032 	.dw _ss_en_2_09
   01A9 00 00              1033 	.dw #0x0000
   01AB 00 00              1034 	.dw #0x0000
   01ADr00r00              1035 	.dw _ss_plat_00
   01AFr00r00              1036 	.dw _ss_plat_01
   01B1 00 00              1037 	.dw #0x0000
   01B3 00 00              1038 	.dw #0x0000
   01B5r00r00              1039 	.dw _ss_plat_00
   01B7r00r00              1040 	.dw _ss_plat_01
   01B9 00 00              1041 	.dw #0x0000
   01BB 00 00              1042 	.dw #0x0000
   01BDr00r00              1043 	.dw _ss_fanty_00
   01BFr00r00              1044 	.dw _ss_fanty_01
   01C1 00 00              1045 	.dw #0x0000
   01C3 00 00              1046 	.dw #0x0000
   01C5r00r00              1047 	.dw _ss_fanty_02
   01C7r00r00              1048 	.dw _ss_fanty_03
   01C9 00 00              1049 	.dw #0x0000
   01CB 00 00              1050 	.dw #0x0000
   01CDr00r00              1051 	.dw _ss_it_04
   01CF                    1052 _spr_hs:
   01CF 00 00              1053 	.dw #0x0000
   01D1 00 00              1054 	.dw #0x0000
   01D3r00r00              1055 	.dw _ss_it_01
   01D5r00r00              1056 	.dw _ss_it_00
   01D7r00r00              1057 	.dw _ss_it_02
   01D9r00r00              1058 	.dw _ss_it_03
   01DB                    1059 _l_scr_ini:
   01DB 14                 1060 	.db #0x14	; 20
   01DC 14                 1061 	.db #0x14	; 20
   01DD 08                 1062 	.db #0x08	; 8
   01DE                    1063 _l_ini_x:
   01DE 02                 1064 	.db #0x02	; 2
   01DF 02                 1065 	.db #0x02	; 2
   01E0 02                 1066 	.db #0x02	; 2
   01E1                    1067 _l_ini_y:
   01E1 07                 1068 	.db #0x07	; 7
   01E2 0A                 1069 	.db #0x0A	; 10
   01E3 03                 1070 	.db #0x03	; 3
   01E4                    1071 _l_map_w:
   01E4 04                 1072 	.db #0x04	; 4
   01E5 04                 1073 	.db #0x04	; 4
   01E6 08                 1074 	.db #0x08	; 8
   01E7                    1075 _l_map_h:
   01E7 06                 1076 	.db #0x06	; 6
   01E8 06                 1077 	.db #0x06	; 6
   01E9 03                 1078 	.db #0x03	; 3
   01EA                    1079 _l_player_max_objects:
   01EA 00                 1080 	.db #0x00	; 0
   01EB 00                 1081 	.db #0x00	; 0
   01EC 00                 1082 	.db #0x00	; 0
   01ED                    1083 _l_player_max_enems:
   01ED 36                 1084 	.db #0x36	; 54	'6'
   01EE 31                 1085 	.db #0x31	; 49	'1'
   01EF 2E                 1086 	.db #0x2E	; 46
   01F0                    1087 _l_ts_patterns:
   01F0r00r00              1088 	.dw _ts0_patterns_c
   01F2r00r00              1089 	.dw _ts1_patterns_c
   01F4r00r00              1090 	.dw _ts2_patterns_c
   01F6                    1091 _l_ts_colours:
   01F6r00r00              1092 	.dw _ts0_colours_c
   01F8r00r00              1093 	.dw _ts1_colours_c
   01FAr00r00              1094 	.dw _ts2_colours_c
   01FC                    1095 _l_ts_tmaps:
   01FCr00r00              1096 	.dw _ts0_tmaps
   01FEr00r00              1097 	.dw _ts1_tmaps
   0200r00r00              1098 	.dw _ts2_tmaps
   0202                    1099 _l_behs:
   0202r52r00              1100 	.dw _behs0
   0204r72r00              1101 	.dw _behs1
   0206r92r00              1102 	.dw _behs2
   0208                    1103 _l_spr_patterns:
   0208r00r00              1104 	.dw _ss_en_0_patterns_c
   020Ar00r00              1105 	.dw _ss_en_1_patterns_c
   020Cr00r00              1106 	.dw _ss_en_2_patterns_c
   020E                    1107 _l_spr_enems:
   020ErD9r00              1108 	.dw _spr_enems0
   0210r2Br01              1109 	.dw _spr_enems1
   0212r7Dr01              1110 	.dw _spr_enems2
   0214                    1111 _l_map:
   0214r00r00              1112 	.dw _map_0
   0216r00r00              1113 	.dw _map_1
   0218r00r00              1114 	.dw _map_2
   021A                    1115 _l_decos:
   021A 00                 1116 	.db #0x00	; 0
   021B 01                 1117 	.db #0x01	; 1
   021C 01                 1118 	.db #0x01	; 1
   021D                    1119 _l_locks:
   021Dr00r00              1120 	.dw _map_0_locks
   021Fr00r00              1121 	.dw _map_1_locks
   0221r00r00              1122 	.dw _map_2_locks
   0223                    1123 _l_n_bolts:
   0223 02                 1124 	.db #0x02	; 2
   0224 01                 1125 	.db #0x01	; 1
   0225 02                 1126 	.db #0x02	; 2
   0226                    1127 _l_enems:
   0226r00r00              1128 	.dw _enems_0
   0228r00r00              1129 	.dw _enems_1
   022Ar00r00              1130 	.dw _enems_2
   022C                    1131 _l_hotspots:
   022Cr00r00              1132 	.dw _hotspots_0
   022Er00r00              1133 	.dw _hotspots_1
   0230r00r00              1134 	.dw _hotspots_2
   0232                    1135 _l_music:
   0232 00                 1136 	.db #0x00	; 0
   0233 01                 1137 	.db #0x01	; 1
   0234 02                 1138 	.db #0x02	; 2
                           1139 ;engine/hotspots.h:20: void hotspots_paint (void) {
                           1140 ;	---------------------------------
                           1141 ; Function hotspots_paint
                           1142 ; ---------------------------------
   0235                    1143 _hotspots_paint::
                           1144 ;engine/hotspots.h:30: rda = hrt;
   0235 3Ar7Cr00      [13] 1145 	ld	a,(#_hrt + 0)
   0238 32r18r00      [13] 1146 	ld	(#_rda + 0),a
                           1147 ;engine/hotspots.h:33: if (hrt == HOTSPOT_TYPE_RESONATOR && res_on) rda = HOTSPOT_TYPE_RESONATOR_ON;
   023B 3Ar7Cr00      [13] 1148 	ld	a,(#_hrt + 0)
   023E D6 04         [ 7] 1149 	sub	a, #0x04
   0240 20 0B         [12] 1150 	jr	NZ,00102$
   0242 3ArB1r02      [13] 1151 	ld	a,(#_res_on + 0)
   0245 B7            [ 4] 1152 	or	a, a
   0246 28 05         [12] 1153 	jr	Z,00102$
   0248 21r18r00      [10] 1154 	ld	hl,#_rda + 0
   024B 36 05         [10] 1155 	ld	(hl), #0x05
   024D                    1156 00102$:
                           1157 ;engine/hotspots.h:38: spr_hs [rda]
   024D 11rCFr01      [10] 1158 	ld	de,#_spr_hs+0
   0250 FD 21r18r00   [14] 1159 	ld	iy,#_rda
   0254 FD 6E 00      [19] 1160 	ld	l,0 (iy)
   0257 26 00         [ 7] 1161 	ld	h,#0x00
   0259 29            [11] 1162 	add	hl, hl
   025A 19            [11] 1163 	add	hl,de
   025B 5E            [ 7] 1164 	ld	e,(hl)
   025C 23            [ 6] 1165 	inc	hl
   025D 56            [ 7] 1166 	ld	d,(hl)
                           1167 ;engine/hotspots.h:37: hrx, hry + SPRITE_ADJUST, 
   025E 3Ar7Br00      [13] 1168 	ld	a,(#_hry + 0)
   0261 C6 F7         [ 7] 1169 	add	a, #0xF7
   0263 67            [ 4] 1170 	ld	h,a
   0264 D5            [11] 1171 	push	de
   0265 E5            [11] 1172 	push	hl
   0266 33            [ 6] 1173 	inc	sp
   0267 3Ar7Ar00      [13] 1174 	ld	a,(_hrx)
   026A F5            [11] 1175 	push	af
   026B 33            [ 6] 1176 	inc	sp
   026C CDr00r00      [17] 1177 	call	_SG_addMetaSprite1x1
   026F F1            [10] 1178 	pop	af
   0270 F1            [10] 1179 	pop	af
   0271 C9            [10] 1180 	ret
                           1181 ;engine/hotspots.h:42: void hotspots_create (void) {
                           1182 ;	---------------------------------
                           1183 ; Function hotspots_create
                           1184 ; ---------------------------------
   0272                    1185 _hotspots_create::
                           1186 ;engine/hotspots.h:54: gp_gen = (unsigned char *) (c_hotspots + (n_pant << 1));
   0272 FD 21rBAr01   [14] 1187 	ld	iy,#_n_pant
   0276 FD 6E 00      [19] 1188 	ld	l,0 (iy)
   0279 26 00         [ 7] 1189 	ld	h,#0x00
   027B 29            [11] 1190 	add	hl, hl
   027C 55            [ 4] 1191 	ld	d,l
   027D 5C            [ 4] 1192 	ld	e,h
   027E 21r0Cr00      [10] 1193 	ld	hl,#_gp_gen
   0281 3Ar8Fr00      [13] 1194 	ld	a,(#_c_hotspots + 0)
   0284 82            [ 4] 1195 	add	a, d
   0285 77            [ 7] 1196 	ld	(hl),a
   0286 3Ar90r00      [13] 1197 	ld	a,(#_c_hotspots + 1)
   0289 8B            [ 4] 1198 	adc	a, e
   028A 23            [ 6] 1199 	inc	hl
   028B 77            [ 7] 1200 	ld	(hl),a
                           1201 ;engine/hotspots.h:55: hrt = *gp_gen ++; rda = *gp_gen; 
   028C 2Ar0Cr00      [16] 1202 	ld	hl,(_gp_gen)
   028F 7E            [ 7] 1203 	ld	a,(hl)
   0290 32r7Cr00      [13] 1204 	ld	(#_hrt + 0),a
   0293 21r0Cr00      [10] 1205 	ld	hl, #_gp_gen+0
   0296 34            [11] 1206 	inc	(hl)
   0297 20 04         [12] 1207 	jr	NZ,00115$
   0299 21r0Dr00      [10] 1208 	ld	hl, #_gp_gen+1
   029C 34            [11] 1209 	inc	(hl)
   029D                    1210 00115$:
   029D 2Ar0Cr00      [16] 1211 	ld	hl,(_gp_gen)
   02A0 7E            [ 7] 1212 	ld	a,(hl)
   02A1 32r18r00      [13] 1213 	ld	(#_rda + 0),a
                           1214 ;engine/hotspots.h:56: if (hrt && hact [n_pant]) {
   02A4 3Ar7Cr00      [13] 1215 	ld	a,(#_hrt + 0)
   02A7 B7            [ 4] 1216 	or	a, a
   02A8 28 22         [12] 1217 	jr	Z,00102$
   02AA 11rCCr01      [10] 1218 	ld	de,#_hact+0
   02AD 2ArBAr01      [16] 1219 	ld	hl,(_n_pant)
   02B0 26 00         [ 7] 1220 	ld	h,#0x00
   02B2 19            [11] 1221 	add	hl,de
   02B3 7E            [ 7] 1222 	ld	a,(hl)
   02B4 B7            [ 4] 1223 	or	a, a
   02B5 28 15         [12] 1224 	jr	Z,00102$
                           1225 ;engine/hotspots.h:57: hry = rda & 0xf0; hrx = rda << 4;
   02B7 3Ar18r00      [13] 1226 	ld	a,(#_rda + 0)
   02BA E6 F0         [ 7] 1227 	and	a, #0xF0
   02BC 32r7Br00      [13] 1228 	ld	(#_hry + 0),a
   02BF 3Ar18r00      [13] 1229 	ld	a,(#_rda + 0)
   02C2 07            [ 4] 1230 	rlca
   02C3 07            [ 4] 1231 	rlca
   02C4 07            [ 4] 1232 	rlca
   02C5 07            [ 4] 1233 	rlca
   02C6 E6 F0         [ 7] 1234 	and	a,#0xF0
   02C8 32r7Ar00      [13] 1235 	ld	(#_hrx + 0),a
   02CB C9            [10] 1236 	ret
   02CC                    1237 00102$:
                           1238 ;engine/hotspots.h:58: } else hrt = 0;
   02CC 21r7Cr00      [10] 1239 	ld	hl,#_hrt + 0
   02CF 36 00         [10] 1240 	ld	(hl), #0x00
   02D1 C9            [10] 1241 	ret
                           1242 ;engine/../my/game_frame.h:7: void draw_game_frame (void) {
                           1243 ;	---------------------------------
                           1244 ; Function draw_game_frame
                           1245 ; ---------------------------------
   02D2                    1246 _draw_game_frame::
                           1247 ;engine/../my/game_frame.h:8: gp_gen = hud_rle; unrle ();
   02D2 21r00r00      [10] 1248 	ld	hl,#_hud_rle+0
   02D5 22r0Cr00      [16] 1249 	ld	(_gp_gen),hl
   02D8 C3r00r00      [10] 1250 	jp  _unrle
                           1251 ;engine/frame.h:9: void hud_update (void) {
                           1252 ;	---------------------------------
                           1253 ; Function hud_update
                           1254 ; ---------------------------------
   02DB                    1255 _hud_update::
                           1256 ;engine/frame.h:12: if (okilled != pkilled) {
   02DB 3ArC8r01      [13] 1257 	ld	a,(#_okilled + 0)
   02DE FD 21r73r00   [14] 1258 	ld	iy,#_pkilled
   02E2 FD 96 00      [19] 1259 	sub	a, 0 (iy)
   02E5 28 24         [12] 1260 	jr	Z,00102$
                           1261 ;engine/frame.h:13: okilled = pkilled;
   02E7 3Ar73r00      [13] 1262 	ld	a,(#_pkilled + 0)
   02EA 32rC8r01      [13] 1263 	ld	(#_okilled + 0),a
                           1264 ;engine/frame.h:14: _x = KILLED_X; _y = KILLED_Y; _n = c_max_enems - pkilled; p_t ();
   02ED 21r00r00      [10] 1265 	ld	hl,#__x + 0
   02F0 36 15         [10] 1266 	ld	(hl), #0x15
   02F2 21r01r00      [10] 1267 	ld	hl,#__y + 0
   02F5 36 01         [10] 1268 	ld	(hl), #0x01
   02F7 21r73r00      [10] 1269 	ld	hl,#_pkilled
   02FA D5            [11] 1270 	push	de
   02FB FD 21r02r00   [14] 1271 	ld	iy,#__n
   02FF FD E5         [15] 1272 	push	iy
   0301 D1            [10] 1273 	pop	de
   0302 3ArB9r01      [13] 1274 	ld	a,(#_c_max_enems + 0)
   0305 96            [ 7] 1275 	sub	a, (hl)
   0306 12            [ 7] 1276 	ld	(de),a
   0307 D1            [10] 1277 	pop	de
   0308 CDr00r00      [17] 1278 	call	_p_t
   030B                    1279 00102$:
                           1280 ;engine/frame.h:32: if (okeys != pkeys) {
   030B 3ArC5r01      [13] 1281 	ld	a,(#_okeys + 0)
   030E FD 21r70r00   [14] 1282 	ld	iy,#_pkeys
   0312 FD 96 00      [19] 1283 	sub	a, 0 (iy)
   0315 28 19         [12] 1284 	jr	Z,00104$
                           1285 ;engine/frame.h:33: okeys = pkeys;
   0317 21r70r00      [10] 1286 	ld	hl,#_pkeys + 0
   031A 56            [ 7] 1287 	ld	d, (hl)
   031B 21rC5r01      [10] 1288 	ld	hl,#_okeys + 0
   031E 72            [ 7] 1289 	ld	(hl), d
                           1290 ;engine/frame.h:34: _x = KEYS_X; _y = KEYS_Y; _n = pkeys; p_t ();
   031F 21r00r00      [10] 1291 	ld	hl,#__x + 0
   0322 36 0C         [10] 1292 	ld	(hl), #0x0C
   0324 21r01r00      [10] 1293 	ld	hl,#__y + 0
   0327 36 01         [10] 1294 	ld	(hl), #0x01
   0329 21r02r00      [10] 1295 	ld	hl,#__n + 0
   032C 72            [ 7] 1296 	ld	(hl), d
   032D CDr00r00      [17] 1297 	call	_p_t
   0330                    1298 00104$:
                           1299 ;engine/frame.h:39: if (olife != plife) {
   0330 3ArC4r01      [13] 1300 	ld	a,(#_olife + 0)
   0333 FD 21r6Fr00   [14] 1301 	ld	iy,#_plife
   0337 FD 96 00      [19] 1302 	sub	a, 0 (iy)
   033A C8            [11] 1303 	ret	Z
                           1304 ;engine/frame.h:40: olife = plife;
   033B 21r6Fr00      [10] 1305 	ld	hl,#_plife + 0
   033E 56            [ 7] 1306 	ld	d, (hl)
   033F 21rC4r01      [10] 1307 	ld	hl,#_olife + 0
   0342 72            [ 7] 1308 	ld	(hl), d
                           1309 ;engine/frame.h:41: _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
   0343 21r00r00      [10] 1310 	ld	hl,#__x + 0
   0346 36 04         [10] 1311 	ld	(hl), #0x04
   0348 21r01r00      [10] 1312 	ld	hl,#__y + 0
   034B 36 01         [10] 1313 	ld	(hl), #0x01
   034D 21r02r00      [10] 1314 	ld	hl,#__n + 0
   0350 72            [ 7] 1315 	ld	(hl), d
   0351 C3r00r00      [10] 1316 	jp  _p_t
                           1317 ;my/pres.h:6: void bat_in (void) {
                           1318 ;	---------------------------------
                           1319 ; Function bat_in
                           1320 ; ---------------------------------
   0354                    1321 _bat_in::
                           1322 ;my/pres.h:7: SG_displayOn ();
   0354 21 40 01      [10] 1323 	ld	hl,#0x0140
   0357 E5            [11] 1324 	push	hl
   0358 CDr00r00      [17] 1325 	call	_SG_VDPturnOnFeature
   035B F1            [10] 1326 	pop	af
                           1327 ;my/pres.h:8: while (SG_getKeysStatus ());
   035C                    1328 00101$:
   035C CDr00r00      [17] 1329 	call	_SG_getKeysStatus
   035F 7C            [ 4] 1330 	ld	a,h
   0360 B5            [ 4] 1331 	or	a,l
   0361 20 F9         [12] 1332 	jr	NZ,00101$
   0363 C9            [10] 1333 	ret
                           1334 ;my/pres.h:11: void bat_out (void) {
                           1335 ;	---------------------------------
                           1336 ; Function bat_out
                           1337 ; ---------------------------------
   0364                    1338 _bat_out::
                           1339 ;my/pres.h:12: PSGStop ();
   0364 CDr00r00      [17] 1340 	call	_PSGStop
                           1341 ;my/pres.h:13: SG_displayOff ();
   0367 21 40 01      [10] 1342 	ld	hl,#0x0140
   036A E5            [11] 1343 	push	hl
   036B CDr00r00      [17] 1344 	call	_SG_VDPturnOffFeature
   036E F1            [10] 1345 	pop	af
                           1346 ;my/pres.h:14: SG_initSprites ();
   036F CDr00r00      [17] 1347 	call	_SG_initSprites
                           1348 ;my/pres.h:15: SG_copySpritestoSAT ();	
   0372 C3r00r00      [10] 1349 	jp  _SG_copySpritestoSAT
                           1350 ;my/pres.h:18: void pres (void (*func) (void)) {
                           1351 ;	---------------------------------
                           1352 ; Function pres
                           1353 ; ---------------------------------
   0375                    1354 _pres::
                           1355 ;my/pres.h:19: cls ();
   0375 CDr00r00      [17] 1356 	call	_cls
                           1357 ;my/pres.h:20: (*func) ();
   0378 C1            [10] 1358 	pop	bc
   0379 E1            [10] 1359 	pop	hl
   037A E5            [11] 1360 	push	hl
   037B C5            [11] 1361 	push	bc
   037C CDr00r00      [17] 1362 	call	___sdcc_call_hl
                           1363 ;my/pres.h:21: bat_in ();
   037F CDr54r03      [17] 1364 	call	_bat_in
                           1365 ;my/pres.h:22: while (1) {
   0382                    1366 00104$:
                           1367 ;my/pres.h:23: pad_read ();
   0382 CDr00r00      [17] 1368 	call	_pad_read
                           1369 ;my/pres.h:24: if (pad_this_frame & (PAD_A|PAD_B|PAD_START)) break;
   0385 3Ar06r00      [13] 1370 	ld	a,(#_pad_this_frame + 0)
   0388 E6 30         [ 7] 1371 	and	a, #0x30
   038A 28 F6         [12] 1372 	jr	Z,00104$
                           1373 ;my/pres.h:26: bat_out ();
   038C C3r64r03      [10] 1374 	jp  _bat_out
                           1375 ;my/pres.h:29: void title (void) {
                           1376 ;	---------------------------------
                           1377 ; Function title
                           1378 ; ---------------------------------
   038F                    1379 _title::
                           1380 ;my/pres.h:30: unpack_bg_patterns (tstitle_patterns_c, tstitle_colours_c, 64*8, 7);
   038F 11r00r00      [10] 1381 	ld	de,#_tstitle_patterns_c
   0392 3E 07         [ 7] 1382 	ld	a,#0x07
   0394 F5            [11] 1383 	push	af
   0395 33            [ 6] 1384 	inc	sp
   0396 21 00 02      [10] 1385 	ld	hl,#0x0200
   0399 E5            [11] 1386 	push	hl
   039A 21r00r00      [10] 1387 	ld	hl,#_tstitle_colours_c
   039D E5            [11] 1388 	push	hl
   039E D5            [11] 1389 	push	de
   039F CDr00r00      [17] 1390 	call	_unpack_bg_patterns
   03A2 21 07 00      [10] 1391 	ld	hl,#7
   03A5 39            [11] 1392 	add	hl,sp
   03A6 F9            [ 6] 1393 	ld	sp,hl
                           1394 ;my/pres.h:31: gp_gen = title_rle; unrle ();
   03A7 21r00r00      [10] 1395 	ld	hl,#_title_rle+0
   03AA 22r0Cr00      [16] 1396 	ld	(_gp_gen),hl
   03AD CDr00r00      [17] 1397 	call	_unrle
                           1398 ;my/pres.h:33: _x = 7; _y = 12; pr_str ("SELECT AND PUSH 1!");
   03B0 21r00r00      [10] 1399 	ld	hl,#__x + 0
   03B3 36 07         [10] 1400 	ld	(hl), #0x07
   03B5 21r01r00      [10] 1401 	ld	hl,#__y + 0
   03B8 36 0C         [10] 1402 	ld	(hl), #0x0C
   03BA 21r6Ar04      [10] 1403 	ld	hl,#___str_0
   03BD E5            [11] 1404 	push	hl
   03BE CDr00r00      [17] 1405 	call	_pr_str
   03C1 F1            [10] 1406 	pop	af
                           1407 ;my/pres.h:35: _x = 12; _y = 16; pr_str ("RESONATORS");
   03C2 21r00r00      [10] 1408 	ld	hl,#__x + 0
   03C5 36 0C         [10] 1409 	ld	(hl), #0x0C
   03C7 21r01r00      [10] 1410 	ld	hl,#__y + 0
   03CA 36 10         [10] 1411 	ld	(hl), #0x10
   03CC 21r7Dr04      [10] 1412 	ld	hl,#___str_1
   03CF E5            [11] 1413 	push	hl
   03D0 CDr00r00      [17] 1414 	call	_pr_str
   03D3 F1            [10] 1415 	pop	af
                           1416 ;my/pres.h:36: _y = 18; pr_str ("EASY MODE");
   03D4 21r01r00      [10] 1417 	ld	hl,#__y + 0
   03D7 36 12         [10] 1418 	ld	(hl), #0x12
   03D9 21r88r04      [10] 1419 	ld	hl,#___str_2
   03DC E5            [11] 1420 	push	hl
   03DD CDr00r00      [17] 1421 	call	_pr_str
   03E0 F1            [10] 1422 	pop	af
                           1423 ;my/pres.h:38: _x = 5; _y = 23; pr_str ("@ 2018 THE MOJON TWINS");
   03E1 21r00r00      [10] 1424 	ld	hl,#__x + 0
   03E4 36 05         [10] 1425 	ld	(hl), #0x05
   03E6 21r01r00      [10] 1426 	ld	hl,#__y + 0
   03E9 36 17         [10] 1427 	ld	(hl), #0x17
   03EB 21r92r04      [10] 1428 	ld	hl,#___str_3
   03EE E5            [11] 1429 	push	hl
   03EF CDr00r00      [17] 1430 	call	_pr_str
   03F2 F1            [10] 1431 	pop	af
                           1432 ;my/pres.h:40: bat_in ();
   03F3 CDr54r03      [17] 1433 	call	_bat_in
                           1434 ;my/pres.h:42: PSGPlay (m_helmet_psg);
   03F6 21r00r00      [10] 1435 	ld	hl,#_m_helmet_psg
   03F9 E5            [11] 1436 	push	hl
   03FA CDr00r00      [17] 1437 	call	_PSGPlay
   03FD F1            [10] 1438 	pop	af
                           1439 ;my/pres.h:43: while (1) {
   03FE                    1440 00113$:
                           1441 ;my/pres.h:44: update_cycle ();
   03FE CDr00r00      [17] 1442 	call	_update_cycle
                           1443 ;my/pres.h:45: SG_addMetaSprite1x1 (82, 122 + (mode_no_resonators << 4), ss_pl_00);
   0401 21r00r00      [10] 1444 	ld	hl,#_ss_pl_00
   0404 3ArB7r02      [13] 1445 	ld	a,(#_mode_no_resonators + 0)
   0407 07            [ 4] 1446 	rlca
   0408 07            [ 4] 1447 	rlca
   0409 07            [ 4] 1448 	rlca
   040A 07            [ 4] 1449 	rlca
   040B E6 F0         [ 7] 1450 	and	a,#0xF0
   040D C6 7A         [ 7] 1451 	add	a, #0x7A
   040F E5            [11] 1452 	push	hl
   0410 57            [ 4] 1453 	ld	d,a
   0411 1E 52         [ 7] 1454 	ld	e,#0x52
   0413 D5            [11] 1455 	push	de
   0414 CDr00r00      [17] 1456 	call	_SG_addMetaSprite1x1
   0417 F1            [10] 1457 	pop	af
   0418 F1            [10] 1458 	pop	af
                           1459 ;my/pres.h:46: pad_read ();
   0419 CDr00r00      [17] 1460 	call	_pad_read
                           1461 ;my/pres.h:47: rda = mode_no_resonators;
   041C 3ArB7r02      [13] 1462 	ld	a,(#_mode_no_resonators + 0)
   041F 32r18r00      [13] 1463 	ld	(#_rda + 0),a
                           1464 ;my/pres.h:48: if (pad_this_frame & PAD_DOWN) {
   0422 21r06r00      [10] 1465 	ld	hl,#_pad_this_frame+0
   0425 CB 4E         [12] 1466 	bit	1, (hl)
   0427 28 10         [12] 1467 	jr	Z,00104$
                           1468 ;my/pres.h:49: ++ mode_no_resonators; if (mode_no_resonators == 2) mode_no_resonators = 0;
   0429 21rB7r02      [10] 1469 	ld	hl, #_mode_no_resonators+0
   042C 34            [11] 1470 	inc	(hl)
   042D 3ArB7r02      [13] 1471 	ld	a,(#_mode_no_resonators + 0)
   0430 D6 02         [ 7] 1472 	sub	a, #0x02
   0432 20 05         [12] 1473 	jr	NZ,00104$
   0434 21rB7r02      [10] 1474 	ld	hl,#_mode_no_resonators + 0
   0437 36 00         [10] 1475 	ld	(hl), #0x00
   0439                    1476 00104$:
                           1477 ;my/pres.h:51: if (pad_this_frame & PAD_UP) {
   0439 21r06r00      [10] 1478 	ld	hl,#_pad_this_frame+0
   043C CB 46         [12] 1479 	bit	0, (hl)
   043E 28 11         [12] 1480 	jr	Z,00109$
                           1481 ;my/pres.h:52: if (mode_no_resonators) -- mode_no_resonators; else mode_no_resonators = 1;
   0440 3ArB7r02      [13] 1482 	ld	a,(#_mode_no_resonators + 0)
   0443 B7            [ 4] 1483 	or	a, a
   0444 28 06         [12] 1484 	jr	Z,00106$
   0446 21rB7r02      [10] 1485 	ld	hl, #_mode_no_resonators+0
   0449 35            [11] 1486 	dec	(hl)
   044A 18 05         [12] 1487 	jr	00109$
   044C                    1488 00106$:
   044C 21rB7r02      [10] 1489 	ld	hl,#_mode_no_resonators + 0
   044F 36 01         [10] 1490 	ld	(hl), #0x01
   0451                    1491 00109$:
                           1492 ;my/pres.h:55: if (pad_this_frame & PAD_1) break;
   0451 21r06r00      [10] 1493 	ld	hl,#_pad_this_frame+0
   0454 CB 66         [12] 1494 	bit	4, (hl)
   0456 28 A6         [12] 1495 	jr	Z,00113$
                           1496 ;my/pres.h:60: plife = mode_no_resonators ? 5 : 3;
   0458 3ArB7r02      [13] 1497 	ld	a,(#_mode_no_resonators + 0)
   045B B7            [ 4] 1498 	or	a, a
   045C 28 04         [12] 1499 	jr	Z,00117$
   045E 3E 05         [ 7] 1500 	ld	a,#0x05
   0460 18 02         [12] 1501 	jr	00118$
   0462                    1502 00117$:
   0462 3E 03         [ 7] 1503 	ld	a,#0x03
   0464                    1504 00118$:
   0464 32r6Fr00      [13] 1505 	ld	(#_plife + 0),a
                           1506 ;my/pres.h:62: bat_out ();
   0467 C3r64r03      [10] 1507 	jp  _bat_out
   046A                    1508 ___str_0:
   046A 53 45 4C 45 43 54  1509 	.ascii "SELECT AND PUSH 1!"
        20 41 4E 44 20 50
        55 53 48 20 31 21
   047C 00                 1510 	.db 0x00
   047D                    1511 ___str_1:
   047D 52 45 53 4F 4E 41  1512 	.ascii "RESONATORS"
        54 4F 52 53
   0487 00                 1513 	.db 0x00
   0488                    1514 ___str_2:
   0488 45 41 53 59 20 4D  1515 	.ascii "EASY MODE"
        4F 44 45
   0491 00                 1516 	.db 0x00
   0492                    1517 ___str_3:
   0492 40 20 32 30 31 38  1518 	.ascii "@ 2018 THE MOJON TWINS"
        20 54 48 45 20 4D
        4F 4A 4F 4E 20 54
        57 49 4E 53
   04A8 00                 1519 	.db 0x00
                           1520 ;my/pres.h:65: void scr_game_over (void) {
                           1521 ;	---------------------------------
                           1522 ; Function scr_game_over
                           1523 ; ---------------------------------
   04A9                    1524 _scr_game_over::
                           1525 ;my/pres.h:66: _x = 11; _y = 15; pr_str ("GAME OVER!");
   04A9 21r00r00      [10] 1526 	ld	hl,#__x + 0
   04AC 36 0B         [10] 1527 	ld	(hl), #0x0B
   04AE 21r01r00      [10] 1528 	ld	hl,#__y + 0
   04B1 36 0F         [10] 1529 	ld	(hl), #0x0F
   04B3 21rBCr04      [10] 1530 	ld	hl,#___str_4
   04B6 E5            [11] 1531 	push	hl
   04B7 CDr00r00      [17] 1532 	call	_pr_str
   04BA F1            [10] 1533 	pop	af
   04BB C9            [10] 1534 	ret
   04BC                    1535 ___str_4:
   04BC 47 41 4D 45 20 4F  1536 	.ascii "GAME OVER!"
        56 45 52 21
   04C6 00                 1537 	.db 0x00
                           1538 ;my/pres.h:69: void scr_the_end (void) {
                           1539 ;	---------------------------------
                           1540 ; Function scr_the_end
                           1541 ; ---------------------------------
   04C7                    1542 _scr_the_end::
                           1543 ;my/pres.h:70: unpack_bg_patterns (tsending_patterns_c, tsending_colours_c, 64*8, 7);
   04C7 11r00r00      [10] 1544 	ld	de,#_tsending_patterns_c
   04CA 3E 07         [ 7] 1545 	ld	a,#0x07
   04CC F5            [11] 1546 	push	af
   04CD 33            [ 6] 1547 	inc	sp
   04CE 21 00 02      [10] 1548 	ld	hl,#0x0200
   04D1 E5            [11] 1549 	push	hl
   04D2 21r00r00      [10] 1550 	ld	hl,#_tsending_colours_c
   04D5 E5            [11] 1551 	push	hl
   04D6 D5            [11] 1552 	push	de
   04D7 CDr00r00      [17] 1553 	call	_unpack_bg_patterns
   04DA 21 07 00      [10] 1554 	ld	hl,#7
   04DD 39            [11] 1555 	add	hl,sp
   04DE F9            [ 6] 1556 	ld	sp,hl
                           1557 ;my/pres.h:71: gp_gen = ending_rle; unrle ();
   04DF 21r00r00      [10] 1558 	ld	hl,#_ending_rle+0
   04E2 22r0Cr00      [16] 1559 	ld	(_gp_gen),hl
   04E5 CDr00r00      [17] 1560 	call	_unrle
                           1561 ;my/pres.h:72: _x = 4; _y = 13; pr_str ("'CONGRATS, CHERIL'- SAID%%THE MAJOR -'YOU HAVE WON%%LA COPA DEL MEAO!', AND%%THEN CHERIL RETURNED TO%%THE FOREST . . .");
   04E8 21r00r00      [10] 1562 	ld	hl,#__x + 0
   04EB 36 04         [10] 1563 	ld	(hl), #0x04
   04ED 21r01r00      [10] 1564 	ld	hl,#__y + 0
   04F0 36 0D         [10] 1565 	ld	(hl), #0x0D
   04F2 21rFBr04      [10] 1566 	ld	hl,#___str_5
   04F5 E5            [11] 1567 	push	hl
   04F6 CDr00r00      [17] 1568 	call	_pr_str
   04F9 F1            [10] 1569 	pop	af
   04FA C9            [10] 1570 	ret
   04FB                    1571 ___str_5:
   04FB 27 43 4F 4E 47 52  1572 	.ascii "'CONGRATS, CHERIL'- SAID%%THE MAJOR -'YOU HAVE WON%%LA COPA "
        41 54 53 2C 20 43
        48 45 52 49 4C 27
        2D 20 53 41 49 44
        25 25 54 48 45 20
        4D 41 4A 4F 52 20
        2D 27 59 4F 55 20
        48 41 56 45 20 57
        4F 4E 25 25 4C 41
        20 43 4F 50 41 20
   0537 44 45 4C 20 4D 45  1573 	.ascii "DEL MEAO!', AND%%THEN CHERIL RETURNED TO%%THE FOREST . . ."
        41 4F 21 27 2C 20
        41 4E 44 25 25 54
        48 45 4E 20 43 48
        45 52 49 4C 20 52
        45 54 55 52 4E 45
        44 20 54 4F 25 25
        54 48 45 20 46 4F
        52 45 53 54 20 2E
        20 2E 20 2E
   0571 00                 1574 	.db 0x00
                           1575 ;my/pres.h:80: void scr_level (void) {
                           1576 ;	---------------------------------
                           1577 ; Function scr_level
                           1578 ; ---------------------------------
   0572                    1579 _scr_level::
                           1580 ;my/pres.h:81: _x = 12; _y = 14; pr_str ("LEVEL 0"); SG_setTile (17+level);
   0572 21r00r00      [10] 1581 	ld	hl,#__x + 0
   0575 36 0C         [10] 1582 	ld	(hl), #0x0C
   0577 21r01r00      [10] 1583 	ld	hl,#__y + 0
   057A 36 0E         [10] 1584 	ld	(hl), #0x0E
   057C 21rD9r05      [10] 1585 	ld	hl,#___str_6
   057F E5            [11] 1586 	push	hl
   0580 CDr00r00      [17] 1587 	call	_pr_str
   0583 F1            [10] 1588 	pop	af
   0584 3ArB8r01      [13] 1589 	ld	a,(#_level + 0)
   0587 C6 11         [ 7] 1590 	add	a, #0x11
   0589 F5            [11] 1591 	push	af
   058A 33            [ 6] 1592 	inc	sp
   058B CDr00r00      [17] 1593 	call	_SG_setTile
   058E 33            [ 6] 1594 	inc	sp
                           1595 ;my/pres.h:82: _x = 10; _y = 16; pr_str (levelnames [level]);
   058F 21r00r00      [10] 1596 	ld	hl,#__x + 0
   0592 36 0A         [10] 1597 	ld	(hl), #0x0A
   0594 21r01r00      [10] 1598 	ld	hl,#__y + 0
   0597 36 10         [10] 1599 	ld	(hl), #0x10
   0599 FD 21rB8r01   [14] 1600 	ld	iy,#_level
   059D FD 6E 00      [19] 1601 	ld	l,0 (iy)
   05A0 26 00         [ 7] 1602 	ld	h,#0x00
   05A2 29            [11] 1603 	add	hl, hl
   05A3 11rD3r05      [10] 1604 	ld	de,#_levelnames
   05A6 19            [11] 1605 	add	hl,de
   05A7 5E            [ 7] 1606 	ld	e,(hl)
   05A8 23            [ 6] 1607 	inc	hl
   05A9 56            [ 7] 1608 	ld	d,(hl)
   05AA D5            [11] 1609 	push	de
   05AB CDr00r00      [17] 1610 	call	_pr_str
   05AE F1            [10] 1611 	pop	af
   05AF C9            [10] 1612 	ret
   05B0                    1613 _level0name:
   05B0 20 20 54 48 45 20  1614 	.ascii "  THE CITY"
        43 49 54 59
   05BA 00                 1615 	.db 0x00
   05BB                    1616 _level1name:
   05BB 54 48 45 20 46 41  1617 	.ascii "THE FACTORY"
        43 54 4F 52 59
   05C6 00                 1618 	.db 0x00
   05C7                    1619 _level2name:
   05C7 20 54 48 45 20 46  1620 	.ascii " THE FOREST"
        4F 52 45 53 54
   05D2 00                 1621 	.db 0x00
   05D3                    1622 _levelnames:
   05D3rB0r05              1623 	.dw _level0name
   05D5rBBr05              1624 	.dw _level1name
   05D7rC7r05              1625 	.dw _level2name
   05D9                    1626 ___str_6:
   05D9 4C 45 56 45 4C 20  1627 	.ascii "LEVEL 0"
        30
   05E0 00                 1628 	.db 0x00
                           1629 ;my/pres.h:85: void credits (void) {
                           1630 ;	---------------------------------
                           1631 ; Function credits
                           1632 ; ---------------------------------
   05E1                    1633 _credits::
                           1634 ;my/pres.h:86: cls ();
   05E1 CDr00r00      [17] 1635 	call	_cls
                           1636 ;my/pres.h:88: _x = 0; _y = 0; if (ntsc) pr_str ("NTSC"); else pr_str ("PAL");
   05E4 21r00r00      [10] 1637 	ld	hl,#__x + 0
   05E7 36 00         [10] 1638 	ld	(hl), #0x00
   05E9 21r01r00      [10] 1639 	ld	hl,#__y + 0
   05EC 36 00         [10] 1640 	ld	(hl), #0x00
   05EE 3Ar92r00      [13] 1641 	ld	a,(#_ntsc + 0)
   05F1 B7            [ 4] 1642 	or	a, a
   05F2 28 0A         [12] 1643 	jr	Z,00102$
   05F4 21r58r06      [10] 1644 	ld	hl,#___str_10
   05F7 E5            [11] 1645 	push	hl
   05F8 CDr00r00      [17] 1646 	call	_pr_str
   05FB F1            [10] 1647 	pop	af
   05FC 18 08         [12] 1648 	jr	00103$
   05FE                    1649 00102$:
   05FE 21r5Dr06      [10] 1650 	ld	hl,#___str_11
   0601 E5            [11] 1651 	push	hl
   0602 CDr00r00      [17] 1652 	call	_pr_str
   0605 F1            [10] 1653 	pop	af
   0606                    1654 00103$:
                           1655 ;my/pres.h:90: rds16 = 0; rdy = 240;
   0606 21 00 00      [10] 1656 	ld	hl,#0x0000
   0609 22r0Ar00      [16] 1657 	ld	(_rds16),hl
   060C 21r15r00      [10] 1658 	ld	hl,#_rdy + 0
   060F 36 F0         [10] 1659 	ld	(hl), #0xF0
                           1660 ;my/pres.h:91: _x = 0; _y = 18; 
   0611 21r00r00      [10] 1661 	ld	hl,#__x + 0
   0614 36 00         [10] 1662 	ld	(hl), #0x00
   0616 21r01r00      [10] 1663 	ld	hl,#__y + 0
   0619 36 12         [10] 1664 	ld	(hl), #0x12
                           1665 ;my/pres.h:92: pr_str ("     CHERIL PERIL CLASSIC%%         ORIGINAL GAME%     @ 2011 THE MOJON TWINS%       REPROGRAMMED GAME%     @ 2018 THE MOJON TWINS");
   061B 21r61r06      [10] 1666 	ld	hl,#___str_12+0
   061E E5            [11] 1667 	push	hl
   061F CDr00r00      [17] 1668 	call	_pr_str
                           1669 ;my/pres.h:94: SG_displayOn ();
   0622 21 40 01      [10] 1670 	ld	hl, #0x0140
   0625 E3            [19] 1671 	ex	(sp),hl
   0626 CDr00r00      [17] 1672 	call	_SG_VDPturnOnFeature
   0629 F1            [10] 1673 	pop	af
                           1674 ;my/pres.h:96: while (!(SG_getKeysStatus () & PAD_START) && rds16 < 300) {
   062A                    1675 00105$:
   062A CDr00r00      [17] 1676 	call	_SG_getKeysStatus
   062D CB 65         [ 8] 1677 	bit	4, l
   062F 20 1E         [12] 1678 	jr	NZ,00107$
   0631 3Ar0Ar00      [13] 1679 	ld	a,(#_rds16 + 0)
   0634 D6 2C         [ 7] 1680 	sub	a, #0x2C
   0636 3Ar0Br00      [13] 1681 	ld	a,(#_rds16 + 1)
   0639 17            [ 4] 1682 	rla
   063A 3F            [ 4] 1683 	ccf
   063B 1F            [ 4] 1684 	rra
   063C DE 81         [ 7] 1685 	sbc	a, #0x81
   063E 30 0F         [12] 1686 	jr	NC,00107$
                           1687 ;my/pres.h:99: update_cycle ();
   0640 CDr00r00      [17] 1688 	call	_update_cycle
                           1689 ;my/pres.h:100: rds16 ++;
   0643 21r0Ar00      [10] 1690 	ld	hl, #_rds16+0
   0646 34            [11] 1691 	inc	(hl)
   0647 20 E1         [12] 1692 	jr	NZ,00105$
   0649 21r0Br00      [10] 1693 	ld	hl, #_rds16+1
   064C 34            [11] 1694 	inc	(hl)
   064D 18 DB         [12] 1695 	jr	00105$
   064F                    1696 00107$:
                           1697 ;my/pres.h:103: SG_displayOff ();
   064F 21 40 01      [10] 1698 	ld	hl,#0x0140
   0652 E5            [11] 1699 	push	hl
   0653 CDr00r00      [17] 1700 	call	_SG_VDPturnOffFeature
   0656 F1            [10] 1701 	pop	af
   0657 C9            [10] 1702 	ret
   0658                    1703 ___str_10:
   0658 4E 54 53 43        1704 	.ascii "NTSC"
   065C 00                 1705 	.db 0x00
   065D                    1706 ___str_11:
   065D 50 41 4C           1707 	.ascii "PAL"
   0660 00                 1708 	.db 0x00
   0661                    1709 ___str_12:
   0661 20 20 20 20 20 43  1710 	.ascii "     CHERIL PERIL CLASSIC%%         ORIGINAL GAME%     @ 201"
        48 45 52 49 4C 20
        50 45 52 49 4C 20
        43 4C 41 53 53 49
        43 25 25 20 20 20
        20 20 20 20 20 20
        4F 52 49 47 49 4E
        41 4C 20 47 41 4D
        45 25 20 20 20 20
        20 40 20 32 30 31
   069D 31 20 54 48 45 20  1711 	.ascii "1 THE MOJON TWINS%       REPROGRAMMED GAME%     @ 2018 THE M"
        4D 4F 4A 4F 4E 20
        54 57 49 4E 53 25
        20 20 20 20 20 20
        20 52 45 50 52 4F
        47 52 41 4D 4D 45
        44 20 47 41 4D 45
        25 20 20 20 20 20
        40 20 32 30 31 38
        20 54 48 45 20 4D
   06D9 4F 4A 4F 4E 20 54  1712 	.ascii "OJON TWINS"
        57 49 4E 53
   06E3 00                 1713 	.db 0x00
                           1714 ;mainloop/flickscreen.h:7: void flickscreen_do_horizontal (void) {
                           1715 ;	---------------------------------
                           1716 ; Function flickscreen_do_horizontal
                           1717 ; ---------------------------------
   06E4                    1718 _flickscreen_do_horizontal::
                           1719 ;mainloop/flickscreen.h:12: (cfx + pvx) < 0
   06E4 FD 21rB4r02   [14] 1720 	ld	iy,#_cfx
   06E8 FD 4E 00      [19] 1721 	ld	c,0 (iy)
   06EB 3ArB4r02      [13] 1722 	ld	a,(#_cfx + 0)
   06EE 17            [ 4] 1723 	rla
   06EF 9F            [ 4] 1724 	sbc	a, a
   06F0 47            [ 4] 1725 	ld	b,a
   06F1 3Ar4Er00      [13] 1726 	ld	a,(#_pvx + 0)
   06F4 81            [ 4] 1727 	add	a, c
   06F5 57            [ 4] 1728 	ld	d,a
   06F6 3Ar4Fr00      [13] 1729 	ld	a,(#_pvx + 1)
   06F9 88            [ 4] 1730 	adc	a, b
   06FA 5F            [ 4] 1731 	ld	e,a
                           1732 ;mainloop/flickscreen.h:8: if (prx == 4 && 
   06FB 3Ar52r00      [13] 1733 	ld	a,(#_prx + 0)
   06FE D6 04         [ 7] 1734 	sub	a, #0x04
   0700 20 0F         [12] 1735 	jr	NZ,00105$
                           1736 ;mainloop/flickscreen.h:12: (cfx + pvx) < 0
   0702 CB 7B         [ 8] 1737 	bit	7, e
   0704 28 0B         [12] 1738 	jr	Z,00105$
                           1739 ;mainloop/flickscreen.h:15: -- n_pant;
   0706 21rBAr01      [10] 1740 	ld	hl, #_n_pant+0
   0709 35            [11] 1741 	dec	(hl)
                           1742 ;mainloop/flickscreen.h:16: px = 244 << FIXBITS;
   070A 21 00 3D      [10] 1743 	ld	hl,#0x3D00
   070D 22r4Ar00      [16] 1744 	ld	(_px),hl
   0710 C9            [10] 1745 	ret
   0711                    1746 00105$:
                           1747 ;mainloop/flickscreen.h:17: } else if (prx == 244 && 
   0711 FD 21r52r00   [14] 1748 	ld	iy,#_prx
   0715 FD 7E 00      [19] 1749 	ld	a,0 (iy)
   0718 D6 F4         [ 7] 1750 	sub	a, #0xF4
   071A C0            [11] 1751 	ret	NZ
                           1752 ;mainloop/flickscreen.h:21: (cfx + pvx) > 0
   071B AF            [ 4] 1753 	xor	a, a
   071C BA            [ 4] 1754 	cp	a, d
   071D 9B            [ 4] 1755 	sbc	a, e
   071E E2r23r07      [10] 1756 	jp	PO, 00130$
   0721 EE 80         [ 7] 1757 	xor	a, #0x80
   0723                    1758 00130$:
   0723 F0            [11] 1759 	ret	P
                           1760 ;mainloop/flickscreen.h:24: ++ n_pant;
   0724 21rBAr01      [10] 1761 	ld	hl, #_n_pant+0
   0727 34            [11] 1762 	inc	(hl)
                           1763 ;mainloop/flickscreen.h:25: px = 4 << FIXBITS;
   0728 21 00 01      [10] 1764 	ld	hl,#0x0100
   072B 22r4Ar00      [16] 1765 	ld	(_px),hl
   072E C9            [10] 1766 	ret
                           1767 ;mainloop/flickscreen.h:29: void flickscreen_do_vertical (void) {
                           1768 ;	---------------------------------
                           1769 ; Function flickscreen_do_vertical
                           1770 ; ---------------------------------
   072F                    1771 _flickscreen_do_vertical::
                           1772 ;mainloop/flickscreen.h:42: if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
   072F 3Ar53r00      [13] 1773 	ld	a,(#_pry + 0)
   0732 B7            [ 4] 1774 	or	a, a
   0733 20 44         [12] 1775 	jr	NZ,00108$
   0735 3Ar51r00      [13] 1776 	ld	a,(#_pvy + 1)
   0738 CB 7F         [ 8] 1777 	bit	7,a
   073A 28 3D         [12] 1778 	jr	Z,00108$
   073C 21r7Fr00      [10] 1779 	ld	hl,#_c_map_w
   073F 3ArBAr01      [13] 1780 	ld	a,(#_n_pant + 0)
   0742 96            [ 7] 1781 	sub	a, (hl)
   0743 38 34         [12] 1782 	jr	C,00108$
                           1783 ;mainloop/flickscreen.h:43: n_pant -= c_map_w;
   0745 21r7Fr00      [10] 1784 	ld	hl,#_c_map_w
   0748 D5            [11] 1785 	push	de
   0749 FD 21rBAr01   [14] 1786 	ld	iy,#_n_pant
   074D FD E5         [15] 1787 	push	iy
   074F D1            [10] 1788 	pop	de
   0750 1A            [ 7] 1789 	ld	a,(de)
   0751 96            [ 7] 1790 	sub	a, (hl)
   0752 12            [ 7] 1791 	ld	(de),a
   0753 D1            [10] 1792 	pop	de
                           1793 ;mainloop/flickscreen.h:44: py = 192 << FIXBITS;
   0754 21 00 30      [10] 1794 	ld	hl,#0x3000
   0757 22r4Cr00      [16] 1795 	ld	(_py),hl
                           1796 ;mainloop/flickscreen.h:45: if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
   075A 3E 60         [ 7] 1797 	ld	a,#0x60
   075C FD 21r50r00   [14] 1798 	ld	iy,#_pvy
   0760 FD BE 00      [19] 1799 	cp	a, 0 (iy)
   0763 3E FF         [ 7] 1800 	ld	a,#0xFF
   0765 FD 21r50r00   [14] 1801 	ld	iy,#_pvy
   0769 FD 9E 01      [19] 1802 	sbc	a, 1 (iy)
   076C E2r71r07      [10] 1803 	jp	PO, 00142$
   076F EE 80         [ 7] 1804 	xor	a, #0x80
   0771                    1805 00142$:
   0771 F0            [11] 1806 	ret	P
   0772 21 60 FF      [10] 1807 	ld	hl,#0xFF60
   0775 22r50r00      [16] 1808 	ld	(_pvy),hl
   0778 C9            [10] 1809 	ret
   0779                    1810 00108$:
                           1811 ;mainloop/flickscreen.h:46: } else if (pry >= 192 && pvy > 0 && n_pant < c_map_size - c_map_w) {
   0779 3Ar53r00      [13] 1812 	ld	a,(#_pry + 0)
   077C D6 C0         [ 7] 1813 	sub	a, #0xC0
   077E D8            [11] 1814 	ret	C
   077F AF            [ 4] 1815 	xor	a, a
   0780 FD 21r50r00   [14] 1816 	ld	iy,#_pvy
   0784 FD BE 00      [19] 1817 	cp	a, 0 (iy)
   0787 FD 21r50r00   [14] 1818 	ld	iy,#_pvy
   078B FD 9E 01      [19] 1819 	sbc	a, 1 (iy)
   078E E2r93r07      [10] 1820 	jp	PO, 00143$
   0791 EE 80         [ 7] 1821 	xor	a, #0x80
   0793                    1822 00143$:
   0793 F0            [11] 1823 	ret	P
   0794 21r81r00      [10] 1824 	ld	hl,#_c_map_size + 0
   0797 5E            [ 7] 1825 	ld	e, (hl)
   0798 16 00         [ 7] 1826 	ld	d,#0x00
   079A FD 21r7Fr00   [14] 1827 	ld	iy,#_c_map_w
   079E FD 6E 00      [19] 1828 	ld	l,0 (iy)
   07A1 26 00         [ 7] 1829 	ld	h,#0x00
   07A3 7B            [ 4] 1830 	ld	a,e
   07A4 95            [ 4] 1831 	sub	a, l
   07A5 5F            [ 4] 1832 	ld	e,a
   07A6 7A            [ 4] 1833 	ld	a,d
   07A7 9C            [ 4] 1834 	sbc	a, h
   07A8 57            [ 4] 1835 	ld	d,a
   07A9 FD 21rBAr01   [14] 1836 	ld	iy,#_n_pant
   07AD FD 66 00      [19] 1837 	ld	h,0 (iy)
   07B0 2E 00         [ 7] 1838 	ld	l,#0x00
   07B2 7C            [ 4] 1839 	ld	a,h
   07B3 93            [ 4] 1840 	sub	a, e
   07B4 7D            [ 4] 1841 	ld	a,l
   07B5 9A            [ 4] 1842 	sbc	a, d
   07B6 E2rBBr07      [10] 1843 	jp	PO, 00144$
   07B9 EE 80         [ 7] 1844 	xor	a, #0x80
   07BB                    1845 00144$:
   07BB F0            [11] 1846 	ret	P
                           1847 ;mainloop/flickscreen.h:47: n_pant += c_map_w;
   07BC 21r7Fr00      [10] 1848 	ld	hl,#_c_map_w
   07BF D5            [11] 1849 	push	de
   07C0 FD 21rBAr01   [14] 1850 	ld	iy,#_n_pant
   07C4 FD E5         [15] 1851 	push	iy
   07C6 D1            [10] 1852 	pop	de
   07C7 1A            [ 7] 1853 	ld	a,(de)
   07C8 86            [ 7] 1854 	add	a, (hl)
   07C9 12            [ 7] 1855 	ld	(de),a
   07CA D1            [10] 1856 	pop	de
                           1857 ;mainloop/flickscreen.h:48: py = 0;
   07CB 21 00 00      [10] 1858 	ld	hl,#0x0000
   07CE 22r4Cr00      [16] 1859 	ld	(_py),hl
   07D1 C9            [10] 1860 	ret
                           1861 ;mainloop.h:7: void game_init (void) {
                           1862 ;	---------------------------------
                           1863 ; Function game_init
                           1864 ; ---------------------------------
   07D2                    1865 _game_init::
                           1866 ;mainloop.h:9: win_level = game_over = 0;
   07D2 21rC0r01      [10] 1867 	ld	hl,#_game_over + 0
   07D5 36 00         [10] 1868 	ld	(hl), #0x00
   07D7 21rBFr01      [10] 1869 	ld	hl,#_win_level + 0
   07DA 36 00         [10] 1870 	ld	(hl), #0x00
   07DC FD 21rB8r01   [14] 1871 	ld	iy,#_level
   07E0 FD 6E 00      [19] 1872 	ld	l,0 (iy)
   07E3 26 00         [ 7] 1873 	ld	h,#0x00
   07E5 29            [11] 1874 	add	hl, hl
   07E6 4D            [ 4] 1875 	ld	c, l
   07E7 44            [ 4] 1876 	ld	b, h
   07E8 21rFCr01      [10] 1877 	ld	hl,#_l_ts_tmaps
   07EB 09            [11] 1878 	add	hl,bc
   07EC 7E            [ 7] 1879 	ld	a,(hl)
   07ED FD 21r82r00   [14] 1880 	ld	iy,#_c_ts_tmaps
   07F1 FD 77 00      [19] 1881 	ld	0 (iy),a
   07F4 23            [ 6] 1882 	inc	hl
   07F5 7E            [ 7] 1883 	ld	a,(hl)
   07F6 32r83r00      [13] 1884 	ld	(#_c_ts_tmaps + 1),a
                           1885 ;mainloop/asset_setup.h:10: c_behs = 		l_behs [level];
   07F9 21r02r02      [10] 1886 	ld	hl,#_l_behs
   07FC 09            [11] 1887 	add	hl,bc
   07FD 7E            [ 7] 1888 	ld	a,(hl)
   07FE FD 21r84r00   [14] 1889 	ld	iy,#_c_behs
   0802 FD 77 00      [19] 1890 	ld	0 (iy),a
   0805 23            [ 6] 1891 	inc	hl
   0806 7E            [ 7] 1892 	ld	a,(hl)
   0807 32r85r00      [13] 1893 	ld	(#_c_behs + 1),a
                           1894 ;mainloop/asset_setup.h:11: spr_enems = 	l_spr_enems [level];
   080A 21r0Er02      [10] 1895 	ld	hl,#_l_spr_enems
   080D 09            [11] 1896 	add	hl,bc
   080E 7E            [ 7] 1897 	ld	a,(hl)
   080F FD 21r86r00   [14] 1898 	ld	iy,#_spr_enems
   0813 FD 77 00      [19] 1899 	ld	0 (iy),a
   0816 23            [ 6] 1900 	inc	hl
   0817 7E            [ 7] 1901 	ld	a,(hl)
   0818 32r87r00      [13] 1902 	ld	(#_spr_enems + 1),a
                           1903 ;mainloop/asset_setup.h:13: c_map = 		l_map [level];
   081B 21r14r02      [10] 1904 	ld	hl,#_l_map
   081E 09            [11] 1905 	add	hl,bc
   081F 7E            [ 7] 1906 	ld	a,(hl)
   0820 FD 21r88r00   [14] 1907 	ld	iy,#_c_map
   0824 FD 77 00      [19] 1908 	ld	0 (iy),a
   0827 23            [ 6] 1909 	inc	hl
   0828 7E            [ 7] 1910 	ld	a,(hl)
   0829 32r89r00      [13] 1911 	ld	(#_c_map + 1),a
                           1912 ;mainloop/asset_setup.h:20: c_decos = 	l_decos [level];
   082C 3Er1A         [ 7] 1913 	ld	a,#<(_l_decos)
   082E 21rB8r01      [10] 1914 	ld	hl,#_level
   0831 86            [ 7] 1915 	add	a, (hl)
   0832 5F            [ 4] 1916 	ld	e,a
   0833 3Es02         [ 7] 1917 	ld	a,#>(_l_decos)
   0835 CE 00         [ 7] 1918 	adc	a, #0x00
   0837 57            [ 4] 1919 	ld	d,a
   0838 1A            [ 7] 1920 	ld	a,(de)
   0839 32r8Ar00      [13] 1921 	ld	(#_c_decos + 0),a
                           1922 ;mainloop/asset_setup.h:23: c_locks = 	l_locks [level];
   083C 21r1Dr02      [10] 1923 	ld	hl,#_l_locks
   083F 09            [11] 1924 	add	hl,bc
   0840 7E            [ 7] 1925 	ld	a,(hl)
   0841 FD 21r8Br00   [14] 1926 	ld	iy,#_c_locks
   0845 FD 77 00      [19] 1927 	ld	0 (iy),a
   0848 23            [ 6] 1928 	inc	hl
   0849 7E            [ 7] 1929 	ld	a,(hl)
   084A 32r8Cr00      [13] 1930 	ld	(#_c_locks + 1),a
                           1931 ;mainloop/asset_setup.h:25: l_n_bolts [level];
   084D 3Er23         [ 7] 1932 	ld	a,#<(_l_n_bolts)
   084F 21rB8r01      [10] 1933 	ld	hl,#_level
   0852 86            [ 7] 1934 	add	a, (hl)
   0853 5F            [ 4] 1935 	ld	e,a
   0854 3Es02         [ 7] 1936 	ld	a,#>(_l_n_bolts)
   0856 CE 00         [ 7] 1937 	adc	a, #0x00
   0858 57            [ 4] 1938 	ld	d,a
   0859 1A            [ 7] 1939 	ld	a,(de)
   085A 32r91r00      [13] 1940 	ld	(#_c_max_bolts + 0),a
                           1941 ;mainloop/asset_setup.h:28: c_enems = 		l_enems [level];
   085D 21r26r02      [10] 1942 	ld	hl,#_l_enems
   0860 09            [11] 1943 	add	hl,bc
   0861 7E            [ 7] 1944 	ld	a,(hl)
   0862 FD 21r8Dr00   [14] 1945 	ld	iy,#_c_enems
   0866 FD 77 00      [19] 1946 	ld	0 (iy),a
   0869 23            [ 6] 1947 	inc	hl
   086A 7E            [ 7] 1948 	ld	a,(hl)
   086B 32r8Er00      [13] 1949 	ld	(#_c_enems + 1),a
                           1950 ;mainloop/asset_setup.h:29: c_hotspots = 	l_hotspots [level];	
   086E 21r2Cr02      [10] 1951 	ld	hl,#_l_hotspots
   0871 09            [11] 1952 	add	hl,bc
   0872 7E            [ 7] 1953 	ld	a,(hl)
   0873 FD 21r8Fr00   [14] 1954 	ld	iy,#_c_hotspots
   0877 FD 77 00      [19] 1955 	ld	0 (iy),a
   087A 23            [ 6] 1956 	inc	hl
   087B 7E            [ 7] 1957 	ld	a,(hl)
   087C 32r90r00      [13] 1958 	ld	(#_c_hotspots + 1),a
                           1959 ;mainloop/asset_setup.h:31: c_max_enems = 	l_player_max_enems [level];
   087F 3ErED         [ 7] 1960 	ld	a,#<(_l_player_max_enems)
   0881 21rB8r01      [10] 1961 	ld	hl,#_level
   0884 86            [ 7] 1962 	add	a, (hl)
   0885 5F            [ 4] 1963 	ld	e,a
   0886 3Es01         [ 7] 1964 	ld	a,#>(_l_player_max_enems)
   0888 CE 00         [ 7] 1965 	adc	a, #0x00
   088A 57            [ 4] 1966 	ld	d,a
   088B 1A            [ 7] 1967 	ld	a,(de)
   088C 32rB9r01      [13] 1968 	ld	(#_c_max_enems + 0),a
                           1969 ;mainloop/asset_setup.h:33: c_map_w = 		l_map_w [level];
   088F 3ErE4         [ 7] 1970 	ld	a,#<(_l_map_w)
   0891 21rB8r01      [10] 1971 	ld	hl,#_level
   0894 86            [ 7] 1972 	add	a, (hl)
   0895 5F            [ 4] 1973 	ld	e,a
   0896 3Es01         [ 7] 1974 	ld	a,#>(_l_map_w)
   0898 CE 00         [ 7] 1975 	adc	a, #0x00
   089A 57            [ 4] 1976 	ld	d,a
   089B 1A            [ 7] 1977 	ld	a,(de)
   089C 32r7Fr00      [13] 1978 	ld	(#_c_map_w + 0),a
                           1979 ;mainloop/asset_setup.h:34: c_map_h = 		l_map_h [level];
   089F 3ErE7         [ 7] 1980 	ld	a,#<(_l_map_h)
   08A1 21rB8r01      [10] 1981 	ld	hl,#_level
   08A4 86            [ 7] 1982 	add	a, (hl)
   08A5 5F            [ 4] 1983 	ld	e,a
   08A6 3Es01         [ 7] 1984 	ld	a,#>(_l_map_h)
   08A8 CE 00         [ 7] 1985 	adc	a, #0x00
   08AA 57            [ 4] 1986 	ld	d,a
   08AB 1A            [ 7] 1987 	ld	a,(de)
                           1988 ;mainloop/asset_setup.h:84: rda = c_map_h; c_map_size = 0; while (rda --) c_map_size += c_map_w;
   08AC 32r80r00      [13] 1989 	ld	(#_c_map_h + 0),a
   08AF 32r18r00      [13] 1990 	ld	(#_rda + 0),a
   08B2 21r81r00      [10] 1991 	ld	hl,#_c_map_size + 0
   08B5 36 00         [10] 1992 	ld	(hl), #0x00
   08B7                    1993 00101$:
   08B7 21r18r00      [10] 1994 	ld	hl,#_rda + 0
   08BA 56            [ 7] 1995 	ld	d, (hl)
   08BB 21r18r00      [10] 1996 	ld	hl, #_rda+0
   08BE 35            [11] 1997 	dec	(hl)
   08BF 7A            [ 4] 1998 	ld	a,d
   08C0 B7            [ 4] 1999 	or	a, a
   08C1 28 11         [12] 2000 	jr	Z,00103$
   08C3 21r7Fr00      [10] 2001 	ld	hl,#_c_map_w
   08C6 D5            [11] 2002 	push	de
   08C7 FD 21r81r00   [14] 2003 	ld	iy,#_c_map_size
   08CB FD E5         [15] 2004 	push	iy
   08CD D1            [10] 2005 	pop	de
   08CE 1A            [ 7] 2006 	ld	a,(de)
   08CF 86            [ 7] 2007 	add	a, (hl)
   08D0 12            [ 7] 2008 	ld	(de),a
   08D1 D1            [10] 2009 	pop	de
   08D2 18 E3         [12] 2010 	jr	00101$
   08D4                    2011 00103$:
                           2012 ;my/level_pattern_unpacker.h:3: unpack_bg_patterns (l_ts_patterns [level], l_ts_colours [level], 64*8, 7);
   08D4 21rF6r01      [10] 2013 	ld	hl,#_l_ts_colours
   08D7 09            [11] 2014 	add	hl,bc
   08D8 5E            [ 7] 2015 	ld	e,(hl)
   08D9 23            [ 6] 2016 	inc	hl
   08DA 56            [ 7] 2017 	ld	d,(hl)
   08DB 21rF0r01      [10] 2018 	ld	hl,#_l_ts_patterns
   08DE 09            [11] 2019 	add	hl,bc
   08DF 4E            [ 7] 2020 	ld	c,(hl)
   08E0 23            [ 6] 2021 	inc	hl
   08E1 46            [ 7] 2022 	ld	b,(hl)
   08E2 3E 07         [ 7] 2023 	ld	a,#0x07
   08E4 F5            [11] 2024 	push	af
   08E5 33            [ 6] 2025 	inc	sp
   08E6 21 00 02      [10] 2026 	ld	hl,#0x0200
   08E9 E5            [11] 2027 	push	hl
   08EA D5            [11] 2028 	push	de
   08EB C5            [11] 2029 	push	bc
   08EC CDr00r00      [17] 2030 	call	_unpack_bg_patterns
   08EF 21 07 00      [10] 2031 	ld	hl,#7
   08F2 39            [11] 2032 	add	hl,sp
   08F3 F9            [ 6] 2033 	ld	sp,hl
                           2034 ;my/level_pattern_unpacker.h:4: aPLib_depack_VRAM (SGT_BASE + 160*8, l_spr_patterns [level]);
   08F4 FD 21rB8r01   [14] 2035 	ld	iy,#_level
   08F8 FD 6E 00      [19] 2036 	ld	l,0 (iy)
   08FB 26 00         [ 7] 2037 	ld	h,#0x00
   08FD 29            [11] 2038 	add	hl, hl
   08FE 11r08r02      [10] 2039 	ld	de,#_l_spr_patterns
   0901 19            [11] 2040 	add	hl,de
   0902 5E            [ 7] 2041 	ld	e,(hl)
   0903 23            [ 6] 2042 	inc	hl
   0904 56            [ 7] 2043 	ld	d,(hl)
   0905 D5            [11] 2044 	push	de
   0906 21 00 3D      [10] 2045 	ld	hl,#0x3D00
   0909 E5            [11] 2046 	push	hl
   090A CDr00r00      [17] 2047 	call	_aPLib_depack_VRAM
   090D F1            [10] 2048 	pop	af
   090E F1            [10] 2049 	pop	af
                           2050 ;mainloop.h:17: cls ();
   090F CDr00r00      [17] 2051 	call	_cls
                           2052 ;mainloop.h:19: draw_game_frame ();
   0912 CDrD2r02      [17] 2053 	call	_draw_game_frame
                           2054 ;mainloop.h:22: hotspots_load ();
   0915 CDr00r00      [17] 2055 	call	_hotspots_load
                           2056 ;mainloop.h:25: memfill (lkact, 1, c_max_bolts);
   0918 21r91r00      [10] 2057 	ld	hl,#_c_max_bolts + 0
   091B 4E            [ 7] 2058 	ld	c, (hl)
   091C 06 00         [ 7] 2059 	ld	b,#0x00
   091E 11rE4r01      [10] 2060 	ld	de,#_lkact
   0921 C5            [11] 2061 	push	bc
   0922 3E 01         [ 7] 2062 	ld	a,#0x01
   0924 F5            [11] 2063 	push	af
   0925 33            [ 6] 2064 	inc	sp
   0926 D5            [11] 2065 	push	de
   0927 CDr00r00      [17] 2066 	call	_memfill
   092A F1            [10] 2067 	pop	af
   092B F1            [10] 2068 	pop	af
   092C 33            [ 6] 2069 	inc	sp
                           2070 ;mainloop.h:28: if (!warp_to_level)	{
   092D 3ArC1r01      [13] 2071 	ld	a,(#_warp_to_level + 0)
   0930 B7            [ 4] 2072 	or	a, a
   0931 20 43         [12] 2073 	jr	NZ,00105$
                           2074 ;mainloop.h:29: n_pant = SCR_INI;
   0933 11rDBr01      [10] 2075 	ld	de,#_l_scr_ini+0
   0936 2ArB8r01      [16] 2076 	ld	hl,(_level)
   0939 26 00         [ 7] 2077 	ld	h,#0x00
   093B 19            [11] 2078 	add	hl,de
   093C 7E            [ 7] 2079 	ld	a,(hl)
   093D 32rBAr01      [13] 2080 	ld	(#_n_pant + 0),a
                           2081 ;mainloop.h:30: px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
   0940 11rDEr01      [10] 2082 	ld	de,#_l_ini_x+0
   0943 2ArB8r01      [16] 2083 	ld	hl,(_level)
   0946 26 00         [ 7] 2084 	ld	h,#0x00
   0948 19            [11] 2085 	add	hl,de
   0949 6E            [ 7] 2086 	ld	l,(hl)
   094A 26 00         [ 7] 2087 	ld	h,#0x00
   094C 29            [11] 2088 	add	hl, hl
   094D 29            [11] 2089 	add	hl, hl
   094E 29            [11] 2090 	add	hl, hl
   094F 29            [11] 2091 	add	hl, hl
   0950 01 04 00      [10] 2092 	ld	bc,#0x0004
   0953 09            [11] 2093 	add	hl,bc
   0954 29            [11] 2094 	add	hl, hl
   0955 29            [11] 2095 	add	hl, hl
   0956 29            [11] 2096 	add	hl, hl
   0957 29            [11] 2097 	add	hl, hl
   0958 29            [11] 2098 	add	hl, hl
   0959 29            [11] 2099 	add	hl, hl
   095A 22r4Ar00      [16] 2100 	ld	(_px),hl
                           2101 ;mainloop.h:31: py = (PLAYER_INI_Y << 4) << FIXBITS;
   095D 11rE1r01      [10] 2102 	ld	de,#_l_ini_y+0
   0960 2ArB8r01      [16] 2103 	ld	hl,(_level)
   0963 26 00         [ 7] 2104 	ld	h,#0x00
   0965 19            [11] 2105 	add	hl,de
   0966 6E            [ 7] 2106 	ld	l,(hl)
   0967 26 00         [ 7] 2107 	ld	h,#0x00
   0969 29            [11] 2108 	add	hl, hl
   096A 29            [11] 2109 	add	hl, hl
   096B 29            [11] 2110 	add	hl, hl
   096C 29            [11] 2111 	add	hl, hl
   096D 29            [11] 2112 	add	hl, hl
   096E 29            [11] 2113 	add	hl, hl
   096F 29            [11] 2114 	add	hl, hl
   0970 29            [11] 2115 	add	hl, hl
   0971 29            [11] 2116 	add	hl, hl
   0972 29            [11] 2117 	add	hl, hl
   0973 22r4Cr00      [16] 2118 	ld	(_py),hl
   0976                    2119 00105$:
                           2120 ;mainloop.h:33: player_to_pixels ();
   0976 CDr00r00      [17] 2121 	call	_player_to_pixels
                           2122 ;mainloop.h:34: player_init ();
   0979 CDr00r00      [17] 2123 	call	_player_init
                           2124 ;mainloop.h:37: enems_persistent_load ();
   097C CDr00r00      [17] 2125 	call	_enems_persistent_load
                           2126 ;mainloop.h:41: enems_persistent_deaths_load ();
   097F CDr00r00      [17] 2127 	call	_enems_persistent_deaths_load
                           2128 ;mainloop.h:53: pkeys = 0;
   0982 21r70r00      [10] 2129 	ld	hl,#_pkeys + 0
   0985 36 00         [10] 2130 	ld	(hl), #0x00
                           2131 ;mainloop.h:57: res_on = 0;
   0987 21rB1r02      [10] 2132 	ld	hl,#_res_on + 0
   098A 36 00         [10] 2133 	ld	(hl), #0x00
                           2134 ;mainloop.h:58: res_disable = 0;
   098C 21rB0r02      [10] 2135 	ld	hl,#_res_disable + 0
   098F 36 00         [10] 2136 	ld	(hl), #0x00
                           2137 ;mainloop.h:66: no_ct = 0;
   0991 21rCAr01      [10] 2138 	ld	hl,#_no_ct + 0
   0994 36 00         [10] 2139 	ld	(hl), #0x00
                           2140 ;mainloop.h:105: half_life = 0;
   0996 21rBCr01      [10] 2141 	ld	hl,#_half_life + 0
   0999 36 00         [10] 2142 	ld	(hl), #0x00
                           2143 ;mainloop.h:106: frame_counter = 0;
   099B 21rBDr01      [10] 2144 	ld	hl,#_frame_counter + 0
   099E 36 00         [10] 2145 	ld	(hl), #0x00
                           2146 ;mainloop.h:107: olife = oammo = oobjs = okeys = 0xff;
   09A0 21rC5r01      [10] 2147 	ld	hl,#_okeys + 0
   09A3 36 FF         [10] 2148 	ld	(hl), #0xFF
   09A5 21rC6r01      [10] 2149 	ld	hl,#_oobjs + 0
   09A8 36 FF         [10] 2150 	ld	(hl), #0xFF
   09AA 21rC7r01      [10] 2151 	ld	hl,#_oammo + 0
   09AD 36 FF         [10] 2152 	ld	(hl), #0xFF
   09AF 21rC4r01      [10] 2153 	ld	hl,#_olife + 0
   09B2 36 FF         [10] 2154 	ld	(hl), #0xFF
                           2155 ;mainloop.h:108: okilled = 0xff;
   09B4 21rC8r01      [10] 2156 	ld	hl,#_okilled + 0
   09B7 36 FF         [10] 2157 	ld	(hl), #0xFF
                           2158 ;my/extra_inits.h:7: springs_on = (level == 1);
   09B9 3ArB8r01      [13] 2159 	ld	a,(#_level + 0)
   09BC 3D            [ 4] 2160 	dec	a
   09BD 20 04         [12] 2161 	jr	NZ,00120$
   09BF 3E 01         [ 7] 2162 	ld	a,#0x01
   09C1 18 01         [12] 2163 	jr	00121$
   09C3                    2164 00120$:
   09C3 AF            [ 4] 2165 	xor	a,a
   09C4                    2166 00121$:
   09C4 32rB5r02      [13] 2167 	ld	(#_springs_on + 0),a
   09C7 C9            [10] 2168 	ret
                           2169 ;mainloop.h:117: void prepare_scr (void) {
                           2170 ;	---------------------------------
                           2171 ; Function prepare_scr
                           2172 ; ---------------------------------
   09C8                    2173 _prepare_scr::
                           2174 ;mainloop.h:118: SG_displayOff ();
   09C8 21 40 01      [10] 2175 	ld	hl,#0x0140
   09CB E5            [11] 2176 	push	hl
   09CC CDr00r00      [17] 2177 	call	_SG_VDPturnOffFeature
   09CF F1            [10] 2178 	pop	af
                           2179 ;mainloop.h:128: ft = 0;
   09D0 FD 21r7Er00   [14] 2180 	ld	iy,#_ft
   09D4 FD 36 00 00   [19] 2181 	ld	0 (iy),#0x00
                           2182 ;mainloop.h:130: update_list [update_index] = 0xff;
   09D8 3Ar94r00      [13] 2183 	ld	a,(#_update_index + 0)
   09DB C6r95         [ 7] 2184 	add	a, #<(_update_list)
   09DD 6F            [ 4] 2185 	ld	l, a
   09DE 3E 00         [ 7] 2186 	ld	a, #0x00
   09E0 CEs00         [ 7] 2187 	adc	a, #>(_update_list)
   09E2 67            [ 4] 2188 	ld	h, a
   09E3 36 FF         [10] 2189 	ld	(hl),#0xFF
                           2190 ;mainloop.h:131: SG_doUpdateList ();
   09E5 CDr00r00      [17] 2191 	call	_SG_doUpdateList
                           2192 ;mainloop.h:132: clear_update_list ();
   09E8 CDr00r00      [17] 2193 	call	_clear_update_list
                           2194 ;mainloop.h:141: enems_persistent_update ();
   09EB CDr00r00      [17] 2195 	call	_enems_persistent_update
                           2196 ;mainloop.h:144: enems_load ();
   09EE CDr00r00      [17] 2197 	call	_enems_load
                           2198 ;mainloop.h:145: hotspots_create ();	
   09F1 CDr72r02      [17] 2199 	call	_hotspots_create
                           2200 ;mainloop.h:162: chac_chacs_queue_write = chac_chacs_queue_read = 0;
   09F4 21rAEr02      [10] 2201 	ld	hl,#_chac_chacs_queue_read + 0
   09F7 36 00         [10] 2202 	ld	(hl), #0x00
   09F9 21rAFr02      [10] 2203 	ld	hl,#_chac_chacs_queue_write + 0
   09FC 36 00         [10] 2204 	ld	(hl), #0x00
                           2205 ;mainloop.h:163: max_chac_chacs = 0;
   09FE 21r8Dr02      [10] 2206 	ld	hl,#_max_chac_chacs + 0
   0A01 36 00         [10] 2207 	ld	(hl), #0x00
                           2208 ;mainloop.h:172: draw_scr ();
   0A03 CDr00r00      [17] 2209 	call	_draw_scr
                           2210 ;mainloop.h:210: SG_initSprites ();
   0A06 CDr00r00      [17] 2211 	call	_SG_initSprites
                           2212 ;my/on_entering_screen.h:8: if (mode_no_resonators) {
   0A09 3ArB7r02      [13] 2213 	ld	a,(#_mode_no_resonators + 0)
   0A0C B7            [ 4] 2214 	or	a, a
   0A0D 28 11         [12] 2215 	jr	Z,00104$
                           2216 ;my/on_entering_screen.h:9: res_disable = 1;
   0A0F 21rB0r02      [10] 2217 	ld	hl,#_res_disable + 0
   0A12 36 01         [10] 2218 	ld	(hl), #0x01
                           2219 ;my/on_entering_screen.h:10: if (hrt == HOTSPOT_TYPE_RESONATOR) hrt = 0;
   0A14 3Ar7Cr00      [13] 2220 	ld	a,(#_hrt + 0)
   0A17 D6 04         [ 7] 2221 	sub	a, #0x04
   0A19 20 05         [12] 2222 	jr	NZ,00104$
   0A1B 21r7Cr00      [10] 2223 	ld	hl,#_hrt + 0
   0A1E 36 00         [10] 2224 	ld	(hl), #0x00
   0A20                    2225 00104$:
                           2226 ;mainloop.h:227: gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
   0A20 21r08r00      [10] 2227 	ld	hl,#_gpit + 0
   0A23 36 03         [10] 2228 	ld	(hl), #0x03
   0A25                    2229 00105$:
   0A25 21r08r00      [10] 2230 	ld	hl,#_gpit + 0
   0A28 5E            [ 7] 2231 	ld	e, (hl)
   0A29 21r08r00      [10] 2232 	ld	hl, #_gpit+0
   0A2C 35            [11] 2233 	dec	(hl)
   0A2D 7B            [ 4] 2234 	ld	a,e
   0A2E B7            [ 4] 2235 	or	a, a
   0A2F 28 1E         [12] 2236 	jr	Z,00107$
   0A31 3Er42         [ 7] 2237 	ld	a,#<(_en_spr_id)
   0A33 21r08r00      [10] 2238 	ld	hl,#_gpit
   0A36 86            [ 7] 2239 	add	a, (hl)
   0A37 5F            [ 4] 2240 	ld	e,a
   0A38 3Es02         [ 7] 2241 	ld	a,#>(_en_spr_id)
   0A3A CE 00         [ 7] 2242 	adc	a, #0x00
   0A3C 57            [ 4] 2243 	ld	d,a
   0A3D FD 21r11r02   [14] 2244 	ld	iy,#_en_s
   0A41 ED 4Br08r00   [20] 2245 	ld	bc,(_gpit)
   0A45 06 00         [ 7] 2246 	ld	b,#0x00
   0A47 FD 09         [15] 2247 	add	iy, bc
   0A49 FD 7E 00      [19] 2248 	ld	a, 0 (iy)
   0A4C 12            [ 7] 2249 	ld	(de),a
   0A4D 18 D6         [12] 2250 	jr	00105$
   0A4F                    2251 00107$:
                           2252 ;mainloop.h:229: prx = px >> FIXBITS; pry = py >> FIXBITS;
   0A4F 2Ar4Ar00      [16] 2253 	ld	hl,(_px)
   0A52 CB 2C         [ 8] 2254 	sra	h
   0A54 CB 1D         [ 8] 2255 	rr	l
   0A56 CB 2C         [ 8] 2256 	sra	h
   0A58 CB 1D         [ 8] 2257 	rr	l
   0A5A CB 2C         [ 8] 2258 	sra	h
   0A5C CB 1D         [ 8] 2259 	rr	l
   0A5E CB 2C         [ 8] 2260 	sra	h
   0A60 CB 1D         [ 8] 2261 	rr	l
   0A62 CB 2C         [ 8] 2262 	sra	h
   0A64 CB 1D         [ 8] 2263 	rr	l
   0A66 CB 2C         [ 8] 2264 	sra	h
   0A68 CB 1D         [ 8] 2265 	rr	l
   0A6A FD 21r52r00   [14] 2266 	ld	iy,#_prx
   0A6E FD 75 00      [19] 2267 	ld	0 (iy),l
   0A71 2Ar4Cr00      [16] 2268 	ld	hl,(_py)
   0A74 CB 2C         [ 8] 2269 	sra	h
   0A76 CB 1D         [ 8] 2270 	rr	l
   0A78 CB 2C         [ 8] 2271 	sra	h
   0A7A CB 1D         [ 8] 2272 	rr	l
   0A7C CB 2C         [ 8] 2273 	sra	h
   0A7E CB 1D         [ 8] 2274 	rr	l
   0A80 CB 2C         [ 8] 2275 	sra	h
   0A82 CB 1D         [ 8] 2276 	rr	l
   0A84 CB 2C         [ 8] 2277 	sra	h
   0A86 CB 1D         [ 8] 2278 	rr	l
   0A88 CB 2C         [ 8] 2279 	sra	h
   0A8A CB 1D         [ 8] 2280 	rr	l
   0A8C FD 21r53r00   [14] 2281 	ld	iy,#_pry
   0A90 FD 75 00      [19] 2282 	ld	0 (iy),l
                           2283 ;mainloop.h:234: player_move ();
   0A93 CDr00r00      [17] 2284 	call	_player_move
                           2285 ;mainloop.h:235: enems_move ();
   0A96 CDr00r00      [17] 2286 	call	_enems_move
                           2287 ;mainloop.h:237: if (hrt) hotspots_paint ();
   0A99 3Ar7Cr00      [13] 2288 	ld	a,(#_hrt + 0)
   0A9C B7            [ 4] 2289 	or	a, a
   0A9D 28 03         [12] 2290 	jr	Z,00109$
   0A9F CDr35r02      [17] 2291 	call	_hotspots_paint
   0AA2                    2292 00109$:
                           2293 ;mainloop.h:252: hud_update ();
   0AA2 CDrDBr02      [17] 2294 	call	_hud_update
                           2295 ;mainloop.h:253: SG_copySpritestoSAT ();
   0AA5 CDr00r00      [17] 2296 	call	_SG_copySpritestoSAT
                           2297 ;mainloop.h:254: update_list [update_index] = 0xff;
   0AA8 3Ar94r00      [13] 2298 	ld	a,(#_update_index + 0)
   0AAB C6r95         [ 7] 2299 	add	a, #<(_update_list)
   0AAD 6F            [ 4] 2300 	ld	l, a
   0AAE 3E 00         [ 7] 2301 	ld	a, #0x00
   0AB0 CEs00         [ 7] 2302 	adc	a, #>(_update_list)
   0AB2 67            [ 4] 2303 	ld	h, a
   0AB3 36 FF         [10] 2304 	ld	(hl),#0xFF
                           2305 ;mainloop.h:255: SG_doUpdateList ();
   0AB5 CDr00r00      [17] 2306 	call	_SG_doUpdateList
                           2307 ;mainloop.h:256: clear_update_list ();	
   0AB8 CDr00r00      [17] 2308 	call	_clear_update_list
                           2309 ;mainloop.h:257: SG_displayOn ();
   0ABB 21 40 01      [10] 2310 	ld	hl,#0x0140
   0ABE E5            [11] 2311 	push	hl
   0ABF CDr00r00      [17] 2312 	call	_SG_VDPturnOnFeature
   0AC2 F1            [10] 2313 	pop	af
   0AC3 C9            [10] 2314 	ret
                           2315 ;mainloop.h:260: void game_loop (void) {
                           2316 ;	---------------------------------
                           2317 ; Function game_loop
                           2318 ; ---------------------------------
   0AC4                    2319 _game_loop::
                           2320 ;mainloop.h:267: clear_update_list ();
   0AC4 CDr00r00      [17] 2321 	call	_clear_update_list
                           2322 ;mainloop.h:270: on_pant = 99; ft = 1; fade_delay = 1;
   0AC7 21rBBr01      [10] 2323 	ld	hl,#_on_pant + 0
   0ACA 36 63         [10] 2324 	ld	(hl), #0x63
   0ACC 21r7Er00      [10] 2325 	ld	hl,#_ft + 0
   0ACF 36 01         [10] 2326 	ld	(hl), #0x01
   0AD1 21rF6r00      [10] 2327 	ld	hl,#_fade_delay + 0
   0AD4 36 01         [10] 2328 	ld	(hl), #0x01
                           2329 ;mainloop.h:274: SG_displayOn ();
   0AD6 21 40 01      [10] 2330 	ld	hl,#0x0140
   0AD9 E5            [11] 2331 	push	hl
   0ADA CDr00r00      [17] 2332 	call	_SG_VDPturnOnFeature
   0ADD F1            [10] 2333 	pop	af
                           2334 ;mainloop.h:285: ntsc_frame = level_reset = warp_to_level = 0; 
   0ADE 21rC1r01      [10] 2335 	ld	hl,#_warp_to_level + 0
   0AE1 36 00         [10] 2336 	ld	(hl), #0x00
   0AE3 21rC2r01      [10] 2337 	ld	hl,#_level_reset + 0
   0AE6 36 00         [10] 2338 	ld	(hl), #0x00
   0AE8 21r93r00      [10] 2339 	ld	hl,#_ntsc_frame + 0
   0AEB 36 00         [10] 2340 	ld	(hl), #0x00
                           2341 ;mainloop.h:286: ticker = 50;
   0AED 21r1Fr00      [10] 2342 	ld	hl,#_ticker + 0
   0AF0 36 32         [10] 2343 	ld	(hl), #0x32
                           2344 ;mainloop.h:288: PSGPlay (m_yun_psg);
   0AF2 21r00r00      [10] 2345 	ld	hl,#_m_yun_psg
   0AF5 E5            [11] 2346 	push	hl
   0AF6 CDr00r00      [17] 2347 	call	_PSGPlay
   0AF9 F1            [10] 2348 	pop	af
                           2349 ;mainloop.h:290: while (1) {
   0AFA                    2350 00167$:
                           2351 ;mainloop.h:297: hud_update ();
   0AFA CDrDBr02      [17] 2352 	call	_hud_update
                           2353 ;mainloop.h:301: if (pkill) player_kill ();
   0AFD 3Ar6Br00      [13] 2354 	ld	a,(#_pkill + 0)
   0B00 B7            [ 4] 2355 	or	a, a
   0B01 28 03         [12] 2356 	jr	Z,00102$
   0B03 CDr00r00      [17] 2357 	call	_player_kill
   0B06                    2358 00102$:
                           2359 ;mainloop.h:302: if (game_over || level_reset) break;			
   0B06 3ArC0r01      [13] 2360 	ld	a,(#_game_over + 0)
   0B09 B7            [ 4] 2361 	or	a, a
   0B0A C2r70r0D      [10] 2362 	jp	NZ,00168$
   0B0D 3ArC2r01      [13] 2363 	ld	a,(#_level_reset + 0)
   0B10 B7            [ 4] 2364 	or	a, a
   0B11 C2r70r0D      [10] 2365 	jp	NZ,00168$
                           2366 ;mainloop.h:308: flick_override = 0;
   0B14 21rC3r01      [10] 2367 	ld	hl,#_flick_override + 0
   0B17 36 00         [10] 2368 	ld	(hl), #0x00
                           2369 ;mainloop.h:311: flickscreen_do_horizontal ();
   0B19 CDrE4r06      [17] 2370 	call	_flickscreen_do_horizontal
                           2371 ;mainloop.h:312: flickscreen_do_vertical ();
   0B1C CDr2Fr07      [17] 2372 	call	_flickscreen_do_vertical
                           2373 ;mainloop.h:318: if (on_pant != n_pant) {
   0B1F 3ArBBr01      [13] 2374 	ld	a,(#_on_pant + 0)
   0B22 FD 21rBAr01   [14] 2375 	ld	iy,#_n_pant
   0B26 FD 96 00      [19] 2376 	sub	a, 0 (iy)
   0B29 28 09         [12] 2377 	jr	Z,00109$
                           2378 ;mainloop.h:319: prepare_scr ();
   0B2B CDrC8r09      [17] 2379 	call	_prepare_scr
                           2380 ;mainloop.h:320: on_pant = n_pant;
   0B2E 3ArBAr01      [13] 2381 	ld	a,(#_n_pant + 0)
   0B31 32rBBr01      [13] 2382 	ld	(#_on_pant + 0),a
   0B34                    2383 00109$:
                           2384 ;mainloop.h:339: SG_waitForVBlank ();
   0B34 CDr00r00      [17] 2385 	call	_SG_waitForVBlank
                           2386 ;mainloop.h:340: SG_copySpritestoSAT ();
   0B37 CDr00r00      [17] 2387 	call	_SG_copySpritestoSAT
                           2388 ;mainloop.h:341: update_list [update_index] = 0xff;
   0B3A 3Er95         [ 7] 2389 	ld	a,#<(_update_list)
   0B3C 21r94r00      [10] 2390 	ld	hl,#_update_index
   0B3F 86            [ 7] 2391 	add	a, (hl)
   0B40 6F            [ 4] 2392 	ld	l, a
   0B41 3Es00         [ 7] 2393 	ld	a, #>(_update_list)
   0B43 CE 00         [ 7] 2394 	adc	a, #0x00
   0B45 67            [ 4] 2395 	ld	h, a
   0B46 36 FF         [10] 2396 	ld	(hl),#0xFF
                           2397 ;mainloop.h:342: SG_doUpdateList ();
   0B48 CDr00r00      [17] 2398 	call	_SG_doUpdateList
                           2399 ;mainloop.h:343: clear_update_list ();
   0B4B CDr00r00      [17] 2400 	call	_clear_update_list
                           2401 ;mainloop.h:347: pad_read ();
   0B4E CDr00r00      [17] 2402 	call	_pad_read
                           2403 ;mainloop.h:348: a_button = (pad_this_frame & PAD_A);
   0B51 3Ar06r00      [13] 2404 	ld	a,(#_pad_this_frame + 0)
   0B54 E6 20         [ 7] 2405 	and	a, #0x20
   0B56 67            [ 4] 2406 	ld	h,a
   0B57 FD 21r59r00   [14] 2407 	ld	iy,#_a_button
   0B5B FD 74 00      [19] 2408 	ld	0 (iy),h
                           2409 ;mainloop.h:349: b_button = (pad_this_frame & PAD_B);
   0B5E 3Ar06r00      [13] 2410 	ld	a,(#_pad_this_frame + 0)
   0B61 E6 10         [ 7] 2411 	and	a, #0x10
   0B63 67            [ 4] 2412 	ld	h,a
   0B64 FD 21r5Ar00   [14] 2413 	ld	iy,#_b_button
   0B68 FD 74 00      [19] 2414 	ld	0 (iy),h
                           2415 ;mainloop.h:353: ntsc_frame ++; if (ntsc_frame == 6) ntsc_frame = 0;
   0B6B 21r93r00      [10] 2416 	ld	hl, #_ntsc_frame+0
   0B6E 34            [11] 2417 	inc	(hl)
   0B6F 3Ar93r00      [13] 2418 	ld	a,(#_ntsc_frame + 0)
   0B72 D6 06         [ 7] 2419 	sub	a, #0x06
   0B74 20 05         [12] 2420 	jr	NZ,00111$
   0B76 21r93r00      [10] 2421 	ld	hl,#_ntsc_frame + 0
   0B79 36 00         [10] 2422 	ld	(hl), #0x00
   0B7B                    2423 00111$:
                           2424 ;mainloop.h:355: if (paused == 0 && (ntsc == 0 || ntsc_frame)) {
   0B7B 3ArBEr01      [13] 2425 	ld	a,(#_paused + 0)
   0B7E B7            [ 4] 2426 	or	a, a
   0B7F C2r4Cr0D      [10] 2427 	jp	NZ,00159$
   0B82 3Ar92r00      [13] 2428 	ld	a,(#_ntsc + 0)
   0B85 B7            [ 4] 2429 	or	a, a
   0B86 28 07         [12] 2430 	jr	Z,00158$
   0B88 3Ar93r00      [13] 2431 	ld	a,(#_ntsc_frame + 0)
   0B8B B7            [ 4] 2432 	or	a, a
   0B8C CAr4Cr0D      [10] 2433 	jp	Z,00159$
   0B8F                    2434 00158$:
                           2435 ;mainloop.h:356: SG_initSprites ();
   0B8F CDr00r00      [17] 2436 	call	_SG_initSprites
                           2437 ;mainloop.h:359: if (ticker) -- ticker; else ticker = 50;
   0B92 3Ar1Fr00      [13] 2438 	ld	a,(#_ticker + 0)
   0B95 B7            [ 4] 2439 	or	a, a
   0B96 28 09         [12] 2440 	jr	Z,00113$
   0B98 FD 21r1Fr00   [14] 2441 	ld	iy,#_ticker
   0B9C FD 35 00      [23] 2442 	dec	0 (iy)
   0B9F 18 08         [12] 2443 	jr	00114$
   0BA1                    2444 00113$:
   0BA1 FD 21r1Fr00   [14] 2445 	ld	iy,#_ticker
   0BA5 FD 36 00 32   [19] 2446 	ld	0 (iy),#0x32
   0BA9                    2447 00114$:
                           2448 ;mainloop.h:360: half_life ^= 1;
   0BA9 3ArBCr01      [13] 2449 	ld	a,(#_half_life + 0)
   0BAC EE 01         [ 7] 2450 	xor	a, #0x01
   0BAE FD 21rBCr01   [14] 2451 	ld	iy,#_half_life
   0BB2 FD 77 00      [19] 2452 	ld	0 (iy),a
                           2453 ;mainloop.h:361: ++ frame_counter;
   0BB5 FD 21rBDr01   [14] 2454 	ld	iy,#_frame_counter
   0BB9 FD 34 00      [23] 2455 	inc	0 (iy)
                           2456 ;mainloop/hotspots.h:6: if (hrt) {
   0BBC 3Ar7Cr00      [13] 2457 	ld	a,(#_hrt + 0)
   0BBF B7            [ 4] 2458 	or	a, a
   0BC0 CAr76r0C      [10] 2459 	jp	Z,00131$
                           2460 ;mainloop/hotspots.h:7: if (collide_in (prx + 4, pry + 8, hrx, hry)) {
   0BC3 3Ar53r00      [13] 2461 	ld	a,(#_pry + 0)
   0BC6 C6 08         [ 7] 2462 	add	a, #0x08
   0BC8 47            [ 4] 2463 	ld	b,a
   0BC9 21r52r00      [10] 2464 	ld	hl,#_prx + 0
   0BCC 56            [ 7] 2465 	ld	d, (hl)
   0BCD 14            [ 4] 2466 	inc	d
   0BCE 14            [ 4] 2467 	inc	d
   0BCF 14            [ 4] 2468 	inc	d
   0BD0 14            [ 4] 2469 	inc	d
   0BD1 3Ar7Br00      [13] 2470 	ld	a,(_hry)
   0BD4 F5            [11] 2471 	push	af
   0BD5 33            [ 6] 2472 	inc	sp
   0BD6 3Ar7Ar00      [13] 2473 	ld	a,(_hrx)
   0BD9 F5            [11] 2474 	push	af
   0BDA 33            [ 6] 2475 	inc	sp
   0BDB 4A            [ 4] 2476 	ld	c, d
   0BDC C5            [11] 2477 	push	bc
   0BDD CDr00r00      [17] 2478 	call	_collide_in
   0BE0 F1            [10] 2479 	pop	af
   0BE1 F1            [10] 2480 	pop	af
   0BE2 7D            [ 4] 2481 	ld	a,l
   0BE3 B7            [ 4] 2482 	or	a, a
   0BE4 CAr76r0C      [10] 2483 	jp	Z,00131$
                           2484 ;mainloop/hotspots.h:9: if (hrt == HOTSPOT_TYPE_RESONATOR) {
   0BE7 3Ar7Cr00      [13] 2485 	ld	a,(#_hrt + 0)
   0BEA D6 04         [ 7] 2486 	sub	a, #0x04
   0BEC 20 3A         [12] 2487 	jr	NZ,00126$
                           2488 ;mainloop/hotspots.h:10: if (pvy > 0 && pry < hry) {
   0BEE AF            [ 4] 2489 	xor	a, a
   0BEF FD 21r50r00   [14] 2490 	ld	iy,#_pvy
   0BF3 FD BE 00      [19] 2491 	cp	a, 0 (iy)
   0BF6 FD 21r50r00   [14] 2492 	ld	iy,#_pvy
   0BFA FD 9E 01      [19] 2493 	sbc	a, 1 (iy)
   0BFD E2r02r0C      [10] 2494 	jp	PO, 00309$
   0C00 EE 80         [ 7] 2495 	xor	a, #0x80
   0C02                    2496 00309$:
   0C02 F2r76r0C      [10] 2497 	jp	P,00131$
   0C05 21r7Br00      [10] 2498 	ld	hl,#_hry
   0C08 3Ar53r00      [13] 2499 	ld	a,(#_pry + 0)
   0C0B 96            [ 7] 2500 	sub	a, (hl)
   0C0C 30 68         [12] 2501 	jr	NC,00131$
                           2502 ;mainloop/hotspots.h:11: if (res_on == 0) {
   0C0E 3ArB1r02      [13] 2503 	ld	a,(#_res_on + 0)
   0C11 B7            [ 4] 2504 	or	a, a
   0C12 20 62         [12] 2505 	jr	NZ,00131$
                           2506 ;mainloop/hotspots.h:12: res_on = 1; res_ct = 9; res_subct = 50;
   0C14 21rB1r02      [10] 2507 	ld	hl,#_res_on + 0
   0C17 36 01         [10] 2508 	ld	(hl), #0x01
   0C19 21rB2r02      [10] 2509 	ld	hl,#_res_ct + 0
   0C1C 36 09         [10] 2510 	ld	(hl), #0x09
   0C1E 21rB3r02      [10] 2511 	ld	hl,#_res_subct + 0
   0C21 36 32         [10] 2512 	ld	(hl), #0x32
                           2513 ;mainloop/hotspots.h:13: jump_start ();
   0C23 CDr00r00      [17] 2514 	call	_jump_start
   0C26 18 4E         [12] 2515 	jr	00131$
   0C28                    2516 00126$:
                           2517 ;mainloop/hotspots.h:128: rda = 0;
   0C28 FD 21r18r00   [14] 2518 	ld	iy,#_rda
   0C2C FD 36 00 00   [19] 2519 	ld	0 (iy),#0x00
                           2520 ;mainloop/hotspots.h:129: switch (hrt) {
   0C30 3Ar7Cr00      [13] 2521 	ld	a,(#_hrt + 0)
   0C33 FE 02         [ 7] 2522 	cp	a,#0x02
   0C35 28 06         [12] 2523 	jr	Z,00120$
   0C37 D6 03         [ 7] 2524 	sub	a, #0x03
   0C39 28 13         [12] 2525 	jr	Z,00121$
   0C3B 18 20         [12] 2526 	jr	00122$
                           2527 ;mainloop/hotspots.h:151: case HOTSPOT_TYPE_KEYS:
   0C3D                    2528 00120$:
                           2529 ;mainloop/hotspots.h:152: ++ pkeys;
   0C3D FD 21r70r00   [14] 2530 	ld	iy,#_pkeys
   0C41 FD 34 00      [23] 2531 	inc	0 (iy)
                           2532 ;mainloop/hotspots.h:153: rda = SFX_OBJECT;
   0C44 FD 21r18r00   [14] 2533 	ld	iy,#_rda
   0C48 FD 36 00 02   [19] 2534 	ld	0 (iy),#0x02
                           2535 ;mainloop/hotspots.h:154: break;
   0C4C 18 0F         [12] 2536 	jr	00122$
                           2537 ;mainloop/hotspots.h:156: case HOTSPOT_TYPE_REFILL:
   0C4E                    2538 00121$:
                           2539 ;mainloop/hotspots.h:157: plife += PLAYER_REFILL;
   0C4E FD 21r6Fr00   [14] 2540 	ld	iy,#_plife
   0C52 FD 34 00      [23] 2541 	inc	0 (iy)
                           2542 ;mainloop/hotspots.h:161: rda = SFX_USE;
   0C55 FD 21r18r00   [14] 2543 	ld	iy,#_rda
   0C59 FD 36 00 03   [19] 2544 	ld	0 (iy),#0x03
                           2545 ;mainloop/hotspots.h:191: }
   0C5D                    2546 00122$:
                           2547 ;mainloop/hotspots.h:192: if (rda) {
   0C5D 3Ar18r00      [13] 2548 	ld	a,(#_rda + 0)
   0C60 B7            [ 4] 2549 	or	a, a
   0C61 28 13         [12] 2550 	jr	Z,00131$
                           2551 ;mainloop/hotspots.h:194: hrt = 0;
   0C63 21r7Cr00      [10] 2552 	ld	hl,#_hrt + 0
   0C66 36 00         [10] 2553 	ld	(hl), #0x00
                           2554 ;mainloop/hotspots.h:195: hact [n_pant] = 0;
   0C68 3ErCC         [ 7] 2555 	ld	a,#<(_hact)
   0C6A 21rBAr01      [10] 2556 	ld	hl,#_n_pant
   0C6D 86            [ 7] 2557 	add	a, (hl)
   0C6E 5F            [ 4] 2558 	ld	e,a
   0C6F 3Es01         [ 7] 2559 	ld	a,#>(_hact)
   0C71 CE 00         [ 7] 2560 	adc	a, #0x00
   0C73 57            [ 4] 2561 	ld	d,a
   0C74 AF            [ 4] 2562 	xor	a, a
   0C75 12            [ 7] 2563 	ld	(de),a
   0C76                    2564 00131$:
                           2565 ;mainloop.h:381: if (!warp_to_level) {
   0C76 3ArC1r01      [13] 2566 	ld	a,(#_warp_to_level + 0)
   0C79 B7            [ 4] 2567 	or	a, a
   0C7A 20 03         [12] 2568 	jr	NZ,00133$
                           2569 ;mainloop.h:382: player_move ();
   0C7C CDr00r00      [17] 2570 	call	_player_move
   0C7F                    2571 00133$:
                           2572 ;my/extra_checks.h:14: if (c_max_enems == pkilled) {
   0C7F 3ArB9r01      [13] 2573 	ld	a,(#_c_max_enems + 0)
   0C82 FD 21r73r00   [14] 2574 	ld	iy,#_pkilled
   0C86 FD 96 00      [19] 2575 	sub	a, 0 (iy)
   0C89 20 17         [12] 2576 	jr	NZ,00139$
                           2577 ;my/extra_checks.h:16: en_cttouched [0] == 0 &&
   0C8B 3Ar1Dr02      [13] 2578 	ld	a, (#_en_cttouched + 0)
   0C8E B7            [ 4] 2579 	or	a, a
   0C8F 20 11         [12] 2580 	jr	NZ,00139$
                           2581 ;my/extra_checks.h:17: en_cttouched [1] == 0 &&
   0C91 3Ar1Er02      [13] 2582 	ld	a, (#_en_cttouched + 1)
   0C94 B7            [ 4] 2583 	or	a, a
   0C95 20 0B         [12] 2584 	jr	NZ,00139$
                           2585 ;my/extra_checks.h:18: en_cttouched [2] == 0
   0C97 3Ar1Fr02      [13] 2586 	ld	a, (#_en_cttouched + 2)
   0C9A B7            [ 4] 2587 	or	a, a
   0C9B 20 05         [12] 2588 	jr	NZ,00139$
                           2589 ;my/extra_checks.h:19: ) win_level = 1;
   0C9D 21rBFr01      [10] 2590 	ld	hl,#_win_level + 0
   0CA0 36 01         [10] 2591 	ld	(hl), #0x01
   0CA2                    2592 00139$:
                           2593 ;mainloop/win_level_condition.h:10: win_level
   0CA2 3ArBFr01      [13] 2594 	ld	a,(#_win_level + 0)
   0CA5 B7            [ 4] 2595 	or	a, a
   0CA6 28 0E         [12] 2596 	jr	Z,00141$
                           2597 ;mainloop/win_level_condition.h:23: PSGStop ();
   0CA8 CDr00r00      [17] 2598 	call	_PSGStop
                           2599 ;mainloop/win_level_condition.h:24: delay (50);
   0CAB 3E 32         [ 7] 2600 	ld	a,#0x32
   0CAD F5            [11] 2601 	push	af
   0CAE 33            [ 6] 2602 	inc	sp
   0CAF CDr00r00      [17] 2603 	call	_delay
   0CB2 33            [ 6] 2604 	inc	sp
                           2605 ;mainloop/win_level_condition.h:25: break;
   0CB3 C3r70r0D      [10] 2606 	jp	00168$
   0CB6                    2607 00141$:
                           2608 ;mainloop.h:419: cur_stp = SG_getStp (); 
   0CB6 CDr00r00      [17] 2609 	call	_SG_getStp
   0CB9 22r27r00      [16] 2610 	ld	(_cur_stp),hl
                           2611 ;mainloop.h:420: if (!warp_to_level)	player_render ();
   0CBC 3ArC1r01      [13] 2612 	ld	a,(#_warp_to_level + 0)
   0CBF B7            [ 4] 2613 	or	a, a
   0CC0 20 03         [12] 2614 	jr	NZ,00143$
   0CC2 CDr00r00      [17] 2615 	call	_player_render
   0CC5                    2616 00143$:
                           2617 ;mainloop.h:424: enems_move ();
   0CC5 CDr00r00      [17] 2618 	call	_enems_move
                           2619 ;mainloop.h:428: if (warp_to_level) {
   0CC8 3ArC1r01      [13] 2620 	ld	a,(#_warp_to_level + 0)
   0CCB B7            [ 4] 2621 	or	a, a
   0CCC 28 09         [12] 2622 	jr	Z,00145$
                           2623 ;mainloop.h:429: update_cycle (); PSGStop (); break;
   0CCE CDr00r00      [17] 2624 	call	_update_cycle
   0CD1 CDr00r00      [17] 2625 	call	_PSGStop
   0CD4 C3r70r0D      [10] 2626 	jp	00168$
   0CD7                    2627 00145$:
                           2628 ;mainloop/resonators.h:5: if (res_on) {
   0CD7 3ArB1r02      [13] 2629 	ld	a,(#_res_on + 0)
   0CDA B7            [ 4] 2630 	or	a, a
   0CDB 28 40         [12] 2631 	jr	Z,00153$
                           2632 ;mainloop/resonators.h:7: gp_addr = ((RESONATOR_COUNTER_Y << 5) | RESONATOR_COUNTER_X) + PNTADDRESS;
   0CDD 21 3D 18      [10] 2633 	ld	hl,#0x183D
   0CE0 22r12r00      [16] 2634 	ld	(_gp_addr),hl
                           2635 ;mainloop/resonators.h:8: _n = 16 + res_ct; 
   0CE3 21r02r00      [10] 2636 	ld	hl,#__n
   0CE6 3ArB2r02      [13] 2637 	ld	a,(#_res_ct + 0)
   0CE9 C6 10         [ 7] 2638 	add	a, #0x10
   0CEB 77            [ 7] 2639 	ld	(hl),a
                           2640 ;mainloop/resonators.h:9: ul_putc ();
   0CEC CDr00r00      [17] 2641 	call	_ul_putc
                           2642 ;mainloop/resonators.h:12: if (res_subct) -- res_subct; else {
   0CEF 3ArB3r02      [13] 2643 	ld	a,(#_res_subct + 0)
   0CF2 B7            [ 4] 2644 	or	a, a
   0CF3 28 09         [12] 2645 	jr	Z,00150$
   0CF5 FD 21rB3r02   [14] 2646 	ld	iy,#_res_subct
   0CF9 FD 35 00      [23] 2647 	dec	0 (iy)
   0CFC 18 1F         [12] 2648 	jr	00153$
   0CFE                    2649 00150$:
                           2650 ;mainloop/resonators.h:13: res_subct = 50;
   0CFE FD 21rB3r02   [14] 2651 	ld	iy,#_res_subct
   0D02 FD 36 00 32   [19] 2652 	ld	0 (iy),#0x32
                           2653 ;mainloop/resonators.h:14: if (res_ct) { 
   0D06 3ArB2r02      [13] 2654 	ld	a,(#_res_ct + 0)
   0D09 B7            [ 4] 2655 	or	a, a
   0D0A 28 09         [12] 2656 	jr	Z,00147$
                           2657 ;mainloop/resonators.h:15: -- res_ct; 
   0D0C FD 21rB2r02   [14] 2658 	ld	iy,#_res_ct
   0D10 FD 35 00      [23] 2659 	dec	0 (iy)
   0D13 18 08         [12] 2660 	jr	00153$
   0D15                    2661 00147$:
                           2662 ;mainloop/resonators.h:18: res_on = 0;
   0D15 FD 21rB1r02   [14] 2663 	ld	iy,#_res_on
   0D19 FD 36 00 00   [19] 2664 	ld	0 (iy),#0x00
   0D1D                    2665 00153$:
                           2666 ;mainloop.h:440: if (hrt) hotspots_paint ();
   0D1D 3Ar7Cr00      [13] 2667 	ld	a,(#_hrt + 0)
   0D20 B7            [ 4] 2668 	or	a, a
   0D21 28 03         [12] 2669 	jr	Z,00155$
   0D23 CDr35r02      [17] 2670 	call	_hotspots_paint
   0D26                    2671 00155$:
                           2672 ;mainloop/no.h:5: if (no_ct) {
   0D26 3ArCAr01      [13] 2673 	ld	a,(#_no_ct + 0)
   0D29 B7            [ 4] 2674 	or	a, a
   0D2A 28 1D         [12] 2675 	jr	Z,00157$
                           2676 ;mainloop/no.h:6: -- no_ct;
   0D2C FD 21rCAr01   [14] 2677 	ld	iy,#_no_ct
   0D30 FD 35 00      [23] 2678 	dec	0 (iy)
                           2679 ;mainloop/no.h:9: NO_METASPRITE
   0D33 11r00r00      [10] 2680 	ld	de,#_ss_it_06
                           2681 ;mainloop/no.h:8: prx + NO_OFFS_X, pry + NO_OFFS_Y + SPRITE_ADJUST,
   0D36 3Ar53r00      [13] 2682 	ld	a,(#_pry + 0)
   0D39 C6 E3         [ 7] 2683 	add	a, #0xE3
   0D3B 67            [ 4] 2684 	ld	h,a
   0D3C D5            [11] 2685 	push	de
   0D3D E5            [11] 2686 	push	hl
   0D3E 33            [ 6] 2687 	inc	sp
   0D3F 3Ar52r00      [13] 2688 	ld	a,(_prx)
   0D42 F5            [11] 2689 	push	af
   0D43 33            [ 6] 2690 	inc	sp
   0D44 CDr00r00      [17] 2691 	call	_SG_addMetaSprite1x1
   0D47 F1            [10] 2692 	pop	af
   0D48 F1            [10] 2693 	pop	af
   0D49                    2694 00157$:
                           2695 ;mainloop.h:469: chac_chacs_do ();
   0D49 CDr00r00      [17] 2696 	call	_chac_chacs_do
   0D4C                    2697 00159$:
                           2698 ;mainloop/cheat.h:5: if ((pad0 & (PAD_B|PAD_SELECT|PAD_UP)) == (PAD_B|PAD_SELECT|PAD_UP)) break;
   0D4C 3Ar04r00      [13] 2699 	ld	a,(#_pad0 + 0)
   0D4F E6 31         [ 7] 2700 	and	a, #0x31
   0D51 2E 00         [ 7] 2701 	ld	l, #0x00
   0D53 D6 31         [ 7] 2702 	sub	a,#0x31
   0D55 20 03         [12] 2703 	jr	NZ,00314$
   0D57 B5            [ 4] 2704 	or	a,l
   0D58 28 16         [12] 2705 	jr	Z,00168$
   0D5A                    2706 00314$:
   0D5A CDr00r00      [17] 2707 	call	_SG_queryPauseRequested
   0D5D CB 45         [ 8] 2708 	bit	0,l
   0D5F CArFAr0A      [10] 2709 	jp	Z,00167$
                           2710 ;mainloop/pause.h:6: SG_resetPauseRequest ();
   0D62 CDr00r00      [17] 2711 	call	_SG_resetPauseRequest
                           2712 ;mainloop/pause.h:7: paused ^= 1;
   0D65 3ArBEr01      [13] 2713 	ld	a,(#_paused + 0)
   0D68 EE 01         [ 7] 2714 	xor	a, #0x01
   0D6A 32rBEr01      [13] 2715 	ld	(#_paused + 0),a
   0D6D C3rFAr0A      [10] 2716 	jp	00167$
   0D70                    2717 00168$:
                           2718 ;mainloop.h:484: PSGStop ();
   0D70 CDr00r00      [17] 2719 	call	_PSGStop
                           2720 ;mainloop.h:485: PSGSFXStop ();
   0D73 CDr00r00      [17] 2721 	call	_PSGSFXStop
                           2722 ;mainloop.h:486: SG_displayOff ();
   0D76 21 40 01      [10] 2723 	ld	hl,#0x0140
   0D79 E5            [11] 2724 	push	hl
   0D7A CDr00r00      [17] 2725 	call	_SG_VDPturnOffFeature
   0D7D F1            [10] 2726 	pop	af
                           2727 ;mainloop.h:487: SG_initSprites ();
   0D7E CDr00r00      [17] 2728 	call	_SG_initSprites
                           2729 ;mainloop.h:488: SG_copySpritestoSAT ();	
   0D81 C3r00r00      [10] 2730 	jp  _SG_copySpritestoSAT
                           2731 ;game.c:109: void main(void) {
                           2732 ;	---------------------------------
                           2733 ; Function main
                           2734 ; ---------------------------------
   0D84                    2735 _main::
                           2736 ;game.c:110: SG_displayOff ();
   0D84 21 40 01      [10] 2737 	ld	hl,#0x0140
   0D87 E5            [11] 2738 	push	hl
   0D88 CDr00r00      [17] 2739 	call	_SG_VDPturnOffFeature
                           2740 ;game.c:111: SG_setSpriteMode (SG_SPRITEMODE_LARGE);
   0D8B 26 01         [ 7] 2741 	ld	h,#0x01
   0D8D E3            [19] 2742 	ex	(sp),hl
   0D8E 33            [ 6] 2743 	inc	sp
   0D8F CDr00r00      [17] 2744 	call	_SG_setSpriteMode
   0D92 33            [ 6] 2745 	inc	sp
                           2746 ;game.c:112: SG_setUpdateList (update_list);
   0D93 21r95r00      [10] 2747 	ld	hl,#_update_list+0
   0D96 E5            [11] 2748 	push	hl
   0D97 CDr00r00      [17] 2749 	call	_SG_setUpdateList
   0D9A F1            [10] 2750 	pop	af
                           2751 ;game.c:113: first_game = 1;
   0D9B 21rB7r01      [10] 2752 	ld	hl,#_first_game + 0
   0D9E 36 01         [10] 2753 	ld	(hl), #0x01
                           2754 ;game.c:116: ntsc = !!(SMS_VDPType () & VDP_NTSC);
   0DA0 CDr00r00      [17] 2755 	call	_SMS_VDPType
   0DA3 CB 75         [ 8] 2756 	bit	6, l
   0DA5 28 04         [12] 2757 	jr	Z,00114$
   0DA7 3E 01         [ 7] 2758 	ld	a,#0x01
   0DA9 18 02         [12] 2759 	jr	00115$
   0DAB                    2760 00114$:
   0DAB 3E 00         [ 7] 2761 	ld	a,#0x00
   0DAD                    2762 00115$:
   0DAD 32r92r00      [13] 2763 	ld	(#_ntsc + 0),a
                           2764 ;game.c:119: unpack_bg_patterns (tsfont_patterns_c, tsfont_colours_c, 0, 7);
   0DB0 11r00r00      [10] 2765 	ld	de,#_tsfont_colours_c+0
   0DB3 01r00r00      [10] 2766 	ld	bc,#_tsfont_patterns_c+0
   0DB6 3E 07         [ 7] 2767 	ld	a,#0x07
   0DB8 F5            [11] 2768 	push	af
   0DB9 33            [ 6] 2769 	inc	sp
   0DBA 21 00 00      [10] 2770 	ld	hl,#0x0000
   0DBD E5            [11] 2771 	push	hl
   0DBE D5            [11] 2772 	push	de
   0DBF C5            [11] 2773 	push	bc
   0DC0 CDr00r00      [17] 2774 	call	_unpack_bg_patterns
   0DC3 21 07 00      [10] 2775 	ld	hl,#7
   0DC6 39            [11] 2776 	add	hl,sp
   0DC7 F9            [ 6] 2777 	ld	sp,hl
                           2778 ;game.c:121: credits ();
   0DC8 CDrE1r05      [17] 2779 	call	_credits
                           2780 ;game.c:124: aPLib_depack_VRAM (SGT_BASE, ss_fixed_patterns_c);
   0DCB 21r00r00      [10] 2781 	ld	hl,#_ss_fixed_patterns_c+0
   0DCE E5            [11] 2782 	push	hl
   0DCF 21 00 38      [10] 2783 	ld	hl,#0x3800
   0DD2 E5            [11] 2784 	push	hl
   0DD3 CDr00r00      [17] 2785 	call	_aPLib_depack_VRAM
   0DD6 F1            [10] 2786 	pop	af
   0DD7 F1            [10] 2787 	pop	af
                           2788 ;game.c:126: mode_no_resonators = 0;
   0DD8 21rB7r02      [10] 2789 	ld	hl,#_mode_no_resonators + 0
   0DDB 36 00         [10] 2790 	ld	(hl), #0x00
                           2791 ;game.c:127: while (1) {	
   0DDD                    2792 00110$:
                           2793 ;game.c:128: title ();
   0DDD CDr8Fr03      [17] 2794 	call	_title
                           2795 ;game.c:130: level = 0;
   0DE0 21rB8r01      [10] 2796 	ld	hl,#_level + 0
   0DE3 36 00         [10] 2797 	ld	(hl), #0x00
                           2798 ;game.c:131: plife = PLAYER_LIFE;
   0DE5 21r6Fr00      [10] 2799 	ld	hl,#_plife + 0
   0DE8 36 05         [10] 2800 	ld	(hl), #0x05
                           2801 ;game.c:135: while (1) {
   0DEA                    2802 00107$:
                           2803 ;game.c:136: pres (scr_level);
   0DEA 21r72r05      [10] 2804 	ld	hl,#_scr_level
   0DED E5            [11] 2805 	push	hl
   0DEE CDr75r03      [17] 2806 	call	_pres
   0DF1 F1            [10] 2807 	pop	af
                           2808 ;game.c:137: game_init (); 
   0DF2 CDrD2r07      [17] 2809 	call	_game_init
                           2810 ;game.c:138: game_loop ();
   0DF5 CDrC4r0A      [17] 2811 	call	_game_loop
                           2812 ;game.c:140: if (game_over) {
   0DF8 3ArC0r01      [13] 2813 	ld	a,(#_game_over + 0)
   0DFB B7            [ 4] 2814 	or	a, a
   0DFC 28 0A         [12] 2815 	jr	Z,00104$
                           2816 ;game.c:141: pres (scr_game_over);
   0DFE 21rA9r04      [10] 2817 	ld	hl,#_scr_game_over
   0E01 E5            [11] 2818 	push	hl
   0E02 CDr75r03      [17] 2819 	call	_pres
   0E05 F1            [10] 2820 	pop	af
                           2821 ;game.c:142: break;
   0E06 18 13         [12] 2822 	jr	00108$
   0E08                    2823 00104$:
                           2824 ;game.c:144: level ++;
   0E08 21rB8r01      [10] 2825 	ld	hl, #_level+0
   0E0B 34            [11] 2826 	inc	(hl)
                           2827 ;game.c:145: if (level == MAX_LEVELS) {
   0E0C 3ArB8r01      [13] 2828 	ld	a,(#_level + 0)
   0E0F D6 03         [ 7] 2829 	sub	a, #0x03
   0E11 20 D7         [12] 2830 	jr	NZ,00107$
                           2831 ;game.c:146: pres (scr_the_end);
   0E13 21rC7r04      [10] 2832 	ld	hl,#_scr_the_end
   0E16 E5            [11] 2833 	push	hl
   0E17 CDr75r03      [17] 2834 	call	_pres
   0E1A F1            [10] 2835 	pop	af
                           2836 ;game.c:147: break;
   0E1B                    2837 00108$:
                           2838 ;game.c:152: first_game = 0;
   0E1B 21rB7r01      [10] 2839 	ld	hl,#_first_game + 0
   0E1E 36 00         [10] 2840 	ld	(hl), #0x00
   0E20 18 BB         [12] 2841 	jr	00110$
                           2842 	.area _CODE
                           2843 	.area _INITIALIZER
                           2844 	.area _CABS (ABS)
