                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.2 #9293 (MINGW32)
                              4 ; This file was generated Wed Oct 31 22:58:46 2018
                              5 ;--------------------------------------------------------
                              6 	.module unpacker
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _unpack_bg_patterns
                             13 	.globl _aPLib_depack_VRAM
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                     00BF    17 _VDPControlPort	=	0x00bf
                     00BF    18 _VDPStatusPort	=	0x00bf
                     00BE    19 _VDPDataPort	=	0x00be
                     007E    20 _VDPVCounterPort	=	0x007e
                     007F    21 _VDPHCounterPort	=	0x007f
                     00DC    22 _IOPortL	=	0x00dc
                     00DD    23 _IOPortH	=	0x00dd
                             24 ;--------------------------------------------------------
                             25 ; ram data
                             26 ;--------------------------------------------------------
                             27 	.area _DATA
                             28 ;--------------------------------------------------------
                             29 ; ram data
                             30 ;--------------------------------------------------------
                             31 	.area _INITIALIZED
                             32 ;--------------------------------------------------------
                             33 ; absolute external ram data
                             34 ;--------------------------------------------------------
                             35 	.area _DABS (ABS)
                             36 ;--------------------------------------------------------
                             37 ; global & static initialisations
                             38 ;--------------------------------------------------------
                             39 	.area _HOME
                             40 	.area _GSINIT
                             41 	.area _GSFINAL
                             42 	.area _GSINIT
                             43 ;--------------------------------------------------------
                             44 ; Home
                             45 ;--------------------------------------------------------
                             46 	.area _HOME
                             47 	.area _HOME
                             48 ;--------------------------------------------------------
                             49 ; code
                             50 ;--------------------------------------------------------
                             51 	.area _CODE
                             52 ;utils/unpacker.c:10: void unpack_bg_patterns (const unsigned char *c_pgt, const unsigned char *c_cgt, unsigned int byte_offset, unsigned char banks_flag) {
                             53 ;	---------------------------------
                             54 ; Function unpack_bg_patterns
                             55 ; ---------------------------------
   0000                      56 _unpack_bg_patterns::
   0000 DD E5         [15]   57 	push	ix
   0002 DD 21 00 00   [14]   58 	ld	ix,#0
   0006 DD 39         [15]   59 	add	ix,sp
                             60 ;utils/unpacker.c:12: aPLib_depack_VRAM (PGT_BASE + PATTERN_DATA_BANK_A + byte_offset, c_pgt);
   0008 DD 6E 04      [19]   61 	ld	l,4 (ix)
   000B DD 66 05      [19]   62 	ld	h,5 (ix)
                             63 ;utils/unpacker.c:13: aPLib_depack_VRAM (CGT_BASE + PATTERN_DATA_BANK_A + byte_offset, c_cgt);
   000E DD 5E 06      [19]   64 	ld	e,6 (ix)
   0011 DD 56 07      [19]   65 	ld	d,7 (ix)
                             66 ;utils/unpacker.c:11: if (banks_flag & 1) {
   0014 DD CB 0A 46   [20]   67 	bit	0, 10 (ix)
   0018 28 28         [12]   68 	jr	Z,00102$
                             69 ;utils/unpacker.c:12: aPLib_depack_VRAM (PGT_BASE + PATTERN_DATA_BANK_A + byte_offset, c_pgt);
   001A E5            [11]   70 	push	hl
   001B D5            [11]   71 	push	de
   001C E5            [11]   72 	push	hl
   001D DD 4E 08      [19]   73 	ld	c,8 (ix)
   0020 DD 46 09      [19]   74 	ld	b,9 (ix)
   0023 C5            [11]   75 	push	bc
   0024 CDr00r00      [17]   76 	call	_aPLib_depack_VRAM
   0027 F1            [10]   77 	pop	af
   0028 F1            [10]   78 	pop	af
   0029 D1            [10]   79 	pop	de
   002A E1            [10]   80 	pop	hl
                             81 ;utils/unpacker.c:13: aPLib_depack_VRAM (CGT_BASE + PATTERN_DATA_BANK_A + byte_offset, c_cgt);
   002B DD 7E 08      [19]   82 	ld	a,8 (ix)
   002E C6 00         [ 7]   83 	add	a, #0x00
   0030 4F            [ 4]   84 	ld	c,a
   0031 DD 7E 09      [19]   85 	ld	a,9 (ix)
   0034 CE 20         [ 7]   86 	adc	a, #0x20
   0036 47            [ 4]   87 	ld	b,a
   0037 E5            [11]   88 	push	hl
   0038 D5            [11]   89 	push	de
   0039 D5            [11]   90 	push	de
   003A C5            [11]   91 	push	bc
   003B CDr00r00      [17]   92 	call	_aPLib_depack_VRAM
   003E F1            [10]   93 	pop	af
   003F F1            [10]   94 	pop	af
   0040 D1            [10]   95 	pop	de
   0041 E1            [10]   96 	pop	hl
   0042                      97 00102$:
                             98 ;utils/unpacker.c:15: if (banks_flag & 2) {
   0042 DD CB 0A 4E   [20]   99 	bit	1, 10 (ix)
   0046 28 2E         [12]  100 	jr	Z,00104$
                            101 ;utils/unpacker.c:16: aPLib_depack_VRAM (PGT_BASE + PATTERN_DATA_BANK_B + byte_offset, c_pgt);
   0048 DD 7E 08      [19]  102 	ld	a,8 (ix)
   004B C6 00         [ 7]  103 	add	a, #0x00
   004D 4F            [ 4]  104 	ld	c,a
   004E DD 7E 09      [19]  105 	ld	a,9 (ix)
   0051 CE 08         [ 7]  106 	adc	a, #0x08
   0053 47            [ 4]  107 	ld	b,a
   0054 E5            [11]  108 	push	hl
   0055 D5            [11]  109 	push	de
   0056 E5            [11]  110 	push	hl
   0057 C5            [11]  111 	push	bc
   0058 CDr00r00      [17]  112 	call	_aPLib_depack_VRAM
   005B F1            [10]  113 	pop	af
   005C F1            [10]  114 	pop	af
   005D D1            [10]  115 	pop	de
   005E E1            [10]  116 	pop	hl
                            117 ;utils/unpacker.c:17: aPLib_depack_VRAM (CGT_BASE + PATTERN_DATA_BANK_B + byte_offset, c_cgt);
   005F DD 7E 08      [19]  118 	ld	a,8 (ix)
   0062 C6 00         [ 7]  119 	add	a, #0x00
   0064 4F            [ 4]  120 	ld	c,a
   0065 DD 7E 09      [19]  121 	ld	a,9 (ix)
   0068 CE 28         [ 7]  122 	adc	a, #0x28
   006A 47            [ 4]  123 	ld	b,a
   006B E5            [11]  124 	push	hl
   006C D5            [11]  125 	push	de
   006D D5            [11]  126 	push	de
   006E C5            [11]  127 	push	bc
   006F CDr00r00      [17]  128 	call	_aPLib_depack_VRAM
   0072 F1            [10]  129 	pop	af
   0073 F1            [10]  130 	pop	af
   0074 D1            [10]  131 	pop	de
   0075 E1            [10]  132 	pop	hl
   0076                     133 00104$:
                            134 ;utils/unpacker.c:19: if (banks_flag & 4) {
   0076 DD CB 0A 56   [20]  135 	bit	2, 10 (ix)
   007A 28 28         [12]  136 	jr	Z,00107$
                            137 ;utils/unpacker.c:20: aPLib_depack_VRAM (CGT_BASE + PATTERN_DATA_BANK_C + byte_offset, c_cgt);
   007C DD 7E 08      [19]  138 	ld	a,8 (ix)
   007F C6 00         [ 7]  139 	add	a, #0x00
   0081 4F            [ 4]  140 	ld	c,a
   0082 DD 7E 09      [19]  141 	ld	a,9 (ix)
   0085 CE 30         [ 7]  142 	adc	a, #0x30
   0087 47            [ 4]  143 	ld	b,a
   0088 E5            [11]  144 	push	hl
   0089 D5            [11]  145 	push	de
   008A C5            [11]  146 	push	bc
   008B CDr00r00      [17]  147 	call	_aPLib_depack_VRAM
   008E F1            [10]  148 	pop	af
   008F F1            [10]  149 	pop	af
   0090 E1            [10]  150 	pop	hl
                            151 ;utils/unpacker.c:21: aPLib_depack_VRAM (PGT_BASE + PATTERN_DATA_BANK_C + byte_offset, c_pgt);
   0091 DD 7E 08      [19]  152 	ld	a,8 (ix)
   0094 C6 00         [ 7]  153 	add	a, #0x00
   0096 5F            [ 4]  154 	ld	e,a
   0097 DD 7E 09      [19]  155 	ld	a,9 (ix)
   009A CE 10         [ 7]  156 	adc	a, #0x10
   009C 57            [ 4]  157 	ld	d,a
   009D E5            [11]  158 	push	hl
   009E D5            [11]  159 	push	de
   009F CDr00r00      [17]  160 	call	_aPLib_depack_VRAM
   00A2 F1            [10]  161 	pop	af
   00A3 F1            [10]  162 	pop	af
   00A4                     163 00107$:
   00A4 DD E1         [14]  164 	pop	ix
   00A6 C9            [10]  165 	ret
                            166 	.area _CODE
                            167 	.area _INITIALIZER
                            168 	.area _CABS (ABS)
