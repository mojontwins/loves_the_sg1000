                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.2 #9293 (MINGW32)
                              4 ; This file was generated Tue Nov 13 17:35:19 2018
                              5 ;--------------------------------------------------------
                              6 	.module game
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _game_loop
                             14 	.globl _prepare_scr
                             15 	.globl _game_init
                             16 	.globl _player_frame_selector
                             17 	.globl _flickscreen_do_vertical
                             18 	.globl _flickscreen_do_horizontal
                             19 	.globl _credits
                             20 	.globl _scr_the_end
                             21 	.globl _scr_game_over
                             22 	.globl _title
                             23 	.globl _logo
                             24 	.globl _snip
                             25 	.globl _pres
                             26 	.globl _bat_out
                             27 	.globl _bat_in
                             28 	.globl _hud_update
                             29 	.globl _draw_game_frame
                             30 	.globl _enems_move
                             31 	.globl _enems_load
                             32 	.globl _enems_persistent_update
                             33 	.globl _enems_persistent_load
                             34 	.globl _player_move
                             35 	.globl _player_kill
                             36 	.globl _player_to_pixels
                             37 	.globl _player_render
                             38 	.globl _player_init
                             39 	.globl _chac_chacs_do
                             40 	.globl _hotspots_create
                             41 	.globl _hotspots_paint
                             42 	.globl _hotspots_load
                             43 	.globl _update_cycle
                             44 	.globl _pad_read
                             45 	.globl _collide_in
                             46 	.globl _pr_str
                             47 	.globl _draw_scr
                             48 	.globl _p_t
                             49 	.globl _cls
                             50 	.globl _clear_update_list
                             51 	.globl _unrle
                             52 	.globl _unpack_bg_patterns
                             53 	.globl _delay
                             54 	.globl _aPLib_depack_VRAM
                             55 	.globl _PSGSFXStop
                             56 	.globl _PSGSFXPlay
                             57 	.globl _PSGStop
                             58 	.globl _PSGPlay
                             59 	.globl _SG_doUpdateList
                             60 	.globl _SG_setUpdateList
                             61 	.globl _SG_copySpritestoSAT
                             62 	.globl _SG_resetPauseRequest
                             63 	.globl _SG_queryPauseRequested
                             64 	.globl _SG_getKeysStatus
                             65 	.globl _SG_getStp
                             66 	.globl _SG_addMetaSprite1x1
                             67 	.globl _SG_initSprites
                             68 	.globl _SG_waitForVBlank
                             69 	.globl _SG_setSpriteMode
                             70 	.globl _SG_VDPturnOffFeature
                             71 	.globl _SG_VDPturnOnFeature
                             72 	.globl _ol_prx
                             73 	.globl _game_puri
                             74 	.globl _shaker_ct
                             75 	.globl _chac_chacs_queue_write
                             76 	.globl _chac_chacs_queue_read
                             77 	.globl _chac_chacs_queue
                             78 	.globl _chac_chacs_ct
                             79 	.globl _chac_chacs_idlewait
                             80 	.globl _chac_chacs_state
                             81 	.globl _chac_chacs_yx
                             82 	.globl _max_chac_chacs
                             83 	.globl _en_spr_id
                             84 	.globl _en_spr_x_mod
                             85 	.globl _en_ct
                             86 	.globl _en_status
                             87 	.globl _en_life
                             88 	.globl _en_cttouched
                             89 	.globl _en_flags
                             90 	.globl _en_state
                             91 	.globl _en_facing
                             92 	.globl _en_s
                             93 	.globl _en_my
                             94 	.globl _en_mx
                             95 	.globl _en_y2
                             96 	.globl _en_x2
                             97 	.globl _en_y1
                             98 	.globl _en_x1
                             99 	.globl _en_y
                            100 	.globl _en_x
                            101 	.globl _en_t
                            102 	.globl _flags
                            103 	.globl _hact
                            104 	.globl _pctfr
                            105 	.globl _oam_index_player
                            106 	.globl _okilled
                            107 	.globl _oammo
                            108 	.globl _oobjs
                            109 	.globl _okeys
                            110 	.globl _olife
                            111 	.globl _flick_override
                            112 	.globl _level_reset
                            113 	.globl _warp_to_level
                            114 	.globl _game_over
                            115 	.globl _win_level
                            116 	.globl _paused
                            117 	.globl _frame_counter
                            118 	.globl _half_life
                            119 	.globl _on_pant
                            120 	.globl _n_pant
                            121 	.globl _c_max_enems
                            122 	.globl _level
                            123 	.globl _first_game
                            124 	.globl _map_buff
                            125 	.globl _fade_delay
                            126 	.globl _fader
                            127 	.globl _update_list
                            128 	.globl _update_index
                            129 	.globl _ntsc_frame
                            130 	.globl _ntsc
                            131 	.globl _c_max_bolts
                            132 	.globl _c_hotspots
                            133 	.globl _c_enems
                            134 	.globl _c_locks
                            135 	.globl _c_decos
                            136 	.globl _c_map
                            137 	.globl _spr_enems
                            138 	.globl _c_behs
                            139 	.globl _c_ts_tmaps
                            140 	.globl _c_map_size
                            141 	.globl _c_map_h
                            142 	.globl _c_map_w
                            143 	.globl _ft
                            144 	.globl _do_process_breakable
                            145 	.globl _hrt
                            146 	.globl _hry
                            147 	.globl _hrx
                            148 	.globl _pfiring
                            149 	.globl _pkilled
                            150 	.globl _pammo
                            151 	.globl _pobjs
                            152 	.globl _plife
                            153 	.globl _pcontinues
                            154 	.globl _pnotsafe
                            155 	.globl _pice
                            156 	.globl _pkill
                            157 	.globl _pry_old
                            158 	.globl _prx_old
                            159 	.globl _hith
                            160 	.globl _hitv
                            161 	.globl _pgtmy
                            162 	.globl _pgtmx
                            163 	.globl _phit
                            164 	.globl _pbouncing
                            165 	.globl _pflickering
                            166 	.globl _oppossee
                            167 	.globl _ppossee
                            168 	.globl _pgotten
                            169 	.globl _pctj
                            170 	.globl _pjb
                            171 	.globl _pj
                            172 	.globl _b_button
                            173 	.globl _a_button
                            174 	.globl _psprid
                            175 	.globl _pfr
                            176 	.globl _pfacing
                            177 	.globl _pcy
                            178 	.globl _pcx
                            179 	.globl _pry
                            180 	.globl _prx
                            181 	.globl _pvy
                            182 	.globl _pvx
                            183 	.globl _py
                            184 	.globl _px
                            185 	.globl _vertical_engine_type
                            186 	.globl _en_sg_2
                            187 	.globl _en_sg_1
                            188 	.globl __enf_vy
                            189 	.globl __enf_vx
                            190 	.globl __enf_y
                            191 	.globl __enf_x
                            192 	.globl __en_state
                            193 	.globl __en_facing
                            194 	.globl __en_ct
                            195 	.globl __en_my
                            196 	.globl __en_mx
                            197 	.globl __en_y2
                            198 	.globl __en_x2
                            199 	.globl __en_y1
                            200 	.globl __en_x1
                            201 	.globl __en_y
                            202 	.globl __en_x
                            203 	.globl __en_s
                            204 	.globl __en_t
                            205 	.globl _en_rmx
                            206 	.globl _pregotten
                            207 	.globl _en_is_alive
                            208 	.globl _touched
                            209 	.globl _en_spr
                            210 	.globl _en_colly
                            211 	.globl _en_collx
                            212 	.globl _en_fr
                            213 	.globl _en_offs
                            214 	.globl _en_initial
                            215 	.globl _cur_stp
                            216 	.globl _caux
                            217 	.globl _cy2
                            218 	.globl _cy1
                            219 	.globl _cx2
                            220 	.globl _cx1
                            221 	.globl _at2
                            222 	.globl _at1
                            223 	.globl _ticker
                            224 	.globl _rdct
                            225 	.globl _rds
                            226 	.globl _rdm
                            227 	.globl _rdd
                            228 	.globl _rdc
                            229 	.globl _rdb
                            230 	.globl _rda
                            231 	.globl _rdit
                            232 	.globl _rdt
                            233 	.globl _rdy
                            234 	.globl _rdx
                            235 	.globl _gp_addr
                            236 	.globl _gp_ram
                            237 	.globl _gp_tmap
                            238 	.globl _gp_gen
                            239 	.globl _rds16
                            240 	.globl _gpjt
                            241 	.globl _gpit
                            242 	.globl _pad_this_frame
                            243 	.globl _pad0
                            244 	.globl __t
                            245 	.globl __n
                            246 	.globl __y
                            247 	.globl __x
                            248 	.globl _l_music
                            249 	.globl _l_hotspots
                            250 	.globl _l_enems
                            251 	.globl _l_decos
                            252 	.globl _l_map
                            253 	.globl _l_spr_enems
                            254 	.globl _l_behs
                            255 	.globl _l_ts_tmaps
                            256 	.globl _l_player_max_enems
                            257 	.globl _l_player_max_objects
                            258 	.globl _l_map_h
                            259 	.globl _l_map_w
                            260 	.globl _l_ini_y
                            261 	.globl _l_ini_x
                            262 	.globl _l_scr_ini
                            263 	.globl _spr_hs
                            264 	.globl _spr_enems1
                            265 	.globl _spr_enems0
                            266 	.globl _spr_player
                            267 	.globl _behs2
                            268 	.globl _behs1
                            269 	.globl _behs0
                            270 	.globl _jitter
                            271 	.globl _bits
                            272 	.globl _chac_chacs_t3
                            273 	.globl _chac_chacs_t2
                            274 	.globl _chac_chacs_t1
                            275 	.globl _chac_chacs_times
                            276 	.globl _chac_chacs_initial_times
                            277 ;--------------------------------------------------------
                            278 ; special function registers
                            279 ;--------------------------------------------------------
                     00BF   280 _VDPControlPort	=	0x00bf
                     00BF   281 _VDPStatusPort	=	0x00bf
                     00BE   282 _VDPDataPort	=	0x00be
                     007E   283 _VDPVCounterPort	=	0x007e
                     007F   284 _VDPHCounterPort	=	0x007f
                     00DC   285 _IOPortL	=	0x00dc
                     00DD   286 _IOPortH	=	0x00dd
                            287 ;--------------------------------------------------------
                            288 ; ram data
                            289 ;--------------------------------------------------------
                            290 	.area _DATA
   0000                     291 __x::
   0000                     292 	.ds 1
   0001                     293 __y::
   0001                     294 	.ds 1
   0002                     295 __n::
   0002                     296 	.ds 1
   0003                     297 __t::
   0003                     298 	.ds 1
   0004                     299 _pad0::
   0004                     300 	.ds 1
   0005                     301 _pad_this_frame::
   0005                     302 	.ds 1
   0006                     303 _gpit::
   0006                     304 	.ds 1
   0007                     305 _gpjt::
   0007                     306 	.ds 1
   0008                     307 _rds16::
   0008                     308 	.ds 2
   000A                     309 _gp_gen::
   000A                     310 	.ds 2
   000C                     311 _gp_tmap::
   000C                     312 	.ds 2
   000E                     313 _gp_ram::
   000E                     314 	.ds 2
   0010                     315 _gp_addr::
   0010                     316 	.ds 2
   0012                     317 _rdx::
   0012                     318 	.ds 1
   0013                     319 _rdy::
   0013                     320 	.ds 1
   0014                     321 _rdt::
   0014                     322 	.ds 1
   0015                     323 _rdit::
   0015                     324 	.ds 1
   0016                     325 _rda::
   0016                     326 	.ds 1
   0017                     327 _rdb::
   0017                     328 	.ds 1
   0018                     329 _rdc::
   0018                     330 	.ds 1
   0019                     331 _rdd::
   0019                     332 	.ds 1
   001A                     333 _rdm::
   001A                     334 	.ds 1
   001B                     335 _rds::
   001B                     336 	.ds 1
   001C                     337 _rdct::
   001C                     338 	.ds 1
   001D                     339 _ticker::
   001D                     340 	.ds 1
   001E                     341 _at1::
   001E                     342 	.ds 1
   001F                     343 _at2::
   001F                     344 	.ds 1
   0020                     345 _cx1::
   0020                     346 	.ds 1
   0021                     347 _cx2::
   0021                     348 	.ds 1
   0022                     349 _cy1::
   0022                     350 	.ds 1
   0023                     351 _cy2::
   0023                     352 	.ds 1
   0024                     353 _caux::
   0024                     354 	.ds 1
   0025                     355 _cur_stp::
   0025                     356 	.ds 2
   0027                     357 _en_initial::
   0027                     358 	.ds 1
   0028                     359 _en_offs::
   0028                     360 	.ds 1
   0029                     361 _en_fr::
   0029                     362 	.ds 1
   002A                     363 _en_collx::
   002A                     364 	.ds 1
   002B                     365 _en_colly::
   002B                     366 	.ds 1
   002C                     367 _en_spr::
   002C                     368 	.ds 1
   002D                     369 _touched::
   002D                     370 	.ds 1
   002E                     371 _en_is_alive::
   002E                     372 	.ds 1
   002F                     373 _pregotten::
   002F                     374 	.ds 1
   0030                     375 _en_rmx::
   0030                     376 	.ds 3
   0033                     377 __en_t::
   0033                     378 	.ds 1
   0034                     379 __en_s::
   0034                     380 	.ds 1
   0035                     381 __en_x::
   0035                     382 	.ds 1
   0036                     383 __en_y::
   0036                     384 	.ds 1
   0037                     385 __en_x1::
   0037                     386 	.ds 1
   0038                     387 __en_y1::
   0038                     388 	.ds 1
   0039                     389 __en_x2::
   0039                     390 	.ds 1
   003A                     391 __en_y2::
   003A                     392 	.ds 1
   003B                     393 __en_mx::
   003B                     394 	.ds 1
   003C                     395 __en_my::
   003C                     396 	.ds 1
   003D                     397 __en_ct::
   003D                     398 	.ds 1
   003E                     399 __en_facing::
   003E                     400 	.ds 1
   003F                     401 __en_state::
   003F                     402 	.ds 1
   0040                     403 __enf_x::
   0040                     404 	.ds 2
   0042                     405 __enf_y::
   0042                     406 	.ds 2
   0044                     407 __enf_vx::
   0044                     408 	.ds 2
   0046                     409 __enf_vy::
   0046                     410 	.ds 2
   0048                     411 _en_sg_1::
   0048                     412 	.ds 1
   0049                     413 _en_sg_2::
   0049                     414 	.ds 1
   004A                     415 _vertical_engine_type::
   004A                     416 	.ds 1
   004B                     417 _px::
   004B                     418 	.ds 2
   004D                     419 _py::
   004D                     420 	.ds 2
   004F                     421 _pvx::
   004F                     422 	.ds 2
   0051                     423 _pvy::
   0051                     424 	.ds 2
   0053                     425 _prx::
   0053                     426 	.ds 1
   0054                     427 _pry::
   0054                     428 	.ds 1
   0055                     429 _pcx::
   0055                     430 	.ds 1
   0056                     431 _pcy::
   0056                     432 	.ds 1
   0057                     433 _pfacing::
   0057                     434 	.ds 1
   0058                     435 _pfr::
   0058                     436 	.ds 1
   0059                     437 _psprid::
   0059                     438 	.ds 1
   005A                     439 _a_button::
   005A                     440 	.ds 1
   005B                     441 _b_button::
   005B                     442 	.ds 1
   005C                     443 _pj::
   005C                     444 	.ds 1
   005D                     445 _pjb::
   005D                     446 	.ds 1
   005E                     447 _pctj::
   005E                     448 	.ds 1
   005F                     449 _pgotten::
   005F                     450 	.ds 1
   0060                     451 _ppossee::
   0060                     452 	.ds 1
   0061                     453 _oppossee::
   0061                     454 	.ds 1
   0062                     455 _pflickering::
   0062                     456 	.ds 1
   0063                     457 _pbouncing::
   0063                     458 	.ds 1
   0064                     459 _phit::
   0064                     460 	.ds 1
   0065                     461 _pgtmx::
   0065                     462 	.ds 2
   0067                     463 _pgtmy::
   0067                     464 	.ds 2
   0069                     465 _hitv::
   0069                     466 	.ds 1
   006A                     467 _hith::
   006A                     468 	.ds 1
   006B                     469 _prx_old::
   006B                     470 	.ds 1
   006C                     471 _pry_old::
   006C                     472 	.ds 1
   006D                     473 _pkill::
   006D                     474 	.ds 1
   006E                     475 _pice::
   006E                     476 	.ds 1
   006F                     477 _pnotsafe::
   006F                     478 	.ds 1
   0070                     479 _pcontinues::
   0070                     480 	.ds 1
   0071                     481 _plife::
   0071                     482 	.ds 1
   0072                     483 _pobjs::
   0072                     484 	.ds 1
   0073                     485 _pammo::
   0073                     486 	.ds 1
   0074                     487 _pkilled::
   0074                     488 	.ds 1
   0075                     489 _pfiring::
   0075                     490 	.ds 1
   0076                     491 _hrx::
   0076                     492 	.ds 1
   0077                     493 _hry::
   0077                     494 	.ds 1
   0078                     495 _hrt::
   0078                     496 	.ds 1
   0079                     497 _do_process_breakable::
   0079                     498 	.ds 1
   007A                     499 _ft::
   007A                     500 	.ds 1
   007B                     501 _c_map_w::
   007B                     502 	.ds 1
   007C                     503 _c_map_h::
   007C                     504 	.ds 1
   007D                     505 _c_map_size::
   007D                     506 	.ds 1
   007E                     507 _c_ts_tmaps::
   007E                     508 	.ds 2
   0080                     509 _c_behs::
   0080                     510 	.ds 2
   0082                     511 _spr_enems::
   0082                     512 	.ds 2
   0084                     513 _c_map::
   0084                     514 	.ds 2
   0086                     515 _c_decos::
   0086                     516 	.ds 1
   0087                     517 _c_locks::
   0087                     518 	.ds 2
   0089                     519 _c_enems::
   0089                     520 	.ds 2
   008B                     521 _c_hotspots::
   008B                     522 	.ds 2
   008D                     523 _c_max_bolts::
   008D                     524 	.ds 1
   008E                     525 _ntsc::
   008E                     526 	.ds 1
   008F                     527 _ntsc_frame::
   008F                     528 	.ds 1
   0090                     529 _update_index::
   0090                     530 	.ds 1
   0091                     531 _update_list::
   0091                     532 	.ds 96
   00F1                     533 _fader::
   00F1                     534 	.ds 1
   00F2                     535 _fade_delay::
   00F2                     536 	.ds 1
   00F3                     537 _map_buff::
   00F3                     538 	.ds 192
   01B3                     539 _first_game::
   01B3                     540 	.ds 1
   01B4                     541 _level::
   01B4                     542 	.ds 1
   01B5                     543 _c_max_enems::
   01B5                     544 	.ds 1
   01B6                     545 _n_pant::
   01B6                     546 	.ds 1
   01B7                     547 _on_pant::
   01B7                     548 	.ds 1
   01B8                     549 _half_life::
   01B8                     550 	.ds 1
   01B9                     551 _frame_counter::
   01B9                     552 	.ds 1
   01BA                     553 _paused::
   01BA                     554 	.ds 1
   01BB                     555 _win_level::
   01BB                     556 	.ds 1
   01BC                     557 _game_over::
   01BC                     558 	.ds 1
   01BD                     559 _warp_to_level::
   01BD                     560 	.ds 1
   01BE                     561 _level_reset::
   01BE                     562 	.ds 1
   01BF                     563 _flick_override::
   01BF                     564 	.ds 1
   01C0                     565 _olife::
   01C0                     566 	.ds 1
   01C1                     567 _okeys::
   01C1                     568 	.ds 1
   01C2                     569 _oobjs::
   01C2                     570 	.ds 1
   01C3                     571 _oammo::
   01C3                     572 	.ds 1
   01C4                     573 _okilled::
   01C4                     574 	.ds 1
   01C5                     575 _oam_index_player::
   01C5                     576 	.ds 1
   01C6                     577 _pctfr::
   01C6                     578 	.ds 1
   01C7                     579 _hact::
   01C7                     580 	.ds 35
   01EA                     581 _flags::
   01EA                     582 	.ds 16
   01FA                     583 _en_t::
   01FA                     584 	.ds 3
   01FD                     585 _en_x::
   01FD                     586 	.ds 3
   0200                     587 _en_y::
   0200                     588 	.ds 3
   0203                     589 _en_x1::
   0203                     590 	.ds 3
   0206                     591 _en_y1::
   0206                     592 	.ds 3
   0209                     593 _en_x2::
   0209                     594 	.ds 3
   020C                     595 _en_y2::
   020C                     596 	.ds 3
   020F                     597 _en_mx::
   020F                     598 	.ds 3
   0212                     599 _en_my::
   0212                     600 	.ds 3
   0215                     601 _en_s::
   0215                     602 	.ds 3
   0218                     603 _en_facing::
   0218                     604 	.ds 3
   021B                     605 _en_state::
   021B                     606 	.ds 3
   021E                     607 _en_flags::
   021E                     608 	.ds 3
   0221                     609 _en_cttouched::
   0221                     610 	.ds 3
   0224                     611 _en_life::
   0224                     612 	.ds 3
   0227                     613 _en_status::
   0227                     614 	.ds 3
   022A                     615 _en_ct::
   022A                     616 	.ds 3
   022D                     617 _en_spr_x_mod::
   022D                     618 	.ds 1
   022E                     619 _en_spr_id::
   022E                     620 	.ds 3
   0231                     621 _max_chac_chacs::
   0231                     622 	.ds 1
   0232                     623 _chac_chacs_yx::
   0232                     624 	.ds 4
   0236                     625 _chac_chacs_state::
   0236                     626 	.ds 4
   023A                     627 _chac_chacs_idlewait::
   023A                     628 	.ds 4
   023E                     629 _chac_chacs_ct::
   023E                     630 	.ds 4
   0242                     631 _chac_chacs_queue::
   0242                     632 	.ds 16
   0252                     633 _chac_chacs_queue_read::
   0252                     634 	.ds 1
   0253                     635 _chac_chacs_queue_write::
   0253                     636 	.ds 1
   0254                     637 _shaker_ct::
   0254                     638 	.ds 1
   0255                     639 _game_puri::
   0255                     640 	.ds 1
   0256                     641 _ol_prx::
   0256                     642 	.ds 1
                            643 ;--------------------------------------------------------
                            644 ; ram data
                            645 ;--------------------------------------------------------
                            646 	.area _INITIALIZED
                            647 ;--------------------------------------------------------
                            648 ; absolute external ram data
                            649 ;--------------------------------------------------------
                            650 	.area _DABS (ABS)
                            651 ;--------------------------------------------------------
                            652 ; global & static initialisations
                            653 ;--------------------------------------------------------
                            654 	.area _HOME
                            655 	.area _GSINIT
                            656 	.area _GSFINAL
                            657 	.area _GSINIT
                            658 ;--------------------------------------------------------
                            659 ; Home
                            660 ;--------------------------------------------------------
                            661 	.area _HOME
                            662 	.area _HOME
                            663 ;--------------------------------------------------------
                            664 ; code
                            665 ;--------------------------------------------------------
                            666 	.area _CODE
                            667 ;engine/hotspots.h:7: void hotspots_load (void) {
                            668 ;	---------------------------------
                            669 ; Function hotspots_load
                            670 ; ---------------------------------
   0000                     671 _hotspots_load::
                            672 ;engine/hotspots.h:9: gp_gen = (unsigned char *) c_hotspots;
   0000 2Ar8Br00      [16]  673 	ld	hl,(_c_hotspots)
   0003 22r0Ar00      [16]  674 	ld	(_gp_gen),hl
                            675 ;engine/hotspots.h:11: for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
   0006 21r06r00      [10]  676 	ld	hl,#_gpit + 0
   0009 36 00         [10]  677 	ld	(hl), #0x00
   000B 11rC7r01      [10]  678 	ld	de,#_hact+0
   000E                     679 00102$:
                            680 ;engine/hotspots.h:16: hact [gpit] = 1;
   000E 2Ar06r00      [16]  681 	ld	hl,(_gpit)
   0011 26 00         [ 7]  682 	ld	h,#0x00
   0013 19            [11]  683 	add	hl,de
   0014 36 01         [10]  684 	ld	(hl),#0x01
                            685 ;engine/hotspots.h:11: for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
   0016 21r06r00      [10]  686 	ld	hl, #_gpit+0
   0019 34            [11]  687 	inc	(hl)
   001A 3Ar06r00      [13]  688 	ld	a,(#_gpit + 0)
   001D D6 23         [ 7]  689 	sub	a, #0x23
   001F 38 ED         [12]  690 	jr	C,00102$
   0021 C9            [10]  691 	ret
   0022                     692 _chac_chacs_initial_times:
   0022 19                  693 	.db #0x19	; 25
   0023 32                  694 	.db #0x32	; 50	'2'
   0024 64                  695 	.db #0x64	; 100	'd'
   0025                     696 _chac_chacs_times:
   0025 00                  697 	.db #0x00	; 0
   0026 01                  698 	.db #0x01	; 1
   0027 01                  699 	.db #0x01	; 1
   0028 64                  700 	.db #0x64	; 100	'd'
   0029 10                  701 	.db #0x10	; 16
   002A 10                  702 	.db #0x10	; 16
   002B                     703 _chac_chacs_t1:
   002B 10                  704 	.db #0x10	; 16
   002C 11                  705 	.db #0x11	; 17
   002D 12                  706 	.db #0x12	; 18
   002E 12                  707 	.db #0x12	; 18
   002F 12                  708 	.db #0x12	; 18
   0030 11                  709 	.db #0x11	; 17
   0031                     710 _chac_chacs_t2:
   0031 00                  711 	.db #0x00	; 0
   0032 00                  712 	.db #0x00	; 0
   0033 11                  713 	.db #0x11	; 17
   0034 12                  714 	.db #0x12	; 18
   0035 11                  715 	.db #0x11	; 17
   0036 00                  716 	.db #0x00	; 0
   0037                     717 _chac_chacs_t3:
   0037 00                  718 	.db #0x00	; 0
   0038 00                  719 	.db #0x00	; 0
   0039 00                  720 	.db #0x00	; 0
   003A 11                  721 	.db #0x11	; 17
   003B 00                  722 	.db #0x00	; 0
   003C 00                  723 	.db #0x00	; 0
   003D                     724 _bits:
   003D 01                  725 	.db #0x01	; 1
   003E 02                  726 	.db #0x02	; 2
   003F 04                  727 	.db #0x04	; 4
   0040 08                  728 	.db #0x08	; 8
   0041 10                  729 	.db #0x10	; 16
   0042 20                  730 	.db #0x20	; 32
   0043 40                  731 	.db #0x40	; 64
   0044 80                  732 	.db #0x80	; 128
   0045                     733 _jitter:
   0045 00                  734 	.db #0x00	; 0
   0046 01                  735 	.db #0x01	; 1
   0047 01                  736 	.db #0x01	; 1
   0048 00                  737 	.db #0x00	; 0
   0049 00                  738 	.db #0x00	; 0
   004A 01                  739 	.db #0x01	; 1
   004B 00                  740 	.db #0x00	; 0
   004C 01                  741 	.db #0x01	; 1
   004D 01                  742 	.db #0x01	; 1
   004E 00                  743 	.db #0x00	; 0
   004F 00                  744 	.db #0x00	; 0
   0050 00                  745 	.db #0x00	; 0
   0051 01                  746 	.db #0x01	; 1
   0052 00                  747 	.db #0x00	; 0
   0053 01                  748 	.db #0x01	; 1
   0054 01                  749 	.db #0x01	; 1
   0055                     750 _behs0:
   0055 00                  751 	.db #0x00	; 0
   0056 01                  752 	.db #0x01	; 1
   0057 08                  753 	.db #0x08	; 8
   0058 08                  754 	.db #0x08	; 8
   0059 08                  755 	.db #0x08	; 8
   005A 08                  756 	.db #0x08	; 8
   005B 00                  757 	.db #0x00	; 0
   005C 00                  758 	.db #0x00	; 0
   005D 00                  759 	.db #0x00	; 0
   005E 08                  760 	.db #0x08	; 8
   005F 08                  761 	.db #0x08	; 8
   0060 08                  762 	.db #0x08	; 8
   0061 04                  763 	.db #0x04	; 4
   0062 08                  764 	.db #0x08	; 8
   0063 08                  765 	.db #0x08	; 8
   0064 00                  766 	.db #0x00	; 0
   0065                     767 _behs1:
   0065 00                  768 	.db #0x00	; 0
   0066 01                  769 	.db #0x01	; 1
   0067 08                  770 	.db #0x08	; 8
   0068 08                  771 	.db #0x08	; 8
   0069 08                  772 	.db #0x08	; 8
   006A 08                  773 	.db #0x08	; 8
   006B 00                  774 	.db #0x00	; 0
   006C 00                  775 	.db #0x00	; 0
   006D 00                  776 	.db #0x00	; 0
   006E 00                  777 	.db #0x00	; 0
   006F 00                  778 	.db #0x00	; 0
   0070 04                  779 	.db #0x04	; 4
   0071 04                  780 	.db #0x04	; 4
   0072 08                  781 	.db #0x08	; 8
   0073 08                  782 	.db #0x08	; 8
   0074 08                  783 	.db #0x08	; 8
   0075                     784 _behs2:
   0075 00                  785 	.db #0x00	; 0
   0076 01                  786 	.db #0x01	; 1
   0077 08                  787 	.db #0x08	; 8
   0078 08                  788 	.db #0x08	; 8
   0079 08                  789 	.db #0x08	; 8
   007A 08                  790 	.db #0x08	; 8
   007B 00                  791 	.db #0x00	; 0
   007C 00                  792 	.db #0x00	; 0
   007D 00                  793 	.db #0x00	; 0
   007E 08                  794 	.db #0x08	; 8
   007F 08                  795 	.db #0x08	; 8
   0080 08                  796 	.db #0x08	; 8
   0081 04                  797 	.db #0x04	; 4
   0082 08                  798 	.db #0x08	; 8
   0083 08                  799 	.db #0x08	; 8
   0084 00                  800 	.db #0x00	; 0
   0085 00                  801 	.db #0x00	; 0
   0086 01                  802 	.db #0x01	; 1
   0087 01                  803 	.db #0x01	; 1
   0088                     804 _spr_player:
   0088r00r00               805 	.dw _ss_pl_00
   008Ar00r00               806 	.dw _ss_pl_01
   008Cr00r00               807 	.dw _ss_pl_02
   008Er00r00               808 	.dw _ss_pl_01
   0090r00r00               809 	.dw _ss_pl_03
   0092r00r00               810 	.dw _ss_pl_04
   0094r00r00               811 	.dw _ss_pl_05
   0096r00r00               812 	.dw _ss_pl_06
   0098r00r00               813 	.dw _ss_pl_05
   009Ar00r00               814 	.dw _ss_pl_07
   009Cr00r00               815 	.dw _ss_pl_08
   009Er00r00               816 	.dw _ss_pl_09
   00A0r00r00               817 	.dw _ss_pl_0a
   00A2 00 00               818 	.dw #0x0000
   00A4r00r00               819 	.dw _ss_pl_0b
   00A6r00r00               820 	.dw _ss_pl_0c
   00A8r00r00               821 	.dw _ss_pl_0d
   00AAr00r00               822 	.dw _ss_pl_0e
   00AC 00 00               823 	.dw #0x0000
   00AEr00r00               824 	.dw _ss_pl_0f
   00B0                     825 _spr_enems0:
   00B0r00r00               826 	.dw _ss_en0_00
   00B2r00r00               827 	.dw _ss_en0_01
   00B4 00 00               828 	.dw #0x0000
   00B6 00 00               829 	.dw #0x0000
   00B8r00r00               830 	.dw _ss_en0_00
   00BAr00r00               831 	.dw _ss_en0_01
   00BC 00 00               832 	.dw #0x0000
   00BE 00 00               833 	.dw #0x0000
   00C0r00r00               834 	.dw _ss_en0_02
   00C2r00r00               835 	.dw _ss_en0_03
   00C4 00 00               836 	.dw #0x0000
   00C6 00 00               837 	.dw #0x0000
   00C8r00r00               838 	.dw _ss_en0_02
   00CAr00r00               839 	.dw _ss_en0_03
   00CC 00 00               840 	.dw #0x0000
   00CE 00 00               841 	.dw #0x0000
   00D0r00r00               842 	.dw _ss_en0_04
   00D2r00r00               843 	.dw _ss_en0_05
   00D4 00 00               844 	.dw #0x0000
   00D6 00 00               845 	.dw #0x0000
   00D8r00r00               846 	.dw _ss_en0_04
   00DAr00r00               847 	.dw _ss_en0_05
   00DC 00 00               848 	.dw #0x0000
   00DE 00 00               849 	.dw #0x0000
   00E0r00r00               850 	.dw _ss_plat_00
   00E2r00r00               851 	.dw _ss_plat_00
   00E4 00 00               852 	.dw #0x0000
   00E6 00 00               853 	.dw #0x0000
   00E8r00r00               854 	.dw _ss_plat_00
   00EAr00r00               855 	.dw _ss_plat_00
   00EC 00 00               856 	.dw #0x0000
   00EE 00 00               857 	.dw #0x0000
   00F0                     858 _spr_enems1:
   00F0r00r00               859 	.dw _ss_en1_00
   00F2r00r00               860 	.dw _ss_en1_01
   00F4 00 00               861 	.dw #0x0000
   00F6 00 00               862 	.dw #0x0000
   00F8r00r00               863 	.dw _ss_en1_00
   00FAr00r00               864 	.dw _ss_en1_01
   00FC 00 00               865 	.dw #0x0000
   00FE 00 00               866 	.dw #0x0000
   0100r00r00               867 	.dw _ss_en1_02
   0102r00r00               868 	.dw _ss_en1_03
   0104 00 00               869 	.dw #0x0000
   0106 00 00               870 	.dw #0x0000
   0108r00r00               871 	.dw _ss_en1_02
   010Ar00r00               872 	.dw _ss_en1_03
   010C 00 00               873 	.dw #0x0000
   010E 00 00               874 	.dw #0x0000
   0110r00r00               875 	.dw _ss_en1_04
   0112r00r00               876 	.dw _ss_en1_05
   0114 00 00               877 	.dw #0x0000
   0116 00 00               878 	.dw #0x0000
   0118r00r00               879 	.dw _ss_en1_04
   011Ar00r00               880 	.dw _ss_en1_05
   011C 00 00               881 	.dw #0x0000
   011E 00 00               882 	.dw #0x0000
   0120r00r00               883 	.dw _ss_plat_00
   0122r00r00               884 	.dw _ss_plat_00
   0124 00 00               885 	.dw #0x0000
   0126 00 00               886 	.dw #0x0000
   0128r00r00               887 	.dw _ss_plat_00
   012Ar00r00               888 	.dw _ss_plat_00
   012C 00 00               889 	.dw #0x0000
   012E 00 00               890 	.dw #0x0000
   0130                     891 _spr_hs:
   0130 00 00               892 	.dw #0x0000
   0132r00r00               893 	.dw _ss_it_00
   0134 00 00               894 	.dw #0x0000
   0136r00r00               895 	.dw _ss_it_01
   0138 00 00               896 	.dw #0x0000
   013A                     897 _l_scr_ini:
   013A 1C                  898 	.db #0x1C	; 28
   013B 1C                  899 	.db #0x1C	; 28
   013C 1C                  900 	.db #0x1C	; 28
   013D                     901 _l_ini_x:
   013D 05                  902 	.db #0x05	; 5
   013E 05                  903 	.db #0x05	; 5
   013F 05                  904 	.db #0x05	; 5
   0140                     905 _l_ini_y:
   0140 06                  906 	.db #0x06	; 6
   0141 07                  907 	.db #0x07	; 7
   0142 06                  908 	.db #0x06	; 6
   0143                     909 _l_map_w:
   0143 07                  910 	.db #0x07	; 7
   0144 07                  911 	.db #0x07	; 7
   0145 07                  912 	.db #0x07	; 7
   0146                     913 _l_map_h:
   0146 05                  914 	.db #0x05	; 5
   0147 05                  915 	.db #0x05	; 5
   0148 05                  916 	.db #0x05	; 5
   0149                     917 _l_player_max_objects:
   0149 14                  918 	.db #0x14	; 20
   014A 14                  919 	.db #0x14	; 20
   014B 14                  920 	.db #0x14	; 20
   014C                     921 _l_player_max_enems:
   014C 20                  922 	.db #0x20	; 32
   014D 22                  923 	.db #0x22	; 34
   014E 21                  924 	.db #0x21	; 33
   014F                     925 _l_ts_tmaps:
   014Fr00r00               926 	.dw _ts0_tmaps
   0151r00r00               927 	.dw _ts1_tmaps
   0153r00r00               928 	.dw _ts2_tmaps
   0155                     929 _l_behs:
   0155r55r00               930 	.dw _behs0
   0157r65r00               931 	.dw _behs1
   0159r75r00               932 	.dw _behs2
   015B                     933 _l_spr_enems:
   015BrB0r00               934 	.dw _spr_enems0
   015DrF0r00               935 	.dw _spr_enems1
   015FrF0r00               936 	.dw _spr_enems1
   0161                     937 _l_map:
   0161r00r00               938 	.dw _map_0
   0163r00r00               939 	.dw _map_1
   0165r00r00               940 	.dw _map_2
   0167                     941 _l_decos:
   0167 00                  942 	.db #0x00	; 0
   0168 00                  943 	.db #0x00	; 0
   0169 01                  944 	.db #0x01	; 1
   016A                     945 _l_enems:
   016Ar00r00               946 	.dw _enems_0
   016Cr00r00               947 	.dw _enems_1
   016Er00r00               948 	.dw _enems_2
   0170                     949 _l_hotspots:
   0170r00r00               950 	.dw _hotspots_0
   0172r00r00               951 	.dw _hotspots_1
   0174r00r00               952 	.dw _hotspots_2
   0176                     953 _l_music:
   0176r00r00               954 	.dw _m_yun_psg
   0178r00r00               955 	.dw _m_yun_psg
   017Ar00r00               956 	.dw _m_yun_psg
                            957 ;engine/hotspots.h:20: void hotspots_paint (void) {
                            958 ;	---------------------------------
                            959 ; Function hotspots_paint
                            960 ; ---------------------------------
   017C                     961 _hotspots_paint::
                            962 ;engine/hotspots.h:30: rda = hrt;
   017C 3Ar78r00      [13]  963 	ld	a,(#_hrt + 0)
   017F 32r16r00      [13]  964 	ld	(#_rda + 0),a
                            965 ;engine/hotspots.h:38: spr_hs [rda]
   0182 11r30r01      [10]  966 	ld	de,#_spr_hs+0
   0185 FD 21r16r00   [14]  967 	ld	iy,#_rda
   0189 FD 6E 00      [19]  968 	ld	l,0 (iy)
   018C 26 00         [ 7]  969 	ld	h,#0x00
   018E 29            [11]  970 	add	hl, hl
   018F 19            [11]  971 	add	hl,de
   0190 5E            [ 7]  972 	ld	e,(hl)
   0191 23            [ 6]  973 	inc	hl
   0192 56            [ 7]  974 	ld	d,(hl)
                            975 ;engine/hotspots.h:37: hrx, hry + SPRITE_ADJUST, 
   0193 3Ar77r00      [13]  976 	ld	a,(#_hry + 0)
   0196 C6 F7         [ 7]  977 	add	a, #0xF7
   0198 67            [ 4]  978 	ld	h,a
   0199 D5            [11]  979 	push	de
   019A E5            [11]  980 	push	hl
   019B 33            [ 6]  981 	inc	sp
   019C 3Ar76r00      [13]  982 	ld	a,(_hrx)
   019F F5            [11]  983 	push	af
   01A0 33            [ 6]  984 	inc	sp
   01A1 CDr00r00      [17]  985 	call	_SG_addMetaSprite1x1
   01A4 F1            [10]  986 	pop	af
   01A5 F1            [10]  987 	pop	af
   01A6 C9            [10]  988 	ret
                            989 ;engine/hotspots.h:42: void hotspots_create (void) {
                            990 ;	---------------------------------
                            991 ; Function hotspots_create
                            992 ; ---------------------------------
   01A7                     993 _hotspots_create::
                            994 ;engine/hotspots.h:54: gp_gen = (unsigned char *) (c_hotspots + (n_pant << 1));
   01A7 FD 21rB6r01   [14]  995 	ld	iy,#_n_pant
   01AB FD 6E 00      [19]  996 	ld	l,0 (iy)
   01AE 26 00         [ 7]  997 	ld	h,#0x00
   01B0 29            [11]  998 	add	hl, hl
   01B1 55            [ 4]  999 	ld	d,l
   01B2 5C            [ 4] 1000 	ld	e,h
   01B3 21r0Ar00      [10] 1001 	ld	hl,#_gp_gen
   01B6 3Ar8Br00      [13] 1002 	ld	a,(#_c_hotspots + 0)
   01B9 82            [ 4] 1003 	add	a, d
   01BA 77            [ 7] 1004 	ld	(hl),a
   01BB 3Ar8Cr00      [13] 1005 	ld	a,(#_c_hotspots + 1)
   01BE 8B            [ 4] 1006 	adc	a, e
   01BF 23            [ 6] 1007 	inc	hl
   01C0 77            [ 7] 1008 	ld	(hl),a
                           1009 ;engine/hotspots.h:55: hrt = *gp_gen ++; rda = *gp_gen; 
   01C1 2Ar0Ar00      [16] 1010 	ld	hl,(_gp_gen)
   01C4 7E            [ 7] 1011 	ld	a,(hl)
   01C5 32r78r00      [13] 1012 	ld	(#_hrt + 0),a
   01C8 21r0Ar00      [10] 1013 	ld	hl, #_gp_gen+0
   01CB 34            [11] 1014 	inc	(hl)
   01CC 20 04         [12] 1015 	jr	NZ,00115$
   01CE 21r0Br00      [10] 1016 	ld	hl, #_gp_gen+1
   01D1 34            [11] 1017 	inc	(hl)
   01D2                    1018 00115$:
   01D2 2Ar0Ar00      [16] 1019 	ld	hl,(_gp_gen)
   01D5 7E            [ 7] 1020 	ld	a,(hl)
   01D6 32r16r00      [13] 1021 	ld	(#_rda + 0),a
                           1022 ;engine/hotspots.h:56: if (hrt && hact [n_pant]) {
   01D9 3Ar78r00      [13] 1023 	ld	a,(#_hrt + 0)
   01DC B7            [ 4] 1024 	or	a, a
   01DD 28 22         [12] 1025 	jr	Z,00102$
   01DF 11rC7r01      [10] 1026 	ld	de,#_hact+0
   01E2 2ArB6r01      [16] 1027 	ld	hl,(_n_pant)
   01E5 26 00         [ 7] 1028 	ld	h,#0x00
   01E7 19            [11] 1029 	add	hl,de
   01E8 7E            [ 7] 1030 	ld	a,(hl)
   01E9 B7            [ 4] 1031 	or	a, a
   01EA 28 15         [12] 1032 	jr	Z,00102$
                           1033 ;engine/hotspots.h:57: hry = rda & 0xf0; hrx = rda << 4;
   01EC 3Ar16r00      [13] 1034 	ld	a,(#_rda + 0)
   01EF E6 F0         [ 7] 1035 	and	a, #0xF0
   01F1 32r77r00      [13] 1036 	ld	(#_hry + 0),a
   01F4 3Ar16r00      [13] 1037 	ld	a,(#_rda + 0)
   01F7 07            [ 4] 1038 	rlca
   01F8 07            [ 4] 1039 	rlca
   01F9 07            [ 4] 1040 	rlca
   01FA 07            [ 4] 1041 	rlca
   01FB E6 F0         [ 7] 1042 	and	a,#0xF0
   01FD 32r76r00      [13] 1043 	ld	(#_hrx + 0),a
   0200 C9            [10] 1044 	ret
   0201                    1045 00102$:
                           1046 ;engine/hotspots.h:58: } else hrt = 0;
   0201 21r78r00      [10] 1047 	ld	hl,#_hrt + 0
   0204 36 00         [10] 1048 	ld	(hl), #0x00
   0206 C9            [10] 1049 	ret
                           1050 ;engine/../my/game_frame.h:7: void draw_game_frame (void) {
                           1051 ;	---------------------------------
                           1052 ; Function draw_game_frame
                           1053 ; ---------------------------------
   0207                    1054 _draw_game_frame::
                           1055 ;engine/../my/game_frame.h:8: gp_gen = frame_rle; unrle ();
   0207 21r00r00      [10] 1056 	ld	hl,#_frame_rle+0
   020A 22r0Ar00      [16] 1057 	ld	(_gp_gen),hl
   020D C3r00r00      [10] 1058 	jp  _unrle
                           1059 ;engine/frame.h:9: void hud_update (void) {
                           1060 ;	---------------------------------
                           1061 ; Function hud_update
                           1062 ; ---------------------------------
   0210                    1063 _hud_update::
                           1064 ;engine/frame.h:19: if (oobjs != pobjs) {
   0210 3ArC2r01      [13] 1065 	ld	a,(#_oobjs + 0)
   0213 FD 21r72r00   [14] 1066 	ld	iy,#_pobjs
   0217 FD 96 00      [19] 1067 	sub	a, 0 (iy)
   021A 28 19         [12] 1068 	jr	Z,00102$
                           1069 ;engine/frame.h:20: oobjs = pobjs;
   021C 21r72r00      [10] 1070 	ld	hl,#_pobjs + 0
   021F 56            [ 7] 1071 	ld	d, (hl)
   0220 21rC2r01      [10] 1072 	ld	hl,#_oobjs + 0
   0223 72            [ 7] 1073 	ld	(hl), d
                           1074 ;engine/frame.h:21: _x = OBJECTS_X; _y = OBJECTS_Y; 
   0224 21r00r00      [10] 1075 	ld	hl,#__x + 0
   0227 36 05         [10] 1076 	ld	(hl), #0x05
   0229 21r01r00      [10] 1077 	ld	hl,#__y + 0
   022C 36 01         [10] 1078 	ld	(hl), #0x01
                           1079 ;engine/frame.h:25: _n = pobjs; 
   022E 21r02r00      [10] 1080 	ld	hl,#__n + 0
   0231 72            [ 7] 1081 	ld	(hl), d
                           1082 ;engine/frame.h:27: p_t ();
   0232 CDr00r00      [17] 1083 	call	_p_t
   0235                    1084 00102$:
                           1085 ;engine/frame.h:39: if (olife != plife) {
   0235 3ArC0r01      [13] 1086 	ld	a,(#_olife + 0)
   0238 FD 21r71r00   [14] 1087 	ld	iy,#_plife
   023C FD 96 00      [19] 1088 	sub	a, 0 (iy)
   023F C8            [11] 1089 	ret	Z
                           1090 ;engine/frame.h:40: olife = plife;
   0240 21r71r00      [10] 1091 	ld	hl,#_plife + 0
   0243 56            [ 7] 1092 	ld	d, (hl)
   0244 21rC0r01      [10] 1093 	ld	hl,#_olife + 0
   0247 72            [ 7] 1094 	ld	(hl), d
                           1095 ;engine/frame.h:41: _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
   0248 21r00r00      [10] 1096 	ld	hl,#__x + 0
   024B 36 19         [10] 1097 	ld	(hl), #0x19
   024D 21r01r00      [10] 1098 	ld	hl,#__y + 0
   0250 36 01         [10] 1099 	ld	(hl), #0x01
   0252 21r02r00      [10] 1100 	ld	hl,#__n + 0
   0255 72            [ 7] 1101 	ld	(hl), d
   0256 C3r00r00      [10] 1102 	jp  _p_t
                           1103 ;my/pres.h:6: void bat_in (void) {
                           1104 ;	---------------------------------
                           1105 ; Function bat_in
                           1106 ; ---------------------------------
   0259                    1107 _bat_in::
                           1108 ;my/pres.h:7: SG_displayOn ();
   0259 21 40 01      [10] 1109 	ld	hl,#0x0140
   025C E5            [11] 1110 	push	hl
   025D CDr00r00      [17] 1111 	call	_SG_VDPturnOnFeature
   0260 F1            [10] 1112 	pop	af
                           1113 ;my/pres.h:8: while (SG_getKeysStatus ());
   0261                    1114 00101$:
   0261 CDr00r00      [17] 1115 	call	_SG_getKeysStatus
   0264 7D            [ 4] 1116 	ld	a,l
   0265 B7            [ 4] 1117 	or	a, a
   0266 20 F9         [12] 1118 	jr	NZ,00101$
   0268 C9            [10] 1119 	ret
                           1120 ;my/pres.h:11: void bat_out (void) {
                           1121 ;	---------------------------------
                           1122 ; Function bat_out
                           1123 ; ---------------------------------
   0269                    1124 _bat_out::
                           1125 ;my/pres.h:12: PSGStop ();
   0269 CDr00r00      [17] 1126 	call	_PSGStop
                           1127 ;my/pres.h:13: SG_displayOff ();
   026C 21 40 01      [10] 1128 	ld	hl,#0x0140
   026F E5            [11] 1129 	push	hl
   0270 CDr00r00      [17] 1130 	call	_SG_VDPturnOffFeature
   0273 F1            [10] 1131 	pop	af
                           1132 ;my/pres.h:14: SG_initSprites ();
   0274 CDr00r00      [17] 1133 	call	_SG_initSprites
                           1134 ;my/pres.h:15: SG_copySpritestoSAT ();	
   0277 C3r00r00      [10] 1135 	jp  _SG_copySpritestoSAT
                           1136 ;my/pres.h:18: void pres (void (*func) (void), unsigned char *music) {
                           1137 ;	---------------------------------
                           1138 ; Function pres
                           1139 ; ---------------------------------
   027A                    1140 _pres::
                           1141 ;my/pres.h:19: cls ();
   027A CDr00r00      [17] 1142 	call	_cls
                           1143 ;my/pres.h:20: (*func) ();
   027D C1            [10] 1144 	pop	bc
   027E E1            [10] 1145 	pop	hl
   027F E5            [11] 1146 	push	hl
   0280 C5            [11] 1147 	push	bc
   0281 CDr00r00      [17] 1148 	call	___sdcc_call_hl
                           1149 ;my/pres.h:21: bat_in ();
   0284 CDr59r02      [17] 1150 	call	_bat_in
                           1151 ;my/pres.h:22: if (music) PSGPlay (music);
   0287 FD 21 04 00   [14] 1152 	ld	iy,#4
   028B FD 39         [15] 1153 	add	iy,sp
   028D FD 7E 01      [19] 1154 	ld	a,1 (iy)
   0290 FD B6 00      [19] 1155 	or	a,0 (iy)
   0293 28 0B         [12] 1156 	jr	Z,00106$
   0295 FD 6E 00      [19] 1157 	ld	l,0 (iy)
   0298 FD 66 01      [19] 1158 	ld	h,1 (iy)
   029B E5            [11] 1159 	push	hl
   029C CDr00r00      [17] 1160 	call	_PSGPlay
   029F F1            [10] 1161 	pop	af
                           1162 ;my/pres.h:23: while (1) {
   02A0                    1163 00106$:
                           1164 ;my/pres.h:24: pad_read ();
   02A0 CDr00r00      [17] 1165 	call	_pad_read
                           1166 ;my/pres.h:25: if (pad_this_frame & (PAD_A|PAD_B|PAD_START)) break;
   02A3 3Ar05r00      [13] 1167 	ld	a,(#_pad_this_frame + 0)
   02A6 E6 30         [ 7] 1168 	and	a, #0x30
   02A8 28 F6         [12] 1169 	jr	Z,00106$
                           1170 ;my/pres.h:27: bat_out ();
   02AA C3r69r02      [10] 1171 	jp  _bat_out
                           1172 ;my/pres.h:30: void snip (void) {
                           1173 ;	---------------------------------
                           1174 ; Function snip
                           1175 ; ---------------------------------
   02AD                    1176 _snip::
                           1177 ;my/pres.h:35: gp_addr = PNTADDRESS + (rdy << 5);
   02AD FD 21r13r00   [14] 1178 	ld	iy,#_rdy
   02B1 FD 6E 00      [19] 1179 	ld	l,0 (iy)
   02B4 26 00         [ 7] 1180 	ld	h,#0x00
   02B6 29            [11] 1181 	add	hl, hl
   02B7 29            [11] 1182 	add	hl, hl
   02B8 29            [11] 1183 	add	hl, hl
   02B9 29            [11] 1184 	add	hl, hl
   02BA 29            [11] 1185 	add	hl, hl
   02BB EB            [ 4] 1186 	ex	de,hl
   02BC 21 00 18      [10] 1187 	ld	hl,#0x1800
   02BF 19            [11] 1188 	add	hl,de
   02C0 22r10r00      [16] 1189 	ld	(_gp_addr),hl
                           1190 ;my/pres.h:36: VDPControlPort = LO (gp_addr); VDPControlPort = HI (gp_addr) | 0x40;
   02C3 3Ar10r00      [13] 1191 	ld	a,(#_gp_addr + 0)
   02C6 D3 BF         [11] 1192 	out	(_VDPControlPort),a
   02C8 3Ar11r00      [13] 1193 	ld	a,(#_gp_addr + 1)
   02CB CB F7         [ 8] 1194 	set	6, a
   02CD D3 BF         [11] 1195 	out	(_VDPControlPort),a
                           1196 ;my/pres.h:37: while (rda --) {
   02CF                    1197 00104$:
   02CF 21r16r00      [10] 1198 	ld	hl,#_rda + 0
   02D2 56            [ 7] 1199 	ld	d, (hl)
   02D3 21r16r00      [10] 1200 	ld	hl, #_rda+0
   02D6 35            [11] 1201 	dec	(hl)
   02D7 7A            [ 4] 1202 	ld	a,d
   02D8 B7            [ 4] 1203 	or	a, a
   02D9 C8            [11] 1204 	ret	Z
                           1205 ;my/pres.h:38: SG_waitForVBlank ();
   02DA CDr00r00      [17] 1206 	call	_SG_waitForVBlank
                           1207 ;my/pres.h:39: gpit = 32; while (gpit --) {
   02DD 21r06r00      [10] 1208 	ld	hl,#_gpit + 0
   02E0 36 20         [10] 1209 	ld	(hl), #0x20
   02E2                    1210 00101$:
   02E2 21r06r00      [10] 1211 	ld	hl,#_gpit + 0
   02E5 56            [ 7] 1212 	ld	d, (hl)
   02E6 21r06r00      [10] 1213 	ld	hl, #_gpit+0
   02E9 35            [11] 1214 	dec	(hl)
   02EA 7A            [ 4] 1215 	ld	a,d
   02EB B7            [ 4] 1216 	or	a, a
   02EC 28 E1         [12] 1217 	jr	Z,00104$
                           1218 ;my/pres.h:40: VDPDataPort = *gp_tmap ++;
   02EE 2Ar0Cr00      [16] 1219 	ld	hl,(_gp_tmap)
   02F1 7E            [ 7] 1220 	ld	a,(hl)
   02F2 D3 BE         [11] 1221 	out	(_VDPDataPort),a
   02F4 21r0Cr00      [10] 1222 	ld	hl, #_gp_tmap+0
   02F7 34            [11] 1223 	inc	(hl)
   02F8 20 E8         [12] 1224 	jr	NZ,00101$
   02FA 21r0Dr00      [10] 1225 	ld	hl, #_gp_tmap+1
   02FD 34            [11] 1226 	inc	(hl)
   02FE 18 E2         [12] 1227 	jr	00101$
                           1228 ;my/pres.h:45: void logo (void) {
                           1229 ;	---------------------------------
                           1230 ; Function logo
                           1231 ; ---------------------------------
   0300                    1232 _logo::
                           1233 ;my/pres.h:46: rda = 5; rdy = 3; 
   0300 21r16r00      [10] 1234 	ld	hl,#_rda + 0
   0303 36 05         [10] 1235 	ld	(hl), #0x05
   0305 21r13r00      [10] 1236 	ld	hl,#_rdy + 0
   0308 36 03         [10] 1237 	ld	(hl), #0x03
                           1238 ;my/pres.h:47: gp_tmap = game_puri ? title_cutout_puri : title_cutout_paco;
   030A 3Ar55r02      [13] 1239 	ld	a,(#_game_puri + 0)
   030D B7            [ 4] 1240 	or	a, a
   030E 28 05         [12] 1241 	jr	Z,00103$
   0310 21r00r00      [10] 1242 	ld	hl,#_title_cutout_puri+0
   0313 18 03         [12] 1243 	jr	00104$
   0315                    1244 00103$:
   0315 21r00r00      [10] 1245 	ld	hl,#_title_cutout_paco+0
   0318                    1246 00104$:
   0318 22r0Cr00      [16] 1247 	ld	(_gp_tmap),hl
                           1248 ;my/pres.h:48: snip ();
   031B C3rADr02      [10] 1249 	jp  _snip
                           1250 ;my/pres.h:51: void title (void) {	
                           1251 ;	---------------------------------
                           1252 ; Function title
                           1253 ; ---------------------------------
   031E                    1254 _title::
                           1255 ;my/pres.h:52: gp_gen = title_rle; unrle ();
   031E 21r00r00      [10] 1256 	ld	hl,#_title_rle+0
   0321 22r0Ar00      [16] 1257 	ld	(_gp_gen),hl
   0324 CDr00r00      [17] 1258 	call	_unrle
                           1259 ;my/pres.h:54: logo ();
   0327 CDr00r03      [17] 1260 	call	_logo
                           1261 ;my/pres.h:56: _x = 5; _y = 23; pr_str ("@ 2018 THE MOJON TWINS");
   032A 21r00r00      [10] 1262 	ld	hl,#__x + 0
   032D 36 05         [10] 1263 	ld	(hl), #0x05
   032F 21r01r00      [10] 1264 	ld	hl,#__y + 0
   0332 36 17         [10] 1265 	ld	(hl), #0x17
   0334 21rF2r03      [10] 1266 	ld	hl,#___str_0
   0337 E5            [11] 1267 	push	hl
   0338 CDr00r00      [17] 1268 	call	_pr_str
   033B F1            [10] 1269 	pop	af
                           1270 ;my/pres.h:58: bat_in ();
   033C CDr59r02      [17] 1271 	call	_bat_in
                           1272 ;my/pres.h:60: PSGPlay (MUSIC_TITLE);
   033F 21r00r00      [10] 1273 	ld	hl,#_m_title_psg
   0342 E5            [11] 1274 	push	hl
   0343 CDr00r00      [17] 1275 	call	_PSGPlay
   0346 F1            [10] 1276 	pop	af
                           1277 ;my/pres.h:61: while (1) {
   0347                    1278 00117$:
                           1279 ;my/pres.h:62: update_cycle ();
   0347 CDr00r00      [17] 1280 	call	_update_cycle
                           1281 ;my/pres.h:63: SG_addMetaSprite1x1 (80, 116 + (level << 4), spr_player [game_puri]);
   034A FD 21r55r02   [14] 1282 	ld	iy,#_game_puri
   034E FD 6E 00      [19] 1283 	ld	l,0 (iy)
   0351 26 00         [ 7] 1284 	ld	h,#0x00
   0353 29            [11] 1285 	add	hl, hl
   0354 11r88r00      [10] 1286 	ld	de,#_spr_player
   0357 19            [11] 1287 	add	hl,de
   0358 5E            [ 7] 1288 	ld	e,(hl)
   0359 23            [ 6] 1289 	inc	hl
   035A 56            [ 7] 1290 	ld	d,(hl)
   035B 3ArB4r01      [13] 1291 	ld	a,(#_level + 0)
   035E 07            [ 4] 1292 	rlca
   035F 07            [ 4] 1293 	rlca
   0360 07            [ 4] 1294 	rlca
   0361 07            [ 4] 1295 	rlca
   0362 E6 F0         [ 7] 1296 	and	a,#0xF0
   0364 C6 74         [ 7] 1297 	add	a, #0x74
   0366 D5            [11] 1298 	push	de
   0367 57            [ 4] 1299 	ld	d,a
   0368 1E 50         [ 7] 1300 	ld	e,#0x50
   036A D5            [11] 1301 	push	de
   036B CDr00r00      [17] 1302 	call	_SG_addMetaSprite1x1
   036E F1            [10] 1303 	pop	af
   036F F1            [10] 1304 	pop	af
                           1305 ;my/pres.h:64: pad_read ();
   0370 CDr00r00      [17] 1306 	call	_pad_read
                           1307 ;my/pres.h:65: rda = level;
   0373 3ArB4r01      [13] 1308 	ld	a,(#_level + 0)
   0376 32r16r00      [13] 1309 	ld	(#_rda + 0),a
                           1310 ;my/pres.h:66: if (pad_this_frame & PAD_DOWN) {
   0379 21r05r00      [10] 1311 	ld	hl,#_pad_this_frame+0
   037C CB 4E         [12] 1312 	bit	1, (hl)
   037E 28 10         [12] 1313 	jr	Z,00104$
                           1314 ;my/pres.h:67: ++ level; if (level == 3) level = 0;
   0380 21rB4r01      [10] 1315 	ld	hl, #_level+0
   0383 34            [11] 1316 	inc	(hl)
   0384 3ArB4r01      [13] 1317 	ld	a,(#_level + 0)
   0387 D6 03         [ 7] 1318 	sub	a, #0x03
   0389 20 05         [12] 1319 	jr	NZ,00104$
   038B 21rB4r01      [10] 1320 	ld	hl,#_level + 0
   038E 36 00         [10] 1321 	ld	(hl), #0x00
   0390                    1322 00104$:
                           1323 ;my/pres.h:69: if (pad_this_frame & PAD_UP) {
   0390 21r05r00      [10] 1324 	ld	hl,#_pad_this_frame+0
   0393 CB 46         [12] 1325 	bit	0, (hl)
   0395 28 11         [12] 1326 	jr	Z,00109$
                           1327 ;my/pres.h:70: if (level) -- level; else level = 2;
   0397 3ArB4r01      [13] 1328 	ld	a,(#_level + 0)
   039A B7            [ 4] 1329 	or	a, a
   039B 28 06         [12] 1330 	jr	Z,00106$
   039D 21rB4r01      [10] 1331 	ld	hl, #_level+0
   03A0 35            [11] 1332 	dec	(hl)
   03A1 18 05         [12] 1333 	jr	00109$
   03A3                    1334 00106$:
   03A3 21rB4r01      [10] 1335 	ld	hl,#_level + 0
   03A6 36 02         [10] 1336 	ld	(hl), #0x02
   03A8                    1337 00109$:
                           1338 ;my/pres.h:72: if (pad_this_frame & (PAD_LEFT|PAD_RIGHT)) {
   03A8 3Ar05r00      [13] 1339 	ld	a,(#_pad_this_frame + 0)
   03AB E6 0C         [ 7] 1340 	and	a, #0x0C
   03AD 28 0A         [12] 1341 	jr	Z,00111$
                           1342 ;my/pres.h:73: game_puri = CELL_PURI - game_puri;
   03AF 21r55r02      [10] 1343 	ld	hl,#_game_puri
   03B2 3E 0A         [ 7] 1344 	ld	a,#0x0A
   03B4 96            [ 7] 1345 	sub	a, (hl)
   03B5 77            [ 7] 1346 	ld	(hl),a
                           1347 ;my/pres.h:74: logo ();
   03B6 CDr00r03      [17] 1348 	call	_logo
   03B9                    1349 00111$:
                           1350 ;my/pres.h:76: if (level != rda) PSGSFXPlay (SFX_USE, 1);
   03B9 3ArB4r01      [13] 1351 	ld	a,(#_level + 0)
   03BC FD 21r16r00   [14] 1352 	ld	iy,#_rda
   03C0 FD 96 00      [19] 1353 	sub	a, 0 (iy)
   03C3 28 0D         [12] 1354 	jr	Z,00113$
   03C5 11r00r00      [10] 1355 	ld	de,#_s_03_use2_psg
   03C8 3E 01         [ 7] 1356 	ld	a,#0x01
   03CA F5            [11] 1357 	push	af
   03CB 33            [ 6] 1358 	inc	sp
   03CC D5            [11] 1359 	push	de
   03CD CDr00r00      [17] 1360 	call	_PSGSFXPlay
   03D0 F1            [10] 1361 	pop	af
   03D1 33            [ 6] 1362 	inc	sp
   03D2                    1363 00113$:
                           1364 ;my/pres.h:77: if (pad_this_frame & PAD_1) break;
   03D2 21r05r00      [10] 1365 	ld	hl,#_pad_this_frame+0
   03D5 CB 66         [12] 1366 	bit	4, (hl)
   03D7 CAr47r03      [10] 1367 	jp	Z,00117$
                           1368 ;my/pres.h:80: PSGSFXPlay (SFX_START, 1); delay (20);
   03DA 11r00r00      [10] 1369 	ld	de,#_s_00_start2_psg+0
   03DD 3E 01         [ 7] 1370 	ld	a,#0x01
   03DF F5            [11] 1371 	push	af
   03E0 33            [ 6] 1372 	inc	sp
   03E1 D5            [11] 1373 	push	de
   03E2 CDr00r00      [17] 1374 	call	_PSGSFXPlay
   03E5 F1            [10] 1375 	pop	af
   03E6 33            [ 6] 1376 	inc	sp
   03E7 3E 14         [ 7] 1377 	ld	a,#0x14
   03E9 F5            [11] 1378 	push	af
   03EA 33            [ 6] 1379 	inc	sp
   03EB CDr00r00      [17] 1380 	call	_delay
   03EE 33            [ 6] 1381 	inc	sp
                           1382 ;my/pres.h:82: bat_out ();
   03EF C3r69r02      [10] 1383 	jp  _bat_out
   03F2                    1384 ___str_0:
   03F2 40 20 32 30 31 38  1385 	.ascii "@ 2018 THE MOJON TWINS"
        20 54 48 45 20 4D
        4F 4A 4F 4E 20 54
        57 49 4E 53
   0408 00                 1386 	.db 0x00
                           1387 ;my/pres.h:85: void scr_game_over (void) {
                           1388 ;	---------------------------------
                           1389 ; Function scr_game_over
                           1390 ; ---------------------------------
   0409                    1391 _scr_game_over::
                           1392 ;my/pres.h:86: gp_gen = cuts_rle; unrle ();
   0409 21r00r00      [10] 1393 	ld	hl,#_cuts_rle+0
   040C 22r0Ar00      [16] 1394 	ld	(_gp_gen),hl
   040F CDr00r00      [17] 1395 	call	_unrle
                           1396 ;my/pres.h:87: _x = 10; _y = 8; pr_str ("GAME OVER!");
   0412 21r00r00      [10] 1397 	ld	hl,#__x + 0
   0415 36 0A         [10] 1398 	ld	(hl), #0x0A
   0417 21r01r00      [10] 1399 	ld	hl,#__y + 0
   041A 36 08         [10] 1400 	ld	(hl), #0x08
   041C 21r5Br04      [10] 1401 	ld	hl,#___str_1
   041F E5            [11] 1402 	push	hl
   0420 CDr00r00      [17] 1403 	call	_pr_str
   0423 F1            [10] 1404 	pop	af
                           1405 ;my/pres.h:88: _x =  4; _y = 10; pr_str ("NICE TRY, BUT NO BANANA!");
   0424 21r00r00      [10] 1406 	ld	hl,#__x + 0
   0427 36 04         [10] 1407 	ld	(hl), #0x04
   0429 21r01r00      [10] 1408 	ld	hl,#__y + 0
   042C 36 0A         [10] 1409 	ld	(hl), #0x0A
   042E 21r66r04      [10] 1410 	ld	hl,#___str_2
   0431 E5            [11] 1411 	push	hl
   0432 CDr00r00      [17] 1412 	call	_pr_str
   0435 F1            [10] 1413 	pop	af
                           1414 ;my/pres.h:89: _x =  5; _y = 12; pr_str ("DO IT BETTER NEXT TIME");
   0436 21r00r00      [10] 1415 	ld	hl,#__x + 0
   0439 36 05         [10] 1416 	ld	(hl), #0x05
   043B 21r01r00      [10] 1417 	ld	hl,#__y + 0
   043E 36 0C         [10] 1418 	ld	(hl), #0x0C
   0440 21r7Fr04      [10] 1419 	ld	hl,#___str_3
   0443 E5            [11] 1420 	push	hl
   0444 CDr00r00      [17] 1421 	call	_pr_str
   0447 F1            [10] 1422 	pop	af
                           1423 ;my/pres.h:90: _x =  9; _y = 14; pr_str ("MISSION FAILED");
   0448 21r00r00      [10] 1424 	ld	hl,#__x + 0
   044B 36 09         [10] 1425 	ld	(hl), #0x09
   044D 21r01r00      [10] 1426 	ld	hl,#__y + 0
   0450 36 0E         [10] 1427 	ld	(hl), #0x0E
   0452 21r96r04      [10] 1428 	ld	hl,#___str_4
   0455 E5            [11] 1429 	push	hl
   0456 CDr00r00      [17] 1430 	call	_pr_str
   0459 F1            [10] 1431 	pop	af
   045A C9            [10] 1432 	ret
   045B                    1433 ___str_1:
   045B 47 41 4D 45 20 4F  1434 	.ascii "GAME OVER!"
        56 45 52 21
   0465 00                 1435 	.db 0x00
   0466                    1436 ___str_2:
   0466 4E 49 43 45 20 54  1437 	.ascii "NICE TRY, BUT NO BANANA!"
        52 59 2C 20 42 55
        54 20 4E 4F 20 42
        41 4E 41 4E 41 21
   047E 00                 1438 	.db 0x00
   047F                    1439 ___str_3:
   047F 44 4F 20 49 54 20  1440 	.ascii "DO IT BETTER NEXT TIME"
        42 45 54 54 45 52
        20 4E 45 58 54 20
        54 49 4D 45
   0495 00                 1441 	.db 0x00
   0496                    1442 ___str_4:
   0496 4D 49 53 53 49 4F  1443 	.ascii "MISSION FAILED"
        4E 20 46 41 49 4C
        45 44
   04A4 00                 1444 	.db 0x00
                           1445 ;my/pres.h:93: void scr_the_end (void) {
                           1446 ;	---------------------------------
                           1447 ; Function scr_the_end
                           1448 ; ---------------------------------
   04A5                    1449 _scr_the_end::
                           1450 ;my/pres.h:94: gp_gen = cuts_rle; unrle ();
   04A5 21r00r00      [10] 1451 	ld	hl,#_cuts_rle+0
   04A8 22r0Ar00      [16] 1452 	ld	(_gp_gen),hl
   04AB CDr00r00      [17] 1453 	call	_unrle
                           1454 ;my/pres.h:95: _x = 9; _y = 8; pr_str ("CONGRATULATIONS!");
   04AE 21r00r00      [10] 1455 	ld	hl,#__x + 0
   04B1 36 09         [10] 1456 	ld	(hl), #0x09
   04B3 21r01r00      [10] 1457 	ld	hl,#__y + 0
   04B6 36 08         [10] 1458 	ld	(hl), #0x08
   04B8 21rF7r04      [10] 1459 	ld	hl,#___str_5
   04BB E5            [11] 1460 	push	hl
   04BC CDr00r00      [17] 1461 	call	_pr_str
   04BF F1            [10] 1462 	pop	af
                           1463 ;my/pres.h:96: _x = 2; _y = 10; pr_str ("ALL CRISTALS ARE RECOVERED");
   04C0 21r00r00      [10] 1464 	ld	hl,#__x + 0
   04C3 36 02         [10] 1465 	ld	(hl), #0x02
   04C5 21r01r00      [10] 1466 	ld	hl,#__y + 0
   04C8 36 0A         [10] 1467 	ld	(hl), #0x0A
   04CA 21r08r05      [10] 1468 	ld	hl,#___str_6
   04CD E5            [11] 1469 	push	hl
   04CE CDr00r00      [17] 1470 	call	_pr_str
   04D1 F1            [10] 1471 	pop	af
                           1472 ;my/pres.h:97: _x = 4; _y = 12; pr_str ("NOW YOU CAN GET BACK TO YOUR");
   04D2 21r00r00      [10] 1473 	ld	hl,#__x + 0
   04D5 36 04         [10] 1474 	ld	(hl), #0x04
   04D7 21r01r00      [10] 1475 	ld	hl,#__y + 0
   04DA 36 0C         [10] 1476 	ld	(hl), #0x0C
   04DC 21r23r05      [10] 1477 	ld	hl,#___str_7
   04DF E5            [11] 1478 	push	hl
   04E0 CDr00r00      [17] 1479 	call	_pr_str
   04E3 F1            [10] 1480 	pop	af
                           1481 ;my/pres.h:98: _x = 5; _y = 14; pr_str ("BASE AND HAVE A GOOD REST!");	
   04E4 21r00r00      [10] 1482 	ld	hl,#__x + 0
   04E7 36 05         [10] 1483 	ld	(hl), #0x05
   04E9 21r01r00      [10] 1484 	ld	hl,#__y + 0
   04EC 36 0E         [10] 1485 	ld	(hl), #0x0E
   04EE 21r40r05      [10] 1486 	ld	hl,#___str_8
   04F1 E5            [11] 1487 	push	hl
   04F2 CDr00r00      [17] 1488 	call	_pr_str
   04F5 F1            [10] 1489 	pop	af
   04F6 C9            [10] 1490 	ret
   04F7                    1491 ___str_5:
   04F7 43 4F 4E 47 52 41  1492 	.ascii "CONGRATULATIONS!"
        54 55 4C 41 54 49
        4F 4E 53 21
   0507 00                 1493 	.db 0x00
   0508                    1494 ___str_6:
   0508 41 4C 4C 20 43 52  1495 	.ascii "ALL CRISTALS ARE RECOVERED"
        49 53 54 41 4C 53
        20 41 52 45 20 52
        45 43 4F 56 45 52
        45 44
   0522 00                 1496 	.db 0x00
   0523                    1497 ___str_7:
   0523 4E 4F 57 20 59 4F  1498 	.ascii "NOW YOU CAN GET BACK TO YOUR"
        55 20 43 41 4E 20
        47 45 54 20 42 41
        43 4B 20 54 4F 20
        59 4F 55 52
   053F 00                 1499 	.db 0x00
   0540                    1500 ___str_8:
   0540 42 41 53 45 20 41  1501 	.ascii "BASE AND HAVE A GOOD REST!"
        4E 44 20 48 41 56
        45 20 41 20 47 4F
        4F 44 20 52 45 53
        54 21
   055A 00                 1502 	.db 0x00
                           1503 ;my/pres.h:101: void credits (void) {
                           1504 ;	---------------------------------
                           1505 ; Function credits
                           1506 ; ---------------------------------
   055B                    1507 _credits::
                           1508 ;my/pres.h:102: cls ();
   055B CDr00r00      [17] 1509 	call	_cls
                           1510 ;my/pres.h:104: _x = 0; _y = 0; if (ntsc) pr_str ("NTSC"); else pr_str ("PAL");
   055E 21r00r00      [10] 1511 	ld	hl,#__x + 0
   0561 36 00         [10] 1512 	ld	(hl), #0x00
   0563 21r01r00      [10] 1513 	ld	hl,#__y + 0
   0566 36 00         [10] 1514 	ld	(hl), #0x00
   0568 3Ar8Er00      [13] 1515 	ld	a,(#_ntsc + 0)
   056B B7            [ 4] 1516 	or	a, a
   056C 28 0A         [12] 1517 	jr	Z,00102$
   056E 21rD2r05      [10] 1518 	ld	hl,#___str_9
   0571 E5            [11] 1519 	push	hl
   0572 CDr00r00      [17] 1520 	call	_pr_str
   0575 F1            [10] 1521 	pop	af
   0576 18 08         [12] 1522 	jr	00103$
   0578                    1523 00102$:
   0578 21rD7r05      [10] 1524 	ld	hl,#___str_10
   057B E5            [11] 1525 	push	hl
   057C CDr00r00      [17] 1526 	call	_pr_str
   057F F1            [10] 1527 	pop	af
   0580                    1528 00103$:
                           1529 ;my/pres.h:106: rds16 = 0; rdy = 240;
   0580 21 00 00      [10] 1530 	ld	hl,#0x0000
   0583 22r08r00      [16] 1531 	ld	(_rds16),hl
   0586 21r13r00      [10] 1532 	ld	hl,#_rdy + 0
   0589 36 F0         [10] 1533 	ld	(hl), #0xF0
                           1534 ;my/pres.h:107: _x = 0; _y = 18; 
   058B 21r00r00      [10] 1535 	ld	hl,#__x + 0
   058E 36 00         [10] 1536 	ld	(hl), #0x00
   0590 21r01r00      [10] 1537 	ld	hl,#__y + 0
   0593 36 12         [10] 1538 	ld	(hl), #0x12
                           1539 ;my/pres.h:108: pr_str ("       JET PACO & JET PURI%%         ORIGINAL GAME:%     @ 2013 THE MOJON TWINS%       REPROGRAMMED GAME:%     @ 2018 THE MOJON TWINS");
   0595 21rDBr05      [10] 1540 	ld	hl,#___str_11+0
   0598 E5            [11] 1541 	push	hl
   0599 CDr00r00      [17] 1542 	call	_pr_str
                           1543 ;my/pres.h:110: SG_displayOn ();
   059C 21 40 01      [10] 1544 	ld	hl, #0x0140
   059F E3            [19] 1545 	ex	(sp),hl
   05A0 CDr00r00      [17] 1546 	call	_SG_VDPturnOnFeature
   05A3 F1            [10] 1547 	pop	af
                           1548 ;my/pres.h:112: while (!(SG_getKeysStatus () & PAD_START) && rds16 < 300) {
   05A4                    1549 00105$:
   05A4 CDr00r00      [17] 1550 	call	_SG_getKeysStatus
   05A7 CB 65         [ 8] 1551 	bit	4, l
   05A9 20 1E         [12] 1552 	jr	NZ,00107$
   05AB 3Ar08r00      [13] 1553 	ld	a,(#_rds16 + 0)
   05AE D6 2C         [ 7] 1554 	sub	a, #0x2C
   05B0 3Ar09r00      [13] 1555 	ld	a,(#_rds16 + 1)
   05B3 17            [ 4] 1556 	rla
   05B4 3F            [ 4] 1557 	ccf
   05B5 1F            [ 4] 1558 	rra
   05B6 DE 81         [ 7] 1559 	sbc	a, #0x81
   05B8 30 0F         [12] 1560 	jr	NC,00107$
                           1561 ;my/pres.h:115: update_cycle ();
   05BA CDr00r00      [17] 1562 	call	_update_cycle
                           1563 ;my/pres.h:116: rds16 ++;
   05BD 21r08r00      [10] 1564 	ld	hl, #_rds16+0
   05C0 34            [11] 1565 	inc	(hl)
   05C1 20 E1         [12] 1566 	jr	NZ,00105$
   05C3 21r09r00      [10] 1567 	ld	hl, #_rds16+1
   05C6 34            [11] 1568 	inc	(hl)
   05C7 18 DB         [12] 1569 	jr	00105$
   05C9                    1570 00107$:
                           1571 ;my/pres.h:119: SG_displayOff ();
   05C9 21 40 01      [10] 1572 	ld	hl,#0x0140
   05CC E5            [11] 1573 	push	hl
   05CD CDr00r00      [17] 1574 	call	_SG_VDPturnOffFeature
   05D0 F1            [10] 1575 	pop	af
   05D1 C9            [10] 1576 	ret
   05D2                    1577 ___str_9:
   05D2 4E 54 53 43        1578 	.ascii "NTSC"
   05D6 00                 1579 	.db 0x00
   05D7                    1580 ___str_10:
   05D7 50 41 4C           1581 	.ascii "PAL"
   05DA 00                 1582 	.db 0x00
   05DB                    1583 ___str_11:
   05DB 20 20 20 20 20 20  1584 	.ascii "       JET PACO & JET PURI%%         ORIGINAL GAME:%     @ 2"
        20 4A 45 54 20 50
        41 43 4F 20 26 20
        4A 45 54 20 50 55
        52 49 25 25 20 20
        20 20 20 20 20 20
        20 4F 52 49 47 49
        4E 41 4C 20 47 41
        4D 45 3A 25 20 20
        20 20 20 40 20 32
   0617 30 31 33 20 54 48  1585 	.ascii "013 THE MOJON TWINS%       REPROGRAMMED GAME:%     @ 2018 TH"
        45 20 4D 4F 4A 4F
        4E 20 54 57 49 4E
        53 25 20 20 20 20
        20 20 20 52 45 50
        52 4F 47 52 41 4D
        4D 45 44 20 47 41
        4D 45 3A 25 20 20
        20 20 20 40 20 32
        30 31 38 20 54 48
   0653 45 20 4D 4F 4A 4F  1586 	.ascii "E MOJON TWINS"
        4E 20 54 57 49 4E
        53
   0660 00                 1587 	.db 0x00
                           1588 ;mainloop/flickscreen.h:7: void flickscreen_do_horizontal (void) {
                           1589 ;	---------------------------------
                           1590 ; Function flickscreen_do_horizontal
                           1591 ; ---------------------------------
   0661                    1592 _flickscreen_do_horizontal::
                           1593 ;mainloop/flickscreen.h:8: if (prx == 4 && 
   0661 3Ar53r00      [13] 1594 	ld	a,(#_prx + 0)
   0664 D6 04         [ 7] 1595 	sub	a, #0x04
   0666 20 12         [12] 1596 	jr	NZ,00105$
                           1597 ;mainloop/flickscreen.h:14: ) {
   0668 3Ar50r00      [13] 1598 	ld	a,(#_pvx + 1)
   066B CB 7F         [ 8] 1599 	bit	7,a
   066D 28 0B         [12] 1600 	jr	Z,00105$
                           1601 ;mainloop/flickscreen.h:15: -- n_pant;
   066F 21rB6r01      [10] 1602 	ld	hl, #_n_pant+0
   0672 35            [11] 1603 	dec	(hl)
                           1604 ;mainloop/flickscreen.h:16: px = 244 << FIXBITS;
   0673 21 00 3D      [10] 1605 	ld	hl,#0x3D00
   0676 22r4Br00      [16] 1606 	ld	(_px),hl
   0679 C9            [10] 1607 	ret
   067A                    1608 00105$:
                           1609 ;mainloop/flickscreen.h:17: } else if (prx == 244 && 
   067A 3Ar53r00      [13] 1610 	ld	a,(#_prx + 0)
   067D D6 F4         [ 7] 1611 	sub	a, #0xF4
   067F C0            [11] 1612 	ret	NZ
                           1613 ;mainloop/flickscreen.h:23: ) {
   0680 AF            [ 4] 1614 	xor	a, a
   0681 FD 21r4Fr00   [14] 1615 	ld	iy,#_pvx
   0685 FD BE 00      [19] 1616 	cp	a, 0 (iy)
   0688 FD 21r4Fr00   [14] 1617 	ld	iy,#_pvx
   068C FD 9E 01      [19] 1618 	sbc	a, 1 (iy)
   068F E2r94r06      [10] 1619 	jp	PO, 00130$
   0692 EE 80         [ 7] 1620 	xor	a, #0x80
   0694                    1621 00130$:
   0694 F0            [11] 1622 	ret	P
                           1623 ;mainloop/flickscreen.h:24: ++ n_pant;
   0695 21rB6r01      [10] 1624 	ld	hl, #_n_pant+0
   0698 34            [11] 1625 	inc	(hl)
                           1626 ;mainloop/flickscreen.h:25: px = 4 << FIXBITS;
   0699 21 00 01      [10] 1627 	ld	hl,#0x0100
   069C 22r4Br00      [16] 1628 	ld	(_px),hl
   069F C9            [10] 1629 	ret
                           1630 ;mainloop/flickscreen.h:29: void flickscreen_do_vertical (void) {
                           1631 ;	---------------------------------
                           1632 ; Function flickscreen_do_vertical
                           1633 ; ---------------------------------
   06A0                    1634 _flickscreen_do_vertical::
                           1635 ;mainloop/flickscreen.h:42: if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
   06A0 3Ar54r00      [13] 1636 	ld	a,(#_pry + 0)
   06A3 B7            [ 4] 1637 	or	a, a
   06A4 20 44         [12] 1638 	jr	NZ,00108$
   06A6 3Ar52r00      [13] 1639 	ld	a,(#_pvy + 1)
   06A9 CB 7F         [ 8] 1640 	bit	7,a
   06AB 28 3D         [12] 1641 	jr	Z,00108$
   06AD 21r7Br00      [10] 1642 	ld	hl,#_c_map_w
   06B0 3ArB6r01      [13] 1643 	ld	a,(#_n_pant + 0)
   06B3 96            [ 7] 1644 	sub	a, (hl)
   06B4 38 34         [12] 1645 	jr	C,00108$
                           1646 ;mainloop/flickscreen.h:43: n_pant -= c_map_w;
   06B6 21r7Br00      [10] 1647 	ld	hl,#_c_map_w
   06B9 D5            [11] 1648 	push	de
   06BA FD 21rB6r01   [14] 1649 	ld	iy,#_n_pant
   06BE FD E5         [15] 1650 	push	iy
   06C0 D1            [10] 1651 	pop	de
   06C1 1A            [ 7] 1652 	ld	a,(de)
   06C2 96            [ 7] 1653 	sub	a, (hl)
   06C3 12            [ 7] 1654 	ld	(de),a
   06C4 D1            [10] 1655 	pop	de
                           1656 ;mainloop/flickscreen.h:44: py = 192 << FIXBITS;
   06C5 21 00 30      [10] 1657 	ld	hl,#0x3000
   06C8 22r4Dr00      [16] 1658 	ld	(_py),hl
                           1659 ;mainloop/flickscreen.h:45: if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
   06CB 3E 40         [ 7] 1660 	ld	a,#0x40
   06CD FD 21r51r00   [14] 1661 	ld	iy,#_pvy
   06D1 FD BE 00      [19] 1662 	cp	a, 0 (iy)
   06D4 3E FF         [ 7] 1663 	ld	a,#0xFF
   06D6 FD 21r51r00   [14] 1664 	ld	iy,#_pvy
   06DA FD 9E 01      [19] 1665 	sbc	a, 1 (iy)
   06DD E2rE2r06      [10] 1666 	jp	PO, 00142$
   06E0 EE 80         [ 7] 1667 	xor	a, #0x80
   06E2                    1668 00142$:
   06E2 F0            [11] 1669 	ret	P
   06E3 21 40 FF      [10] 1670 	ld	hl,#0xFF40
   06E6 22r51r00      [16] 1671 	ld	(_pvy),hl
   06E9 C9            [10] 1672 	ret
   06EA                    1673 00108$:
                           1674 ;mainloop/flickscreen.h:46: } else if (pry >= 192 && pvy > 0 && n_pant < c_map_size - c_map_w) {
   06EA 3Ar54r00      [13] 1675 	ld	a,(#_pry + 0)
   06ED D6 C0         [ 7] 1676 	sub	a, #0xC0
   06EF D8            [11] 1677 	ret	C
   06F0 AF            [ 4] 1678 	xor	a, a
   06F1 FD 21r51r00   [14] 1679 	ld	iy,#_pvy
   06F5 FD BE 00      [19] 1680 	cp	a, 0 (iy)
   06F8 FD 21r51r00   [14] 1681 	ld	iy,#_pvy
   06FC FD 9E 01      [19] 1682 	sbc	a, 1 (iy)
   06FF E2r04r07      [10] 1683 	jp	PO, 00143$
   0702 EE 80         [ 7] 1684 	xor	a, #0x80
   0704                    1685 00143$:
   0704 F0            [11] 1686 	ret	P
   0705 21r7Dr00      [10] 1687 	ld	hl,#_c_map_size + 0
   0708 5E            [ 7] 1688 	ld	e, (hl)
   0709 16 00         [ 7] 1689 	ld	d,#0x00
   070B FD 21r7Br00   [14] 1690 	ld	iy,#_c_map_w
   070F FD 6E 00      [19] 1691 	ld	l,0 (iy)
   0712 26 00         [ 7] 1692 	ld	h,#0x00
   0714 7B            [ 4] 1693 	ld	a,e
   0715 95            [ 4] 1694 	sub	a, l
   0716 5F            [ 4] 1695 	ld	e,a
   0717 7A            [ 4] 1696 	ld	a,d
   0718 9C            [ 4] 1697 	sbc	a, h
   0719 57            [ 4] 1698 	ld	d,a
   071A FD 21rB6r01   [14] 1699 	ld	iy,#_n_pant
   071E FD 66 00      [19] 1700 	ld	h,0 (iy)
   0721 2E 00         [ 7] 1701 	ld	l,#0x00
   0723 7C            [ 4] 1702 	ld	a,h
   0724 93            [ 4] 1703 	sub	a, e
   0725 7D            [ 4] 1704 	ld	a,l
   0726 9A            [ 4] 1705 	sbc	a, d
   0727 E2r2Cr07      [10] 1706 	jp	PO, 00144$
   072A EE 80         [ 7] 1707 	xor	a, #0x80
   072C                    1708 00144$:
   072C F0            [11] 1709 	ret	P
                           1710 ;mainloop/flickscreen.h:47: n_pant += c_map_w;
   072D 21r7Br00      [10] 1711 	ld	hl,#_c_map_w
   0730 D5            [11] 1712 	push	de
   0731 FD 21rB6r01   [14] 1713 	ld	iy,#_n_pant
   0735 FD E5         [15] 1714 	push	iy
   0737 D1            [10] 1715 	pop	de
   0738 1A            [ 7] 1716 	ld	a,(de)
   0739 86            [ 7] 1717 	add	a, (hl)
   073A 12            [ 7] 1718 	ld	(de),a
   073B D1            [10] 1719 	pop	de
                           1720 ;mainloop/flickscreen.h:48: py = 0;
   073C 21 00 00      [10] 1721 	ld	hl,#0x0000
   073F 22r4Dr00      [16] 1722 	ld	(_py),hl
   0742 C9            [10] 1723 	ret
                           1724 ;mainloop.h:6: void player_frame_selector (void) {
                           1725 ;	---------------------------------
                           1726 ; Function player_frame_selector
                           1727 ; ---------------------------------
   0743                    1728 _player_frame_selector::
                           1729 ;my/player_frame_selector.h:14: if (ppossee || pgotten) {
   0743 3Ar60r00      [13] 1730 	ld	a,(#_ppossee + 0)
   0746 B7            [ 4] 1731 	or	a, a
   0747 20 06         [12] 1732 	jr	NZ,00112$
   0749 3Ar5Fr00      [13] 1733 	ld	a,(#_pgotten + 0)
   074C B7            [ 4] 1734 	or	a, a
   074D 28 6F         [12] 1735 	jr	Z,00113$
   074F                    1736 00112$:
                           1737 ;my/player_frame_selector.h:16: if (pvx > PLAYER_VX_MIN || pvx < -PLAYER_VX_MIN) {
   074F 3E 20         [ 7] 1738 	ld	a,#0x20
   0751 FD 21r4Fr00   [14] 1739 	ld	iy,#_pvx
   0755 FD BE 00      [19] 1740 	cp	a, 0 (iy)
   0758 3E 00         [ 7] 1741 	ld	a,#0x00
   075A FD 21r4Fr00   [14] 1742 	ld	iy,#_pvx
   075E FD 9E 01      [19] 1743 	sbc	a, 1 (iy)
   0761 E2r66r07      [10] 1744 	jp	PO, 00138$
   0764 EE 80         [ 7] 1745 	xor	a, #0x80
   0766                    1746 00138$:
   0766 FAr78r07      [10] 1747 	jp	M,00108$
   0769 3Ar4Fr00      [13] 1748 	ld	a,(#_pvx + 0)
   076C D6 E0         [ 7] 1749 	sub	a, #0xE0
   076E 3Ar50r00      [13] 1750 	ld	a,(#_pvx + 1)
   0771 17            [ 4] 1751 	rla
   0772 3F            [ 4] 1752 	ccf
   0773 1F            [ 4] 1753 	rra
   0774 DE 7F         [ 7] 1754 	sbc	a, #0x7F
   0776 30 3A         [12] 1755 	jr	NC,00109$
   0778                    1756 00108$:
                           1757 ;my/player_frame_selector.h:18: if ((prx >> 3) != ol_prx) { 
   0778 21r53r00      [10] 1758 	ld	hl,#_prx + 0
   077B 56            [ 7] 1759 	ld	d, (hl)
   077C CB 3A         [ 8] 1760 	srl	d
   077E CB 3A         [ 8] 1761 	srl	d
   0780 CB 3A         [ 8] 1762 	srl	d
                           1763 ;my/player_frame_selector.h:17: if (game_puri) {
   0782 3Ar55r02      [13] 1764 	ld	a,(#_game_puri + 0)
   0785 B7            [ 4] 1765 	or	a, a
   0786 28 22         [12] 1766 	jr	Z,00106$
                           1767 ;my/player_frame_selector.h:18: if ((prx >> 3) != ol_prx) { 
   0788 3Ar56r02      [13] 1768 	ld	a,(#_ol_prx + 0)
   078B 92            [ 4] 1769 	sub	a, d
   078C 28 14         [12] 1770 	jr	Z,00104$
                           1771 ;my/player_frame_selector.h:19: pfr ++; if (pfr == 3) pfr = 0;
   078E 21r58r00      [10] 1772 	ld	hl, #_pfr+0
   0791 34            [11] 1773 	inc	(hl)
   0792 3Ar58r00      [13] 1774 	ld	a,(#_pfr + 0)
   0795 D6 03         [ 7] 1775 	sub	a, #0x03
   0797 20 05         [12] 1776 	jr	NZ,00102$
   0799 21r58r00      [10] 1777 	ld	hl,#_pfr + 0
   079C 36 00         [10] 1778 	ld	(hl), #0x00
   079E                    1779 00102$:
                           1780 ;my/player_frame_selector.h:20: ol_prx = prx >> 3;
   079E 21r56r02      [10] 1781 	ld	hl,#_ol_prx + 0
   07A1 72            [ 7] 1782 	ld	(hl), d
   07A2                    1783 00104$:
                           1784 ;my/player_frame_selector.h:23: psprid = pfr;
   07A2 3Ar58r00      [13] 1785 	ld	a,(#_pfr + 0)
   07A5 32r59r00      [13] 1786 	ld	(#_psprid + 0),a
   07A8 18 19         [12] 1787 	jr	00114$
   07AA                    1788 00106$:
                           1789 ;my/player_frame_selector.h:25: psprid = CELL_WALK_CYCLE + ((prx >> 3) & 3);
   07AA 7A            [ 4] 1790 	ld	a,d
   07AB E6 03         [ 7] 1791 	and	a, #0x03
   07AD 32r59r00      [13] 1792 	ld	(#_psprid + 0),a
   07B0 18 11         [12] 1793 	jr	00114$
   07B2                    1794 00109$:
                           1795 ;my/player_frame_selector.h:27: } else { psprid = CELL_IDLE; pfr = 0; }
   07B2 21r59r00      [10] 1796 	ld	hl,#_psprid + 0
   07B5 36 01         [10] 1797 	ld	(hl), #0x01
   07B7 21r58r00      [10] 1798 	ld	hl,#_pfr + 0
   07BA 36 00         [10] 1799 	ld	(hl), #0x00
   07BC 18 05         [12] 1800 	jr	00114$
   07BE                    1801 00113$:
                           1802 ;my/player_frame_selector.h:28: } else psprid = CELL_AIRBORNE;
   07BE 21r59r00      [10] 1803 	ld	hl,#_psprid + 0
   07C1 36 04         [10] 1804 	ld	(hl), #0x04
   07C3                    1805 00114$:
                           1806 ;my/player_frame_selector.h:30: psprid += pfacing + game_puri;
   07C3 21r55r02      [10] 1807 	ld	hl,#_game_puri
   07C6 3Ar57r00      [13] 1808 	ld	a,(#_pfacing + 0)
   07C9 86            [ 7] 1809 	add	a, (hl)
   07CA 57            [ 4] 1810 	ld	d,a
   07CB 21r59r00      [10] 1811 	ld	hl,#_psprid
   07CE 7E            [ 7] 1812 	ld	a,(hl)
   07CF 82            [ 4] 1813 	add	a, d
   07D0 77            [ 7] 1814 	ld	(hl),a
   07D1 C9            [10] 1815 	ret
                           1816 ;mainloop.h:10: void game_init (void) {
                           1817 ;	---------------------------------
                           1818 ; Function game_init
                           1819 ; ---------------------------------
   07D2                    1820 _game_init::
                           1821 ;mainloop.h:12: win_level = game_over = 0;
   07D2 21rBCr01      [10] 1822 	ld	hl,#_game_over + 0
   07D5 36 00         [10] 1823 	ld	(hl), #0x00
   07D7 21rBBr01      [10] 1824 	ld	hl,#_win_level + 0
   07DA 36 00         [10] 1825 	ld	(hl), #0x00
                           1826 ;mainloop/asset_setup.h:9: c_ts_tmaps = 	l_ts_tmaps [level];
   07DC FD 21rB4r01   [14] 1827 	ld	iy,#_level
   07E0 FD 6E 00      [19] 1828 	ld	l,0 (iy)
   07E3 26 00         [ 7] 1829 	ld	h,#0x00
   07E5 29            [11] 1830 	add	hl, hl
   07E6 EB            [ 4] 1831 	ex	de,hl
   07E7 21r4Fr01      [10] 1832 	ld	hl,#_l_ts_tmaps
   07EA 19            [11] 1833 	add	hl,de
   07EB 7E            [ 7] 1834 	ld	a,(hl)
   07EC FD 21r7Er00   [14] 1835 	ld	iy,#_c_ts_tmaps
   07F0 FD 77 00      [19] 1836 	ld	0 (iy),a
   07F3 23            [ 6] 1837 	inc	hl
   07F4 7E            [ 7] 1838 	ld	a,(hl)
   07F5 32r7Fr00      [13] 1839 	ld	(#_c_ts_tmaps + 1),a
                           1840 ;mainloop/asset_setup.h:10: c_behs = 		l_behs [level];
   07F8 21r55r01      [10] 1841 	ld	hl,#_l_behs
   07FB 19            [11] 1842 	add	hl,de
   07FC 7E            [ 7] 1843 	ld	a,(hl)
   07FD FD 21r80r00   [14] 1844 	ld	iy,#_c_behs
   0801 FD 77 00      [19] 1845 	ld	0 (iy),a
   0804 23            [ 6] 1846 	inc	hl
   0805 7E            [ 7] 1847 	ld	a,(hl)
   0806 32r81r00      [13] 1848 	ld	(#_c_behs + 1),a
                           1849 ;mainloop/asset_setup.h:11: spr_enems = 	l_spr_enems [level];
   0809 21r5Br01      [10] 1850 	ld	hl,#_l_spr_enems
   080C 19            [11] 1851 	add	hl,de
   080D 7E            [ 7] 1852 	ld	a,(hl)
   080E FD 21r82r00   [14] 1853 	ld	iy,#_spr_enems
   0812 FD 77 00      [19] 1854 	ld	0 (iy),a
   0815 23            [ 6] 1855 	inc	hl
   0816 7E            [ 7] 1856 	ld	a,(hl)
   0817 32r83r00      [13] 1857 	ld	(#_spr_enems + 1),a
                           1858 ;mainloop/asset_setup.h:13: c_map = 		l_map [level];
   081A 21r61r01      [10] 1859 	ld	hl,#_l_map
   081D 19            [11] 1860 	add	hl,de
   081E 7E            [ 7] 1861 	ld	a,(hl)
   081F FD 21r84r00   [14] 1862 	ld	iy,#_c_map
   0823 FD 77 00      [19] 1863 	ld	0 (iy),a
   0826 23            [ 6] 1864 	inc	hl
   0827 7E            [ 7] 1865 	ld	a,(hl)
   0828 FD 21r84r00   [14] 1866 	ld	iy,#_c_map
   082C FD 77 01      [19] 1867 	ld	1 (iy),a
                           1868 ;mainloop/asset_setup.h:20: c_decos = 	l_decos [level];
   082F 3ArB4r01      [13] 1869 	ld	a,(#_level + 0)
   0832 C6r67         [ 7] 1870 	add	a, #<(_l_decos)
   0834 4F            [ 4] 1871 	ld	c,a
   0835 3E 00         [ 7] 1872 	ld	a,#0x00
   0837 CEs01         [ 7] 1873 	adc	a, #>(_l_decos)
   0839 47            [ 4] 1874 	ld	b,a
   083A 0A            [ 7] 1875 	ld	a,(bc)
   083B 32r86r00      [13] 1876 	ld	(#_c_decos + 0),a
                           1877 ;mainloop/asset_setup.h:28: c_enems = 		l_enems [level];
   083E 21r6Ar01      [10] 1878 	ld	hl,#_l_enems
   0841 19            [11] 1879 	add	hl,de
   0842 7E            [ 7] 1880 	ld	a,(hl)
   0843 FD 21r89r00   [14] 1881 	ld	iy,#_c_enems
   0847 FD 77 00      [19] 1882 	ld	0 (iy),a
   084A 23            [ 6] 1883 	inc	hl
   084B 7E            [ 7] 1884 	ld	a,(hl)
   084C 32r8Ar00      [13] 1885 	ld	(#_c_enems + 1),a
                           1886 ;mainloop/asset_setup.h:29: c_hotspots = 	l_hotspots [level];	
   084F 21r70r01      [10] 1887 	ld	hl,#_l_hotspots
   0852 19            [11] 1888 	add	hl,de
   0853 7E            [ 7] 1889 	ld	a,(hl)
   0854 FD 21r8Br00   [14] 1890 	ld	iy,#_c_hotspots
   0858 FD 77 00      [19] 1891 	ld	0 (iy),a
   085B 23            [ 6] 1892 	inc	hl
   085C 7E            [ 7] 1893 	ld	a,(hl)
   085D 32r8Cr00      [13] 1894 	ld	(#_c_hotspots + 1),a
                           1895 ;mainloop/asset_setup.h:31: c_max_enems = 	l_player_max_enems [level];
   0860 11r4Cr01      [10] 1896 	ld	de,#_l_player_max_enems+0
   0863 2ArB4r01      [16] 1897 	ld	hl,(_level)
   0866 26 00         [ 7] 1898 	ld	h,#0x00
   0868 19            [11] 1899 	add	hl,de
   0869 7E            [ 7] 1900 	ld	a,(hl)
   086A 32rB5r01      [13] 1901 	ld	(#_c_max_enems + 0),a
                           1902 ;mainloop/asset_setup.h:33: c_map_w = 		l_map_w [level];
   086D 11r43r01      [10] 1903 	ld	de,#_l_map_w+0
   0870 2ArB4r01      [16] 1904 	ld	hl,(_level)
   0873 26 00         [ 7] 1905 	ld	h,#0x00
   0875 19            [11] 1906 	add	hl,de
   0876 7E            [ 7] 1907 	ld	a,(hl)
   0877 32r7Br00      [13] 1908 	ld	(#_c_map_w + 0),a
                           1909 ;mainloop/asset_setup.h:34: c_map_h = 		l_map_h [level];
   087A 11r46r01      [10] 1910 	ld	de,#_l_map_h+0
   087D 2ArB4r01      [16] 1911 	ld	hl,(_level)
   0880 26 00         [ 7] 1912 	ld	h,#0x00
   0882 19            [11] 1913 	add	hl,de
   0883 7E            [ 7] 1914 	ld	a,(hl)
                           1915 ;mainloop/asset_setup.h:84: rda = c_map_h; c_map_size = 0; while (rda --) c_map_size += c_map_w;
   0884 32r7Cr00      [13] 1916 	ld	(#_c_map_h + 0),a
   0887 32r16r00      [13] 1917 	ld	(#_rda + 0),a
   088A 21r7Dr00      [10] 1918 	ld	hl,#_c_map_size + 0
   088D 36 00         [10] 1919 	ld	(hl), #0x00
   088F                    1920 00101$:
   088F 21r16r00      [10] 1921 	ld	hl,#_rda + 0
   0892 56            [ 7] 1922 	ld	d, (hl)
   0893 21r16r00      [10] 1923 	ld	hl, #_rda+0
   0896 35            [11] 1924 	dec	(hl)
   0897 7A            [ 4] 1925 	ld	a,d
   0898 B7            [ 4] 1926 	or	a, a
   0899 28 11         [12] 1927 	jr	Z,00103$
   089B 21r7Br00      [10] 1928 	ld	hl,#_c_map_w
   089E D5            [11] 1929 	push	de
   089F FD 21r7Dr00   [14] 1930 	ld	iy,#_c_map_size
   08A3 FD E5         [15] 1931 	push	iy
   08A5 D1            [10] 1932 	pop	de
   08A6 1A            [ 7] 1933 	ld	a,(de)
   08A7 86            [ 7] 1934 	add	a, (hl)
   08A8 12            [ 7] 1935 	ld	(de),a
   08A9 D1            [10] 1936 	pop	de
   08AA 18 E3         [12] 1937 	jr	00101$
   08AC                    1938 00103$:
                           1939 ;mainloop.h:20: cls ();
   08AC CDr00r00      [17] 1940 	call	_cls
                           1941 ;mainloop.h:22: draw_game_frame ();
   08AF CDr07r02      [17] 1942 	call	_draw_game_frame
                           1943 ;mainloop.h:25: hotspots_load ();
   08B2 CDr00r00      [17] 1944 	call	_hotspots_load
                           1945 ;mainloop.h:31: if (!warp_to_level)	{
   08B5 3ArBDr01      [13] 1946 	ld	a,(#_warp_to_level + 0)
   08B8 B7            [ 4] 1947 	or	a, a
   08B9 20 43         [12] 1948 	jr	NZ,00105$
                           1949 ;mainloop.h:32: n_pant = SCR_INI;
   08BB 11r3Ar01      [10] 1950 	ld	de,#_l_scr_ini+0
   08BE 2ArB4r01      [16] 1951 	ld	hl,(_level)
   08C1 26 00         [ 7] 1952 	ld	h,#0x00
   08C3 19            [11] 1953 	add	hl,de
   08C4 7E            [ 7] 1954 	ld	a,(hl)
   08C5 32rB6r01      [13] 1955 	ld	(#_n_pant + 0),a
                           1956 ;mainloop.h:33: px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
   08C8 11r3Dr01      [10] 1957 	ld	de,#_l_ini_x+0
   08CB 2ArB4r01      [16] 1958 	ld	hl,(_level)
   08CE 26 00         [ 7] 1959 	ld	h,#0x00
   08D0 19            [11] 1960 	add	hl,de
   08D1 6E            [ 7] 1961 	ld	l,(hl)
   08D2 26 00         [ 7] 1962 	ld	h,#0x00
   08D4 29            [11] 1963 	add	hl, hl
   08D5 29            [11] 1964 	add	hl, hl
   08D6 29            [11] 1965 	add	hl, hl
   08D7 29            [11] 1966 	add	hl, hl
   08D8 01 04 00      [10] 1967 	ld	bc,#0x0004
   08DB 09            [11] 1968 	add	hl,bc
   08DC 29            [11] 1969 	add	hl, hl
   08DD 29            [11] 1970 	add	hl, hl
   08DE 29            [11] 1971 	add	hl, hl
   08DF 29            [11] 1972 	add	hl, hl
   08E0 29            [11] 1973 	add	hl, hl
   08E1 29            [11] 1974 	add	hl, hl
   08E2 22r4Br00      [16] 1975 	ld	(_px),hl
                           1976 ;mainloop.h:34: py = (PLAYER_INI_Y << 4) << FIXBITS;
   08E5 11r40r01      [10] 1977 	ld	de,#_l_ini_y+0
   08E8 2ArB4r01      [16] 1978 	ld	hl,(_level)
   08EB 26 00         [ 7] 1979 	ld	h,#0x00
   08ED 19            [11] 1980 	add	hl,de
   08EE 6E            [ 7] 1981 	ld	l,(hl)
   08EF 26 00         [ 7] 1982 	ld	h,#0x00
   08F1 29            [11] 1983 	add	hl, hl
   08F2 29            [11] 1984 	add	hl, hl
   08F3 29            [11] 1985 	add	hl, hl
   08F4 29            [11] 1986 	add	hl, hl
   08F5 29            [11] 1987 	add	hl, hl
   08F6 29            [11] 1988 	add	hl, hl
   08F7 29            [11] 1989 	add	hl, hl
   08F8 29            [11] 1990 	add	hl, hl
   08F9 29            [11] 1991 	add	hl, hl
   08FA 29            [11] 1992 	add	hl, hl
   08FB 22r4Dr00      [16] 1993 	ld	(_py),hl
   08FE                    1994 00105$:
                           1995 ;mainloop.h:36: player_to_pixels ();
   08FE CDr00r00      [17] 1996 	call	_player_to_pixels
                           1997 ;mainloop.h:37: player_init ();
   0901 CDr00r00      [17] 1998 	call	_player_init
                           1999 ;mainloop.h:40: enems_persistent_load ();
   0904 CDr00r00      [17] 2000 	call	_enems_persistent_load
                           2001 ;mainloop.h:48: pobjs = 0;
   0907 21r72r00      [10] 2002 	ld	hl,#_pobjs + 0
   090A 36 00         [10] 2003 	ld	(hl), #0x00
                           2004 ;mainloop.h:108: half_life = 0;
   090C 21rB8r01      [10] 2005 	ld	hl,#_half_life + 0
   090F 36 00         [10] 2006 	ld	(hl), #0x00
                           2007 ;mainloop.h:109: frame_counter = 0;
   0911 21rB9r01      [10] 2008 	ld	hl,#_frame_counter + 0
   0914 36 00         [10] 2009 	ld	(hl), #0x00
                           2010 ;mainloop.h:110: olife = oammo = oobjs = okeys = 0xff;
   0916 21rC1r01      [10] 2011 	ld	hl,#_okeys + 0
   0919 36 FF         [10] 2012 	ld	(hl), #0xFF
   091B 21rC2r01      [10] 2013 	ld	hl,#_oobjs + 0
   091E 36 FF         [10] 2014 	ld	(hl), #0xFF
   0920 21rC3r01      [10] 2015 	ld	hl,#_oammo + 0
   0923 36 FF         [10] 2016 	ld	(hl), #0xFF
   0925 21rC0r01      [10] 2017 	ld	hl,#_olife + 0
   0928 36 FF         [10] 2018 	ld	(hl), #0xFF
                           2019 ;mainloop.h:111: okilled = 0xff;
   092A 21rC4r01      [10] 2020 	ld	hl,#_okilled + 0
   092D 36 FF         [10] 2021 	ld	(hl), #0xFF
   092F C9            [10] 2022 	ret
                           2023 ;mainloop.h:126: void prepare_scr (void) {
                           2024 ;	---------------------------------
                           2025 ; Function prepare_scr
                           2026 ; ---------------------------------
   0930                    2027 _prepare_scr::
                           2028 ;mainloop.h:127: SG_displayOff ();
   0930 21 40 01      [10] 2029 	ld	hl,#0x0140
   0933 E5            [11] 2030 	push	hl
   0934 CDr00r00      [17] 2031 	call	_SG_VDPturnOffFeature
   0937 F1            [10] 2032 	pop	af
                           2033 ;mainloop.h:137: ft = 0;
   0938 FD 21r7Ar00   [14] 2034 	ld	iy,#_ft
   093C FD 36 00 00   [19] 2035 	ld	0 (iy),#0x00
                           2036 ;mainloop.h:139: update_list [update_index] = 0xff;
   0940 3Ar90r00      [13] 2037 	ld	a,(#_update_index + 0)
   0943 C6r91         [ 7] 2038 	add	a, #<(_update_list)
   0945 6F            [ 4] 2039 	ld	l, a
   0946 3E 00         [ 7] 2040 	ld	a, #0x00
   0948 CEs00         [ 7] 2041 	adc	a, #>(_update_list)
   094A 67            [ 4] 2042 	ld	h, a
   094B 36 FF         [10] 2043 	ld	(hl),#0xFF
                           2044 ;mainloop.h:140: SG_doUpdateList ();
   094D CDr00r00      [17] 2045 	call	_SG_doUpdateList
                           2046 ;mainloop.h:141: clear_update_list ();
   0950 CDr00r00      [17] 2047 	call	_clear_update_list
                           2048 ;mainloop.h:150: enems_persistent_update ();
   0953 CDr00r00      [17] 2049 	call	_enems_persistent_update
                           2050 ;mainloop.h:153: enems_load ();
   0956 CDr00r00      [17] 2051 	call	_enems_load
                           2052 ;mainloop.h:154: hotspots_create ();	
   0959 CDrA7r01      [17] 2053 	call	_hotspots_create
                           2054 ;mainloop.h:171: chac_chacs_queue_write = chac_chacs_queue_read = 0;
   095C 21r52r02      [10] 2055 	ld	hl,#_chac_chacs_queue_read + 0
   095F 36 00         [10] 2056 	ld	(hl), #0x00
   0961 21r53r02      [10] 2057 	ld	hl,#_chac_chacs_queue_write + 0
   0964 36 00         [10] 2058 	ld	(hl), #0x00
                           2059 ;mainloop.h:172: max_chac_chacs = 0;
   0966 21r31r02      [10] 2060 	ld	hl,#_max_chac_chacs + 0
   0969 36 00         [10] 2061 	ld	(hl), #0x00
                           2062 ;mainloop.h:181: draw_scr ();
   096B CDr00r00      [17] 2063 	call	_draw_scr
                           2064 ;mainloop.h:220: SG_initSprites ();
   096E CDr00r00      [17] 2065 	call	_SG_initSprites
                           2066 ;mainloop.h:237: gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
   0971 21r06r00      [10] 2067 	ld	hl,#_gpit + 0
   0974 36 03         [10] 2068 	ld	(hl), #0x03
   0976                    2069 00101$:
   0976 21r06r00      [10] 2070 	ld	hl,#_gpit + 0
   0979 5E            [ 7] 2071 	ld	e, (hl)
   097A 21r06r00      [10] 2072 	ld	hl, #_gpit+0
   097D 35            [11] 2073 	dec	(hl)
   097E 7B            [ 4] 2074 	ld	a,e
   097F B7            [ 4] 2075 	or	a, a
   0980 28 1E         [12] 2076 	jr	Z,00103$
   0982 3Er2E         [ 7] 2077 	ld	a,#<(_en_spr_id)
   0984 21r06r00      [10] 2078 	ld	hl,#_gpit
   0987 86            [ 7] 2079 	add	a, (hl)
   0988 5F            [ 4] 2080 	ld	e,a
   0989 3Es02         [ 7] 2081 	ld	a,#>(_en_spr_id)
   098B CE 00         [ 7] 2082 	adc	a, #0x00
   098D 57            [ 4] 2083 	ld	d,a
   098E FD 21r15r02   [14] 2084 	ld	iy,#_en_s
   0992 ED 4Br06r00   [20] 2085 	ld	bc,(_gpit)
   0996 06 00         [ 7] 2086 	ld	b,#0x00
   0998 FD 09         [15] 2087 	add	iy, bc
   099A FD 7E 00      [19] 2088 	ld	a, 0 (iy)
   099D 12            [ 7] 2089 	ld	(de),a
   099E 18 D6         [12] 2090 	jr	00101$
   09A0                    2091 00103$:
                           2092 ;mainloop.h:239: prx = px >> FIXBITS; pry = py >> FIXBITS;
   09A0 2Ar4Br00      [16] 2093 	ld	hl,(_px)
   09A3 CB 2C         [ 8] 2094 	sra	h
   09A5 CB 1D         [ 8] 2095 	rr	l
   09A7 CB 2C         [ 8] 2096 	sra	h
   09A9 CB 1D         [ 8] 2097 	rr	l
   09AB CB 2C         [ 8] 2098 	sra	h
   09AD CB 1D         [ 8] 2099 	rr	l
   09AF CB 2C         [ 8] 2100 	sra	h
   09B1 CB 1D         [ 8] 2101 	rr	l
   09B3 CB 2C         [ 8] 2102 	sra	h
   09B5 CB 1D         [ 8] 2103 	rr	l
   09B7 CB 2C         [ 8] 2104 	sra	h
   09B9 CB 1D         [ 8] 2105 	rr	l
   09BB FD 21r53r00   [14] 2106 	ld	iy,#_prx
   09BF FD 75 00      [19] 2107 	ld	0 (iy),l
   09C2 2Ar4Dr00      [16] 2108 	ld	hl,(_py)
   09C5 CB 2C         [ 8] 2109 	sra	h
   09C7 CB 1D         [ 8] 2110 	rr	l
   09C9 CB 2C         [ 8] 2111 	sra	h
   09CB CB 1D         [ 8] 2112 	rr	l
   09CD CB 2C         [ 8] 2113 	sra	h
   09CF CB 1D         [ 8] 2114 	rr	l
   09D1 CB 2C         [ 8] 2115 	sra	h
   09D3 CB 1D         [ 8] 2116 	rr	l
   09D5 CB 2C         [ 8] 2117 	sra	h
   09D7 CB 1D         [ 8] 2118 	rr	l
   09D9 CB 2C         [ 8] 2119 	sra	h
   09DB CB 1D         [ 8] 2120 	rr	l
   09DD FD 21r54r00   [14] 2121 	ld	iy,#_pry
   09E1 FD 75 00      [19] 2122 	ld	0 (iy),l
                           2123 ;mainloop.h:244: player_move ();
   09E4 CDr00r00      [17] 2124 	call	_player_move
                           2125 ;mainloop.h:245: player_frame_selector ();
   09E7 CDr43r07      [17] 2126 	call	_player_frame_selector
                           2127 ;mainloop.h:247: enems_move ();
   09EA CDr00r00      [17] 2128 	call	_enems_move
                           2129 ;mainloop.h:249: if (hrt) hotspots_paint ();
   09ED 3Ar78r00      [13] 2130 	ld	a,(#_hrt + 0)
   09F0 B7            [ 4] 2131 	or	a, a
   09F1 28 03         [12] 2132 	jr	Z,00105$
   09F3 CDr7Cr01      [17] 2133 	call	_hotspots_paint
   09F6                    2134 00105$:
                           2135 ;mainloop.h:264: hud_update ();
   09F6 CDr10r02      [17] 2136 	call	_hud_update
                           2137 ;mainloop.h:265: SG_copySpritestoSAT ();
   09F9 CDr00r00      [17] 2138 	call	_SG_copySpritestoSAT
                           2139 ;mainloop.h:266: update_list [update_index] = 0xff;
   09FC 3Ar90r00      [13] 2140 	ld	a,(#_update_index + 0)
   09FF C6r91         [ 7] 2141 	add	a, #<(_update_list)
   0A01 6F            [ 4] 2142 	ld	l, a
   0A02 3E 00         [ 7] 2143 	ld	a, #0x00
   0A04 CEs00         [ 7] 2144 	adc	a, #>(_update_list)
   0A06 67            [ 4] 2145 	ld	h, a
   0A07 36 FF         [10] 2146 	ld	(hl),#0xFF
                           2147 ;mainloop.h:267: SG_doUpdateList ();
   0A09 CDr00r00      [17] 2148 	call	_SG_doUpdateList
                           2149 ;mainloop.h:268: clear_update_list ();	
   0A0C CDr00r00      [17] 2150 	call	_clear_update_list
                           2151 ;mainloop.h:269: SG_displayOn ();
   0A0F 21 40 01      [10] 2152 	ld	hl,#0x0140
   0A12 E5            [11] 2153 	push	hl
   0A13 CDr00r00      [17] 2154 	call	_SG_VDPturnOnFeature
   0A16 F1            [10] 2155 	pop	af
                           2156 ;mainloop.h:271: pad0 = 0;
   0A17 21r04r00      [10] 2157 	ld	hl,#_pad0 + 0
   0A1A 36 00         [10] 2158 	ld	(hl), #0x00
   0A1C C9            [10] 2159 	ret
                           2160 ;mainloop.h:274: void game_loop (void) {
                           2161 ;	---------------------------------
                           2162 ; Function game_loop
                           2163 ; ---------------------------------
   0A1D                    2164 _game_loop::
                           2165 ;mainloop.h:275: clear_update_list ();
   0A1D CDr00r00      [17] 2166 	call	_clear_update_list
                           2167 ;mainloop.h:277: on_pant = 99; ft = 1; fade_delay = 1;
   0A20 21rB7r01      [10] 2168 	ld	hl,#_on_pant + 0
   0A23 36 63         [10] 2169 	ld	(hl), #0x63
   0A25 21r7Ar00      [10] 2170 	ld	hl,#_ft + 0
   0A28 36 01         [10] 2171 	ld	(hl), #0x01
   0A2A 21rF2r00      [10] 2172 	ld	hl,#_fade_delay + 0
   0A2D 36 01         [10] 2173 	ld	(hl), #0x01
                           2174 ;mainloop.h:281: SG_displayOn ();
   0A2F 21 40 01      [10] 2175 	ld	hl,#0x0140
   0A32 E5            [11] 2176 	push	hl
   0A33 CDr00r00      [17] 2177 	call	_SG_VDPturnOnFeature
   0A36 F1            [10] 2178 	pop	af
                           2179 ;mainloop.h:292: ntsc_frame = level_reset = warp_to_level = 0; 
   0A37 21rBDr01      [10] 2180 	ld	hl,#_warp_to_level + 0
   0A3A 36 00         [10] 2181 	ld	(hl), #0x00
   0A3C 21rBEr01      [10] 2182 	ld	hl,#_level_reset + 0
   0A3F 36 00         [10] 2183 	ld	(hl), #0x00
   0A41 21r8Fr00      [10] 2184 	ld	hl,#_ntsc_frame + 0
   0A44 36 00         [10] 2185 	ld	(hl), #0x00
                           2186 ;mainloop.h:293: ticker = 50;
   0A46 21r1Dr00      [10] 2187 	ld	hl,#_ticker + 0
   0A49 36 32         [10] 2188 	ld	(hl), #0x32
                           2189 ;mainloop.h:296: PSGPlay (l_music [level]);
   0A4B FD 21rB4r01   [14] 2190 	ld	iy,#_level
   0A4F FD 6E 00      [19] 2191 	ld	l,0 (iy)
   0A52 26 00         [ 7] 2192 	ld	h,#0x00
   0A54 29            [11] 2193 	add	hl, hl
   0A55 11r76r01      [10] 2194 	ld	de,#_l_music
   0A58 19            [11] 2195 	add	hl,de
   0A59 5E            [ 7] 2196 	ld	e,(hl)
   0A5A 23            [ 6] 2197 	inc	hl
   0A5B 56            [ 7] 2198 	ld	d,(hl)
   0A5C D5            [11] 2199 	push	de
   0A5D CDr00r00      [17] 2200 	call	_PSGPlay
   0A60 F1            [10] 2201 	pop	af
                           2202 ;mainloop.h:301: while (1) {
   0A61                    2203 00147$:
                           2204 ;mainloop.h:308: hud_update ();
   0A61 CDr10r02      [17] 2205 	call	_hud_update
                           2206 ;mainloop.h:312: if (pkill) player_kill ();
   0A64 3Ar6Dr00      [13] 2207 	ld	a,(#_pkill + 0)
   0A67 B7            [ 4] 2208 	or	a, a
   0A68 28 03         [12] 2209 	jr	Z,00102$
   0A6A CDr00r00      [17] 2210 	call	_player_kill
   0A6D                    2211 00102$:
                           2212 ;mainloop.h:313: if (game_over || level_reset) break;			
   0A6D 3ArBCr01      [13] 2213 	ld	a,(#_game_over + 0)
   0A70 B7            [ 4] 2214 	or	a, a
   0A71 C2r59r0C      [10] 2215 	jp	NZ,00148$
   0A74 3ArBEr01      [13] 2216 	ld	a,(#_level_reset + 0)
   0A77 B7            [ 4] 2217 	or	a, a
   0A78 C2r59r0C      [10] 2218 	jp	NZ,00148$
                           2219 ;mainloop.h:319: flick_override = 0;
   0A7B 21rBFr01      [10] 2220 	ld	hl,#_flick_override + 0
   0A7E 36 00         [10] 2221 	ld	(hl), #0x00
                           2222 ;mainloop.h:322: flickscreen_do_horizontal ();
   0A80 CDr61r06      [17] 2223 	call	_flickscreen_do_horizontal
                           2224 ;mainloop.h:323: flickscreen_do_vertical ();
   0A83 CDrA0r06      [17] 2225 	call	_flickscreen_do_vertical
                           2226 ;mainloop.h:329: if (on_pant != n_pant) {
   0A86 3ArB7r01      [13] 2227 	ld	a,(#_on_pant + 0)
   0A89 FD 21rB6r01   [14] 2228 	ld	iy,#_n_pant
   0A8D FD 96 00      [19] 2229 	sub	a, 0 (iy)
   0A90 28 09         [12] 2230 	jr	Z,00109$
                           2231 ;mainloop.h:330: prepare_scr ();
   0A92 CDr30r09      [17] 2232 	call	_prepare_scr
                           2233 ;mainloop.h:331: on_pant = n_pant;
   0A95 3ArB6r01      [13] 2234 	ld	a,(#_n_pant + 0)
   0A98 32rB7r01      [13] 2235 	ld	(#_on_pant + 0),a
   0A9B                    2236 00109$:
                           2237 ;mainloop.h:350: SG_waitForVBlank ();
   0A9B CDr00r00      [17] 2238 	call	_SG_waitForVBlank
                           2239 ;mainloop.h:351: SG_copySpritestoSAT ();
   0A9E CDr00r00      [17] 2240 	call	_SG_copySpritestoSAT
                           2241 ;mainloop.h:352: update_list [update_index] = 0xff;
   0AA1 3Er91         [ 7] 2242 	ld	a,#<(_update_list)
   0AA3 21r90r00      [10] 2243 	ld	hl,#_update_index
   0AA6 86            [ 7] 2244 	add	a, (hl)
   0AA7 6F            [ 4] 2245 	ld	l, a
   0AA8 3Es00         [ 7] 2246 	ld	a, #>(_update_list)
   0AAA CE 00         [ 7] 2247 	adc	a, #0x00
   0AAC 67            [ 4] 2248 	ld	h, a
   0AAD 36 FF         [10] 2249 	ld	(hl),#0xFF
                           2250 ;mainloop.h:353: SG_doUpdateList ();
   0AAF CDr00r00      [17] 2251 	call	_SG_doUpdateList
                           2252 ;mainloop.h:354: clear_update_list ();
   0AB2 CDr00r00      [17] 2253 	call	_clear_update_list
                           2254 ;mainloop.h:358: pad_read ();
   0AB5 CDr00r00      [17] 2255 	call	_pad_read
                           2256 ;mainloop.h:359: a_button = (pad_this_frame & PAD_A);
   0AB8 3Ar05r00      [13] 2257 	ld	a,(#_pad_this_frame + 0)
   0ABB E6 20         [ 7] 2258 	and	a, #0x20
   0ABD 32r5Ar00      [13] 2259 	ld	(#_a_button + 0),a
                           2260 ;mainloop.h:360: b_button = (pad_this_frame & PAD_B);
   0AC0 3Ar05r00      [13] 2261 	ld	a,(#_pad_this_frame + 0)
   0AC3 E6 10         [ 7] 2262 	and	a, #0x10
   0AC5 32r5Br00      [13] 2263 	ld	(#_b_button + 0),a
                           2264 ;mainloop.h:364: ntsc_frame ++; if (ntsc_frame == 6) ntsc_frame = 0;
   0AC8 21r8Fr00      [10] 2265 	ld	hl, #_ntsc_frame+0
   0ACB 34            [11] 2266 	inc	(hl)
   0ACC 3Ar8Fr00      [13] 2267 	ld	a,(#_ntsc_frame + 0)
   0ACF D6 06         [ 7] 2268 	sub	a, #0x06
   0AD1 20 05         [12] 2269 	jr	NZ,00111$
   0AD3 21r8Fr00      [10] 2270 	ld	hl,#_ntsc_frame + 0
   0AD6 36 00         [10] 2271 	ld	(hl), #0x00
   0AD8                    2272 00111$:
                           2273 ;mainloop.h:366: if (paused == 0 && (ntsc == 0 || ntsc_frame)) {
   0AD8 3ArBAr01      [13] 2274 	ld	a,(#_paused + 0)
   0ADB B7            [ 4] 2275 	or	a, a
   0ADC C2r3Ar0C      [10] 2276 	jp	NZ,00139$
   0ADF 3Ar8Er00      [13] 2277 	ld	a,(#_ntsc + 0)
   0AE2 B7            [ 4] 2278 	or	a, a
   0AE3 28 07         [12] 2279 	jr	Z,00138$
   0AE5 3Ar8Fr00      [13] 2280 	ld	a,(#_ntsc_frame + 0)
   0AE8 B7            [ 4] 2281 	or	a, a
   0AE9 CAr3Ar0C      [10] 2282 	jp	Z,00139$
   0AEC                    2283 00138$:
                           2284 ;mainloop.h:367: SG_initSprites ();
   0AEC CDr00r00      [17] 2285 	call	_SG_initSprites
                           2286 ;mainloop.h:370: if (ticker) -- ticker; else ticker = 50;
   0AEF 3Ar1Dr00      [13] 2287 	ld	a,(#_ticker + 0)
   0AF2 B7            [ 4] 2288 	or	a, a
   0AF3 28 06         [12] 2289 	jr	Z,00113$
   0AF5 21r1Dr00      [10] 2290 	ld	hl, #_ticker+0
   0AF8 35            [11] 2291 	dec	(hl)
   0AF9 18 05         [12] 2292 	jr	00114$
   0AFB                    2293 00113$:
   0AFB 21r1Dr00      [10] 2294 	ld	hl,#_ticker + 0
   0AFE 36 32         [10] 2295 	ld	(hl), #0x32
   0B00                    2296 00114$:
                           2297 ;mainloop.h:371: half_life ^= 1;
   0B00 3ArB8r01      [13] 2298 	ld	a,(#_half_life + 0)
   0B03 EE 01         [ 7] 2299 	xor	a, #0x01
   0B05 32rB8r01      [13] 2300 	ld	(#_half_life + 0),a
                           2301 ;mainloop.h:372: ++ frame_counter;
   0B08 21rB9r01      [10] 2302 	ld	hl, #_frame_counter+0
   0B0B 34            [11] 2303 	inc	(hl)
                           2304 ;mainloop/hotspots.h:6: if (hrt) {
   0B0C 3Ar78r00      [13] 2305 	ld	a,(#_hrt + 0)
   0B0F B7            [ 4] 2306 	or	a, a
   0B10 CArE0r0B      [10] 2307 	jp	Z,00127$
                           2308 ;mainloop/hotspots.h:7: if (collide_in (prx + 4, pry + 8, hrx, hry)) {
   0B13 3Ar54r00      [13] 2309 	ld	a,(#_pry + 0)
   0B16 C6 08         [ 7] 2310 	add	a, #0x08
   0B18 57            [ 4] 2311 	ld	d,a
   0B19 21r53r00      [10] 2312 	ld	hl,#_prx + 0
   0B1C 46            [ 7] 2313 	ld	b, (hl)
   0B1D 04            [ 4] 2314 	inc	b
   0B1E 04            [ 4] 2315 	inc	b
   0B1F 04            [ 4] 2316 	inc	b
   0B20 04            [ 4] 2317 	inc	b
   0B21 3Ar77r00      [13] 2318 	ld	a,(_hry)
   0B24 F5            [11] 2319 	push	af
   0B25 33            [ 6] 2320 	inc	sp
   0B26 3Ar76r00      [13] 2321 	ld	a,(_hrx)
   0B29 F5            [11] 2322 	push	af
   0B2A 33            [ 6] 2323 	inc	sp
   0B2B D5            [11] 2324 	push	de
   0B2C 33            [ 6] 2325 	inc	sp
   0B2D C5            [11] 2326 	push	bc
   0B2E 33            [ 6] 2327 	inc	sp
   0B2F CDr00r00      [17] 2328 	call	_collide_in
   0B32 F1            [10] 2329 	pop	af
   0B33 F1            [10] 2330 	pop	af
   0B34 7D            [ 4] 2331 	ld	a,l
   0B35 B7            [ 4] 2332 	or	a, a
   0B36 CArE0r0B      [10] 2333 	jp	Z,00127$
                           2334 ;mainloop/hotspots.h:128: gp_gen = 0; rdm = 1;
   0B39 21 00 00      [10] 2335 	ld	hl,#0x0000
   0B3C 22r0Ar00      [16] 2336 	ld	(_gp_gen),hl
   0B3F 21r1Ar00      [10] 2337 	ld	hl,#_rdm + 0
   0B42 36 01         [10] 2338 	ld	(hl), #0x01
                           2339 ;mainloop/hotspots.h:129: switch (hrt) {
   0B44 3Ar78r00      [13] 2340 	ld	a,(#_hrt + 0)
   0B47 3D            [ 4] 2341 	dec	a
   0B48 28 0D         [12] 2342 	jr	Z,00115$
   0B4A 3Ar78r00      [13] 2343 	ld	a,(#_hrt + 0)
   0B4D FE 03         [ 7] 2344 	cp	a,#0x03
   0B4F 28 16         [12] 2345 	jr	Z,00116$
   0B51 D6 04         [ 7] 2346 	sub	a, #0x04
   0B53 28 27         [12] 2347 	jr	Z,00117$
   0B55 18 5C         [12] 2348 	jr	00121$
                           2349 ;mainloop/hotspots.h:131: case HOTSPOT_TYPE_OBJECT:
   0B57                    2350 00115$:
                           2351 ;mainloop/hotspots.h:145: ++ pobjs;
   0B57 21r72r00      [10] 2352 	ld	hl, #_pobjs+0
   0B5A 34            [11] 2353 	inc	(hl)
                           2354 ;mainloop/hotspots.h:146: gp_gen = SFX_OBJECT;
   0B5B 21r0Ar00      [10] 2355 	ld	hl,#_gp_gen + 0
   0B5E 36r00         [10] 2356 	ld	(hl), #<(_s_02_object2_psg)
   0B60 21r0Br00      [10] 2357 	ld	hl,#_gp_gen + 1
   0B63 36s00         [10] 2358 	ld	(hl), #>(_s_02_object2_psg)
                           2359 ;mainloop/hotspots.h:148: break;
   0B65 18 4C         [12] 2360 	jr	00121$
                           2361 ;mainloop/hotspots.h:156: case HOTSPOT_TYPE_REFILL:
   0B67                    2362 00116$:
                           2363 ;mainloop/hotspots.h:157: plife += PLAYER_REFILL;
   0B67 21r71r00      [10] 2364 	ld	hl, #_plife+0
   0B6A 34            [11] 2365 	inc	(hl)
                           2366 ;mainloop/hotspots.h:161: gp_gen = SFX_USE;
   0B6B 21r0Ar00      [10] 2367 	ld	hl,#_gp_gen + 0
   0B6E 36r00         [10] 2368 	ld	(hl), #<(_s_03_use2_psg)
   0B70 21r0Br00      [10] 2369 	ld	hl,#_gp_gen + 1
   0B73 36s00         [10] 2370 	ld	(hl), #>(_s_03_use2_psg)
                           2371 ;mainloop/hotspots.h:162: rdm = 2;
   0B75 21r1Ar00      [10] 2372 	ld	hl,#_rdm + 0
   0B78 36 02         [10] 2373 	ld	(hl), #0x02
                           2374 ;mainloop/hotspots.h:163: break;
   0B7A 18 37         [12] 2375 	jr	00121$
                           2376 ;mainloop/hotspots.h:165: case HOTSPOT_TYPE_AMMO:
   0B7C                    2377 00117$:
                           2378 ;mainloop/hotspots.h:166: gp_gen = SFX_OBJECT;
   0B7C 21r0Ar00      [10] 2379 	ld	hl,#_gp_gen + 0
   0B7F 36r00         [10] 2380 	ld	(hl), #<(_s_02_object2_psg)
   0B81 21r0Br00      [10] 2381 	ld	hl,#_gp_gen + 1
   0B84 36s00         [10] 2382 	ld	(hl), #>(_s_02_object2_psg)
                           2383 ;mainloop/hotspots.h:167: if (MAX_AMMO - pammo > AMMO_REFILL)
   0B86 FD 21r73r00   [14] 2384 	ld	iy,#_pammo
   0B8A FD 66 00      [19] 2385 	ld	h,0 (iy)
   0B8D 2E 00         [ 7] 2386 	ld	l,#0x00
   0B8F 3E 63         [ 7] 2387 	ld	a,#0x63
   0B91 94            [ 4] 2388 	sub	a, h
   0B92 67            [ 4] 2389 	ld	h,a
   0B93 3E 00         [ 7] 2390 	ld	a,#0x00
   0B95 9D            [ 4] 2391 	sbc	a, l
   0B96 6F            [ 4] 2392 	ld	l,a
   0B97 3E 32         [ 7] 2393 	ld	a,#0x32
   0B99 BC            [ 4] 2394 	cp	a, h
   0B9A 3E 00         [ 7] 2395 	ld	a,#0x00
   0B9C 9D            [ 4] 2396 	sbc	a, l
   0B9D E2rA2r0B      [10] 2397 	jp	PO, 00250$
   0BA0 EE 80         [ 7] 2398 	xor	a, #0x80
   0BA2                    2399 00250$:
   0BA2 F2rAEr0B      [10] 2400 	jp	P,00119$
                           2401 ;mainloop/hotspots.h:168: pammo += AMMO_REFILL;
   0BA5 21r73r00      [10] 2402 	ld	hl,#_pammo
   0BA8 7E            [ 7] 2403 	ld	a,(hl)
   0BA9 C6 32         [ 7] 2404 	add	a, #0x32
   0BAB 77            [ 7] 2405 	ld	(hl),a
   0BAC 18 05         [12] 2406 	jr	00121$
   0BAE                    2407 00119$:
                           2408 ;mainloop/hotspots.h:170: pammo = MAX_AMMO;
   0BAE 21r73r00      [10] 2409 	ld	hl,#_pammo + 0
   0BB1 36 63         [10] 2410 	ld	(hl), #0x63
                           2411 ;mainloop/hotspots.h:192: }
   0BB3                    2412 00121$:
                           2413 ;mainloop/hotspots.h:193: if (gp_gen) {
   0BB3 3Ar0Br00      [13] 2414 	ld	a,(#_gp_gen + 1)
   0BB6 21r0Ar00      [10] 2415 	ld	hl,#_gp_gen + 0
   0BB9 B6            [ 7] 2416 	or	a,(hl)
   0BBA 28 24         [12] 2417 	jr	Z,00127$
                           2418 ;mainloop/hotspots.h:194: PSGSFXPlay (gp_gen, rdm);
   0BBC ED 5Br0Ar00   [20] 2419 	ld	de,(_gp_gen)
   0BC0 3Ar1Ar00      [13] 2420 	ld	a,(_rdm)
   0BC3 F5            [11] 2421 	push	af
   0BC4 33            [ 6] 2422 	inc	sp
   0BC5 D5            [11] 2423 	push	de
   0BC6 CDr00r00      [17] 2424 	call	_PSGSFXPlay
   0BC9 F1            [10] 2425 	pop	af
   0BCA 33            [ 6] 2426 	inc	sp
                           2427 ;mainloop/hotspots.h:195: hrt = 0;
   0BCB FD 21r78r00   [14] 2428 	ld	iy,#_hrt
   0BCF FD 36 00 00   [19] 2429 	ld	0 (iy),#0x00
                           2430 ;mainloop/hotspots.h:196: hact [n_pant] = 0;
   0BD3 3ArB6r01      [13] 2431 	ld	a,(#_n_pant + 0)
   0BD6 C6rC7         [ 7] 2432 	add	a, #<(_hact)
   0BD8 5F            [ 4] 2433 	ld	e,a
   0BD9 3E 00         [ 7] 2434 	ld	a,#0x00
   0BDB CEs01         [ 7] 2435 	adc	a, #>(_hact)
   0BDD 57            [ 4] 2436 	ld	d,a
   0BDE AF            [ 4] 2437 	xor	a, a
   0BDF 12            [ 7] 2438 	ld	(de),a
   0BE0                    2439 00127$:
                           2440 ;mainloop.h:392: if (!warp_to_level) {
   0BE0 3ArBDr01      [13] 2441 	ld	a,(#_warp_to_level + 0)
   0BE3 B7            [ 4] 2442 	or	a, a
   0BE4 20 06         [12] 2443 	jr	NZ,00129$
                           2444 ;mainloop.h:393: player_move ();
   0BE6 CDr00r00      [17] 2445 	call	_player_move
                           2446 ;mainloop.h:394: player_frame_selector ();
   0BE9 CDr43r07      [17] 2447 	call	_player_frame_selector
   0BEC                    2448 00129$:
                           2449 ;mainloop/win_level_condition.h:14: pobjs == PLAYER_MAX_OBJECTS
   0BEC FD 21r49r01   [14] 2450 	ld	iy,#_l_player_max_objects
   0BF0 ED 5BrB4r01   [20] 2451 	ld	de,(_level)
   0BF4 16 00         [ 7] 2452 	ld	d,#0x00
   0BF6 FD 19         [15] 2453 	add	iy, de
   0BF8 FD 56 00      [19] 2454 	ld	d, 0 (iy)
   0BFB 3Ar72r00      [13] 2455 	ld	a,(#_pobjs + 0)
   0BFE 92            [ 4] 2456 	sub	a, d
   0BFF 20 0D         [12] 2457 	jr	NZ,00131$
                           2458 ;mainloop/win_level_condition.h:23: PSGStop ();
   0C01 CDr00r00      [17] 2459 	call	_PSGStop
                           2460 ;mainloop/win_level_condition.h:24: delay (50);
   0C04 3E 32         [ 7] 2461 	ld	a,#0x32
   0C06 F5            [11] 2462 	push	af
   0C07 33            [ 6] 2463 	inc	sp
   0C08 CDr00r00      [17] 2464 	call	_delay
   0C0B 33            [ 6] 2465 	inc	sp
                           2466 ;mainloop/win_level_condition.h:25: break;
   0C0C 18 4B         [12] 2467 	jr	00148$
   0C0E                    2468 00131$:
                           2469 ;mainloop.h:431: cur_stp = SG_getStp (); 
   0C0E CDr00r00      [17] 2470 	call	_SG_getStp
   0C11 22r25r00      [16] 2471 	ld	(_cur_stp),hl
                           2472 ;mainloop.h:432: if (!warp_to_level)	player_render ();
   0C14 3ArBDr01      [13] 2473 	ld	a,(#_warp_to_level + 0)
   0C17 B7            [ 4] 2474 	or	a, a
   0C18 20 03         [12] 2475 	jr	NZ,00133$
   0C1A CDr00r00      [17] 2476 	call	_player_render
   0C1D                    2477 00133$:
                           2478 ;mainloop.h:436: enems_move ();
   0C1D CDr00r00      [17] 2479 	call	_enems_move
                           2480 ;mainloop.h:440: if (warp_to_level) {
   0C20 3ArBDr01      [13] 2481 	ld	a,(#_warp_to_level + 0)
   0C23 B7            [ 4] 2482 	or	a, a
   0C24 28 08         [12] 2483 	jr	Z,00135$
                           2484 ;mainloop.h:441: update_cycle (); PSGStop (); break;
   0C26 CDr00r00      [17] 2485 	call	_update_cycle
   0C29 CDr00r00      [17] 2486 	call	_PSGStop
   0C2C 18 2B         [12] 2487 	jr	00148$
   0C2E                    2488 00135$:
                           2489 ;mainloop.h:452: if (hrt) hotspots_paint ();
   0C2E 3Ar78r00      [13] 2490 	ld	a,(#_hrt + 0)
   0C31 B7            [ 4] 2491 	or	a, a
   0C32 28 03         [12] 2492 	jr	Z,00137$
   0C34 CDr7Cr01      [17] 2493 	call	_hotspots_paint
   0C37                    2494 00137$:
                           2495 ;mainloop.h:481: chac_chacs_do ();
   0C37 CDr00r00      [17] 2496 	call	_chac_chacs_do
   0C3A                    2497 00139$:
                           2498 ;mainloop/cheat.h:5: if ((pad0 & (PAD_B|PAD_SELECT|PAD_UP)) == (PAD_B|PAD_SELECT|PAD_UP)) break;
   0C3A 3Ar04r00      [13] 2499 	ld	a,(#_pad0 + 0)
   0C3D E6 31         [ 7] 2500 	and	a, #0x31
   0C3F D6 31         [ 7] 2501 	sub	a, #0x31
   0C41 28 16         [12] 2502 	jr	Z,00148$
   0C43 CDr00r00      [17] 2503 	call	_SG_queryPauseRequested
   0C46 CB 45         [ 8] 2504 	bit	0,l
   0C48 CAr61r0A      [10] 2505 	jp	Z,00147$
                           2506 ;mainloop/pause.h:6: SG_resetPauseRequest ();
   0C4B CDr00r00      [17] 2507 	call	_SG_resetPauseRequest
                           2508 ;mainloop/pause.h:7: paused ^= 1;
   0C4E 3ArBAr01      [13] 2509 	ld	a,(#_paused + 0)
   0C51 EE 01         [ 7] 2510 	xor	a, #0x01
   0C53 32rBAr01      [13] 2511 	ld	(#_paused + 0),a
   0C56 C3r61r0A      [10] 2512 	jp	00147$
   0C59                    2513 00148$:
                           2514 ;mainloop.h:496: PSGStop ();
   0C59 CDr00r00      [17] 2515 	call	_PSGStop
                           2516 ;mainloop.h:497: PSGSFXStop ();
   0C5C CDr00r00      [17] 2517 	call	_PSGSFXStop
                           2518 ;mainloop.h:498: SG_displayOff ();
   0C5F 21 40 01      [10] 2519 	ld	hl,#0x0140
   0C62 E5            [11] 2520 	push	hl
   0C63 CDr00r00      [17] 2521 	call	_SG_VDPturnOffFeature
   0C66 F1            [10] 2522 	pop	af
                           2523 ;mainloop.h:499: SG_initSprites ();
   0C67 CDr00r00      [17] 2524 	call	_SG_initSprites
                           2525 ;mainloop.h:500: SG_copySpritestoSAT ();	
   0C6A C3r00r00      [10] 2526 	jp  _SG_copySpritestoSAT
                           2527 ;game.c:128: void main(void) {
                           2528 ;	---------------------------------
                           2529 ; Function main
                           2530 ; ---------------------------------
   0C6D                    2531 _main::
                           2532 ;game.c:129: SG_displayOff ();
   0C6D 21 40 01      [10] 2533 	ld	hl,#0x0140
   0C70 E5            [11] 2534 	push	hl
   0C71 CDr00r00      [17] 2535 	call	_SG_VDPturnOffFeature
                           2536 ;game.c:130: SG_setSpriteMode (SG_SPRITEMODE_LARGE);
   0C74 26 01         [ 7] 2537 	ld	h,#0x01
   0C76 E3            [19] 2538 	ex	(sp),hl
   0C77 33            [ 6] 2539 	inc	sp
   0C78 CDr00r00      [17] 2540 	call	_SG_setSpriteMode
   0C7B 33            [ 6] 2541 	inc	sp
                           2542 ;game.c:131: SG_setUpdateList (update_list);
   0C7C 21r91r00      [10] 2543 	ld	hl,#_update_list
   0C7F E5            [11] 2544 	push	hl
   0C80 CDr00r00      [17] 2545 	call	_SG_setUpdateList
   0C83 F1            [10] 2546 	pop	af
                           2547 ;game.c:132: first_game = 1;
   0C84 21rB3r01      [10] 2548 	ld	hl,#_first_game + 0
   0C87 36 01         [10] 2549 	ld	(hl), #0x01
                           2550 ;game.c:137: ntsc = 1;
   0C89 21r8Er00      [10] 2551 	ld	hl,#_ntsc + 0
   0C8C 36 01         [10] 2552 	ld	(hl), #0x01
                           2553 ;game.c:141: unpack_bg_patterns (tsALL_patterns_c, tsALL_colours_c, 0, 7);
   0C8E 11r00r00      [10] 2554 	ld	de,#_tsALL_patterns_c
   0C91 3E 07         [ 7] 2555 	ld	a,#0x07
   0C93 F5            [11] 2556 	push	af
   0C94 33            [ 6] 2557 	inc	sp
   0C95 21 00 00      [10] 2558 	ld	hl,#0x0000
   0C98 E5            [11] 2559 	push	hl
   0C99 21r00r00      [10] 2560 	ld	hl,#_tsALL_colours_c
   0C9C E5            [11] 2561 	push	hl
   0C9D D5            [11] 2562 	push	de
   0C9E CDr00r00      [17] 2563 	call	_unpack_bg_patterns
   0CA1 21 07 00      [10] 2564 	ld	hl,#7
   0CA4 39            [11] 2565 	add	hl,sp
   0CA5 F9            [ 6] 2566 	ld	sp,hl
                           2567 ;game.c:143: credits ();
   0CA6 CDr5Br05      [17] 2568 	call	_credits
                           2569 ;game.c:146: aPLib_depack_VRAM (SGT_BASE, ssALL_patterns_c);
   0CA9 21r00r00      [10] 2570 	ld	hl,#_ssALL_patterns_c
   0CAC E5            [11] 2571 	push	hl
   0CAD 21 00 38      [10] 2572 	ld	hl,#0x3800
   0CB0 E5            [11] 2573 	push	hl
   0CB1 CDr00r00      [17] 2574 	call	_aPLib_depack_VRAM
   0CB4 F1            [10] 2575 	pop	af
   0CB5 F1            [10] 2576 	pop	af
                           2577 ;game.c:148: game_puri = 0;
   0CB6 21r55r02      [10] 2578 	ld	hl,#_game_puri + 0
   0CB9 36 00         [10] 2579 	ld	(hl), #0x00
                           2580 ;game.c:149: while (1) {	
   0CBB                    2581 00108$:
                           2582 ;game.c:150: title ();
   0CBB CDr1Er03      [17] 2583 	call	_title
                           2584 ;game.c:153: plife = PLAYER_LIFE;
   0CBE 21r71r00      [10] 2585 	ld	hl,#_plife + 0
   0CC1 36 0A         [10] 2586 	ld	(hl), #0x0A
                           2587 ;game.c:158: game_init (); 
   0CC3 CDrD2r07      [17] 2588 	call	_game_init
                           2589 ;game.c:159: game_loop ();
   0CC6 CDr1Dr0A      [17] 2590 	call	_game_loop
                           2591 ;game.c:161: if (game_over) {
   0CC9 3ArBCr01      [13] 2592 	ld	a,(#_game_over + 0)
   0CCC B7            [ 4] 2593 	or	a, a
   0CCD 28 0F         [12] 2594 	jr	Z,00102$
                           2595 ;game.c:162: pres (scr_game_over, MUSIC_GOVER);
   0CCF 21r00r00      [10] 2596 	ld	hl,#_m_gover_psg
   0CD2 E5            [11] 2597 	push	hl
   0CD3 21r09r04      [10] 2598 	ld	hl,#_scr_game_over
   0CD6 E5            [11] 2599 	push	hl
   0CD7 CDr7Ar02      [17] 2600 	call	_pres
   0CDA F1            [10] 2601 	pop	af
   0CDB F1            [10] 2602 	pop	af
                           2603 ;game.c:163: break;
   0CDC 18 0D         [12] 2604 	jr	00106$
   0CDE                    2605 00102$:
                           2606 ;game.c:167: pres (scr_the_end, 0);
   0CDE 21 00 00      [10] 2607 	ld	hl,#0x0000
   0CE1 E5            [11] 2608 	push	hl
   0CE2 21rA5r04      [10] 2609 	ld	hl,#_scr_the_end
   0CE5 E5            [11] 2610 	push	hl
   0CE6 CDr7Ar02      [17] 2611 	call	_pres
   0CE9 F1            [10] 2612 	pop	af
   0CEA F1            [10] 2613 	pop	af
                           2614 ;game.c:168: break;
   0CEB                    2615 00106$:
                           2616 ;game.c:173: first_game = 0;
   0CEB 21rB3r01      [10] 2617 	ld	hl,#_first_game + 0
   0CEE 36 00         [10] 2618 	ld	(hl), #0x00
   0CF0 18 C9         [12] 2619 	jr	00108$
                           2620 	.area _CODE
                           2621 	.area _INITIALIZER
                           2622 	.area _CABS (ABS)
